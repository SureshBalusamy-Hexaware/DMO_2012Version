@{
    ViewBag.Title = "Data Reconciliation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        background: #aaaaaa 50% 50% repeat-x;
        z-index: 10000 !important;
        opacity: 0.5 !important;
        filter: alpha(opacity=50) !important;
        min-height: 100%;
        width: 100%;
    }

    .myLoadingProgress {
        z-index: 9999 !important;
        margin: 300px auto;
        padding: 10px;
        width: 200px;
        background-color: White;
        border: 5px solid #67CFF5;
        /*border-radius: 10px;*/
        filter: alpha(opacity=100);
        opacity: 1;
        -moz-opacity: 1;
    }

    .exp-autocomplete {
        color: #cf3b27;
        font-weight: 900;
        font-size: 14px;
    }

    .ui-autocomplete {
        cursor: pointer;
        height: 200px;
        overflow-y: scroll;
        overflow-x: hidden;
        font-size: 13px;
        line-height: normal;
        font-family: "Open Sans",sans-serif;
        background-image: none;
    }

        .ui-autocomplete.ui-widget {
            font-family: "Open Sans",sans-serif;
            font-size: 12px;
        }

    .myDialogClass .ui-widget-header {
        font-family: "open_sansregular", "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif;
        margin-bottom: 5px;
        font-size: 13px;
        letter-spacing: 0.3px !important;
        font-weight: normal;
    }

    .myDialogClass .ui-widget-content {
        background-color: #F3F3F3;
    }
</style>
<script src="~/Scripts/jquery-ui-1.11.4.min.js"></script>

<script type="text/javascript">

    var lastSel = -1;
    var baseUrl;
    $(document).ajaxStart(function () {
        $('.modal').show();
    }).ajaxStop(function () {
        $('.modal').hide();
    });

    $(document).ready(function () {
        baseUrl = '@Url.Content("~/")';
        var client_ID = $("#hdnClientId").val();
        var project_ID = $("#hdnProjectId").val();
        var DatabaseIP = $("#hdnDatabaseIP").val();
        var SourceTarget = $("#hdnSourceTarget").val();
        var DatabaseName = $("#hdnDatabaseName").val();
        var srcConfigId = $("#hdnConfigId").val();
        var tgtConfigId = $("#hdnTgtConfigId").val();
        var tgtDatabaseIP = $("#hdnTgtDatabaseIP").val();
        var tgtDatabaseName = $("#hdnTgtDatabaseName").val();
        $("#btnViewReport").prop("disabled", true);
        $("#btnCompare").prop("disabled", true);
        $('#ddlTemplateName').hide();

        var srcTemplateData = [];
        var tgtTemplateData = [];

        var srcTables =
                $.ajax({
                    url: baseUrl + "api/DataProfilerAPI/GetProfilerTableNames",
                    data: { client_ID: client_ID, project_ID: project_ID, config_Id: srcConfigId },
                    async: false,
                    success: function (data, result) {
                        if (!result) alert('Failure to retrieve the Tables.');
                    },
                    error: function (err) {
                        alert(err.statusText);
                    }
                }).responseText;

        var srclist = jQuery.parseJSON(srcTables);

        for (i = 0; i < srclist.length; i++) {
            $('#ddlSourcetbl').append($('<option>').text(srclist[i].Table_Name).val(srclist[i].Table_Name));
        }

        var tgtTables =
                $.ajax({
                    url: baseUrl + "api/DataProfilerAPI/GetProfilerTableNames",
                    data: { client_ID: client_ID, project_ID: project_ID, config_Id: tgtConfigId },
                    async: false,
                    success: function (data, result) {
                        if (!result)
                            alert('Failure to retrieve the Tables.');
                    },
                    error: function (err) {
                        alert(err.statusText);
                    }
                }).responseText;

        var tgtlist = jQuery.parseJSON(tgtTables);

        for (i = 0; i < tgtlist.length; i++) {
            $('#ddlTargettbl').append($('<option>').text(tgtlist[i].Table_Name).val(tgtlist[i].Table_Name));
        }

        var templateNames = $.ajax({
            url: baseUrl + "api/DataReconAPI/GetTemplateNames",
            data: { client_ID: client_ID, project_ID: project_ID },
            async: false,
            success: function (data, result) {
                if (!result)
                    alert('Failure to retrieve the existing template names.');
            },
            error: function (err) {
                alert(err.statusText);
            }
        }).responseText;

        var tempNamelist = jQuery.parseJSON(templateNames);

        for (i = 0; i < tempNamelist.length; i++) {
            $('#ddlTemplateName').append($('<option>').text(tempNamelist[i]).val(tempNamelist[i]));
        }

        $('#ddlSourcetbl').change(function () {
            loadSourceData();
            InitializingGrid();
        });
        $('#ddlTargettbl').change(function () {
            loadTargetData();
            InitializingGrid();
        });

        $("#dialog").dialog({
            autoOpen: false,
            width: 400,
            draggable: false,
            resizable: false,
            modal: true,
            title: "Expression Builder",
            dialogClass: "myDialogClass"
        });
        $("#dialog1").dialog({
            autoOpen: false,
            width: 400,
            draggable: false,
            resizable: false,
            modal: true,
            title: "Transformation applied on:",
            dialogClass: "myDialogClass"
        });
        getColumnIndexByName = function (columnName) {
            var cm = jQuery("#jqgSrcTblClmn, #jqgSrcKeyClmn").jqGrid('getGridParam', 'colModel'), i = 0, l = cm.length;
            for (; i < l; i++) {
                if (cm[i].name === columnName) {
                    return i; // return the index
                }
            }
            return -1;
        };

        preventIfFiveChecked = function (elem, id) {
            var rows = jQuery(id).getDataIDs();
            var iCnt = 0;
            for (a = 0; a < rows.length; a++) {
                row = jQuery(id).getRowData(rows[a]);
                if (row.select == 'Yes')
                    iCnt++;
            }
            if (iCnt > 5) {
                alert('More than 5 key columns are not allowed.');
                if ($(elem).is(':checked')) {
                    $(elem).attr('checked', false);
                }
            }
        };

        loadSourceData();

        loadTargetData();

        InitializingGrid();

        function loadSourceData() {

            var srcTblName = $("#ddlSourcetbl").val();


            var srcColumns =
           $.ajax({
               url: baseUrl + 'api/HXRRuleAPI/GetMetaDataColumnByTableName',
               data: { client_ID: client_ID, project_ID: project_ID, database_IP: DatabaseIP, source_Target: 'SOURCE', database_Name: DatabaseName, Config_Id: srcConfigId, Table_Name: srcTblName },
               async: false,
               dataType: 'json',
               success: function (data, result)
               { if (!result) alert('Failure to retrieve record.'); }
           }).responseText;


            var srcColumnList = JSON.parse(srcColumns);
            var _arrObj = new Array();
            //_arrObj.push("Expression");
            $.each(srcColumnList, function (key, value) {
                _arrObj.push(value.split(':')[0]);
            });
            srcColumnList = _arrObj;

            /* $(" #jqgSrcTblClmn").GridUnload();
             jQuery("#jqgSrcTblClmn").jqGrid({
                 mytype: 'POST',
                 datatype: 'json',
                 url: baseUrl + 'api/DataReconAPI/GetMetaDataColumnByTableName',
                 postData: { client_ID: client_ID, project_ID: project_ID, database_IP: DatabaseIP, source_Target: 'SOURCE', database_Name: DatabaseName, Config_Id: srcConfigId, Table_Name: srcTblName, IsKeyColumn: 0 },
                 height: 135,
                 width: 550,
                 autowidth: false,
                 shrinkToFit: true,
                 colNames: ['Seq No', 'Column Name', 'Expression', 'Data Type'],
                 colModel: [
                 { name: 'seqno', index: 'srccolumn', width: 13, align: 'left', editable: false },
                 {
                     name: 'clmname', index: 'clmname', width: 50, align: 'left', editable: true,
                     edittype: "text",
                     editoptions: {
                         dataInit: function (elem) {
                             var rowid = $(elem).closest('tr.jqgrow').attr('id');
                             $(elem).autocomplete({
                                 minLength: 0,
                                 source: srcColumnList,
                                 select: function (event, ui) {

                                     if (ui.item.label == "Expression") {
                                         ShowExpressionBuilder(rowid, "jqgSrcTblClmn");
                                     } else {
                                         $(this).val(ui.item.label);
                                     }
                                 },
                                 foucs: function (event, ui) {
                                     event.preventDefault();
                                 },
                                 close: function (event, ui) {

                                     $("#jqgSrcTblClmn").saveRow(rowid);

                                 }
                             }).autocomplete("instance")._renderItem = function (ul, item) {
                                 return $("<li>")
                                   .append(item.label == "Expression" ? "<span class='exp-autocomplete'>" + item.label + "</span>" : item.label)
                                   .appendTo(ul);
                             };;

                             $(elem).bind('focus', function () { $(this).autocomplete("search", ""); })
                         }
                     }
                 },
                 { name: 'Expression', index: 'Expression', width: 35, align: 'left', editable: false, hidden: true },
                 { name: 'datatype', index: 'datatype', width: 25, align: 'left', editable: false },
                 ],
                 pager: '#pgSrcTblClmn',
                 rowNum: 1000,
                 multiselect: true,
                 loadonce: true,
                 gridview: true,
                 pginput: false,
                 pgbuttons: false,
                 viewrecords: true,
                 caption: 'Source Columns',
                 onCellSelect: function (rowid, iCol, cellcontent) {

                     if (iCol == "2") {
                         jQuery('#jqgSrcTblClmn').jqGrid('editRow', rowid, true);

                     } else if (iCol == "3") {
                         ShowExpressionBuilder(rowid, "jqgSrcTblClmn");
                     }
                 },
                 onSelectRow: function (rowId) {


                 },
                 loadComplete: function () {
                     if (srcTemplateData.length > 0) {
                         var rows = $("#jqgSrcTblClmn").jqGrid('getDataIDs');
                         for (var i = 0; i < rows.length; i++) {
                             var rowData = $("#jqgSrcTblClmn").getRowData(rows[i]);
                             for (var j = 0; j < srcTemplateData.length; j++) {
                                 if (srcTemplateData[j]['seqNo'] == rowData.seqno) {
                                     $("#jqgSrcTblClmn").jqGrid('setSelection', rows[i], true);
                                     $("#jqgSrcTblClmn").jqGrid("setCell", i + 1, "clmname", srcTemplateData[j]['colName']);
                                     $("#jqgSrcTblClmn").jqGrid("setCell", i + 1, "Expression", srcTemplateData[j]['Expression']);
                                 }
                             }
                         }
                         //reset the array
                         srcTemplateData = [];
                     }
                 }
             });*/

            $("#jqgSrcKeyClmn").GridUnload();
            jQuery("#jqgSrcKeyClmn").jqGrid({
                mytype: 'POST',
                datatype: 'json',
                url: baseUrl + 'api/DataReconAPI/GetMetaDataColumnByTableName',
                postData: { client_ID: client_ID, project_ID: project_ID, database_IP: DatabaseIP, source_Target: 'SOURCE', database_Name: DatabaseName, Config_Id: srcConfigId, Table_Name: srcTblName, IsKeyColumn: 1 },
                height: 115,
                width: 550,
                autowidth: false,
                shrinkToFit: false,
                colNames: ['Select', 'Seq No', 'Column Name', 'Expression', 'Data Type'],
                colModel: [
                    {
                        name: "select", width: 60, align: "center",
                        formatter: "checkbox", formatoptions: { disabled: false },
                        edittype: "checkbox", editoptions: { value: "Yes:No", defaultValue: "Yes" },
                        stype: "select", searchoptions: { sopt: ["eq", "ne"], value: ":Any;true:Yes;false:No" }
                    },

                { name: 'seqno', index: 'seqno', width: 50, align: 'left', editable: false },
                {
                    name: 'clmname', index: 'clmname', width: 300, align: 'left', editable: true,
                    edittype: "text",
                    editoptions: {
                        dataInit: function (elem) {
                            var rowid = $(elem).closest('tr.jqgrow').attr('id');
                            var elemVal = $(elem).val();

                            $(elem).autocomplete({
                                minLength: 0,
                                source: srcColumnList,
                                select: function (event, ui) {
                                    if (ui.item.label == "Expression") {
                                        ShowExpressionBuilder(rowid, "jqgSrcKeyClmn");
                                    } else {
                                        elemVal = ui.item.label;
                                        $(this).val(ui.item.label);
                                    }

                                },
                                foucs: function (event, ui) {
                                    event.preventDefault();
                                },
                                change: function (event, ui) {
                                    if (ui.item == null || ui.item == undefined) {
                                        $("#jqgSrcKeyClmn").jqGrid("setCell", rowid, "clmname", elemVal);
                                    }
                                },
                                close: function (event, ui) {
                                    if (ui.item == null || ui.item == undefined) {
                                        $("#jqgSrcKeyClmn").jqGrid("setCell", rowid, "clmname", elemVal);
                                    }
                                    $("#jqgSrcKeyClmn").saveRow(rowid);

                                }
                            }).autocomplete("instance")._renderItem = function (ul, item) {
                                return $("<li>")
                                  .append(item.label == "Expression" ? "<span class='exp-autocomplete'>" + item.label + "</span>" : item.label)
                                  .appendTo(ul);
                            };;

                            $(elem).bind('focus', function () { $(this).autocomplete("search", ""); })
                            $(elem).keydown(function (event) {
                                if (event.keyCode == 13 & $(this).val().length != elemVal.length) {
                                    $("#jqgSrcKeyClmn").jqGrid("setCell", rowid, "clmname", elemVal);
                                }
                            });
                        }
                    }
                },
                { name: 'Expression', index: 'Expression', width: 35, align: 'left', editable: false, hidden: true },
                { name: 'datatype', index: 'datatype', width: 120, align: 'left', editable: false }

                ],
                cmTemplate: { sortable: false },
                pager: '#pgSrcKeyClmn',
                rowNum: 1000,
                multiselect: false,
                loadonce: true,
                gridview: true,
                pginput: false,
                pgbuttons: false,
                viewrecords: true,
                onCellSelect: function (rowid, iCol, cellcontent) {

                    if (iCol == "2") {
                        jQuery('#jqgSrcKeyClmn').jqGrid('editRow', rowid, true);
                    } else if (iCol == "3") {
                        ShowExpressionBuilder(rowid, "jqgSrcKeyClmn");
                    }
                },
                caption: 'Source Key Columns',
                onSelectRow: function (rowId) {


                },
                loadComplete: function () {
                    var i = getColumnIndexByName('select');
                    // nth-child need 1-based index so we use (i+1) below
                    $("tbody > tr.jqgrow > td:nth-child(" + (i + 1) + ") > input", this).click(function (e) {
                        if ($(this).is(':Checked')) {
                            preventIfFiveChecked(this, "#jqgSrcKeyClmn");
                        }
                    });
                }

            });
        }

        function loadTargetData() {

            var tgtTblName = $("#ddlTargettbl").val();

            var tgtColumns =
             $.ajax({
                 url: baseUrl + 'api/HXRRuleAPI/GetMetaDataColumnByTableName',
                 data: { client_ID: client_ID, project_ID: project_ID, database_IP: tgtDatabaseIP, source_Target: 'TARGET', database_Name: tgtDatabaseName, Config_Id: tgtConfigId, Table_Name: tgtTblName },
                 async: false,
                 dataType: 'json',
                 success: function (data, result)
                 { if (!result) alert('Failure to retrieve record.'); }
             }).responseText;


            var tgtColumnList = JSON.parse(tgtColumns);
            var _arrObj = new Array();
            //_arrObj.push("Expression");
            $.each(tgtColumnList, function (key, value) {
                _arrObj.push(value.split(':')[0]);
            });
            tgtColumnList = _arrObj;

            /*$("#jqgTgtTblClmn").GridUnload();
            jQuery("#jqgTgtTblClmn").jqGrid({
                mytype: 'GET',
                datatype: 'json',
                url: baseUrl + 'api/DataReconAPI/GetMetaDataColumnByTableName',
                postData: { client_ID: client_ID, project_ID: project_ID, database_IP: tgtDatabaseIP, source_Target: 'TARGET', database_Name: tgtDatabaseName, Config_Id: tgtConfigId, Table_Name: tgtTblName, IsKeyColumn: 0 },
                height: 135,
                width: 550,
                autowidth: false,
                shrinkToFit: true,
                colNames: ['Seq No', 'Column Name', 'Expression', 'Data Type'],
                colModel: [
                { name: 'seqno', index: 'srccolumn', width: 12, align: 'left', editable: false },
                {
                    name: 'clmname', index: 'clmname', width: 50, align: 'left', editable: true,
                    edittype: "text",
                    editoptions: {
                        dataInit: function (elem) {
                            var rowid = $(elem).closest('tr.jqgrow').attr('id');
                            $(elem).autocomplete({
                                minLength: 0,
                                source: tgtColumnList,
                                select: function (event, ui) {

                                    if (ui.item.label == "Expression") {
                                        ShowExpressionBuilder(rowid, "jqgTgtTblClmn");
                                    } else {
                                        $(this).val(ui.item.label);
                                    }
                                },
                                foucs: function (event, ui) {
                                    event.preventDefault();
                                },
                                close: function (event, ui) {
                                    $("#jqgTgtTblClmn").saveRow(rowid);

                                }
                            }).autocomplete("instance")._renderItem = function (ul, item) {
                                return $("<li>")
                                  .append(item.label == "Expression" ? "<span class='exp-autocomplete'>" + item.label + "</span>" : item.label)
                                  .appendTo(ul);
                            };;

                            $(elem).bind('focus', function () { $(this).autocomplete("search", ""); })
                        }
                    }
                },
                { name: 'Expression', index: 'Expression', width: 35, align: 'left', editable: false, hidden: true },
                { name: 'datatype', index: 'datatype', width: 25, align: 'left', editable: false },
                ,
                ],
                pager: '#pgTgtTblClmn',
                rowNum: 1000,
                multiselect: true,
                loadonce: true,
                gridview: true,
                pginput: false,
                pgbuttons: false,
                viewrecords: true,
                caption: 'Target Columns',
                onCellSelect: function (rowid, iCol, cellcontent) {

                    if (iCol == "2") {
                        jQuery('#jqgTgtTblClmn').jqGrid('editRow', rowid, true);
                    } else if (iCol == "3") {
                        ShowExpressionBuilder(rowid, "jqgTgtTblClmn");
                    }

                },
                onSelectRow: function (rowId) {

                },

                loadComplete: function () {
                    if (tgtTemplateData.length > 0) {
                        var rows1 = $("#jqgTgtTblClmn").jqGrid('getDataIDs');
                        for (var m = 0; m < rows1.length; m++) {
                            var rowData1 = $("#jqgTgtTblClmn").getRowData(rows1[m]);
                            for (var n = 0; n < tgtTemplateData.length; n++) {
                                if (tgtTemplateData[n]['seqNo'] == rowData1.seqno) {
                                    $("#jqgTgtTblClmn").jqGrid('setSelection', rows1[m], true);
                                    $("#jqgTgtTblClmn").jqGrid("setCell", m + 1, "clmname", tgtTemplateData[n]['colName']);
                                    $("#jqgTgtTblClmn").jqGrid("setCell", m + 1, "Expression", tgtTemplateData[n]['Expression']);
                                }
                            }
                        }
                        //reset the array
                        tgtTemplateData = [];
                    }
                }
            });*/

            $("#jqgTgtKeyClmn").GridUnload();
            jQuery("#jqgTgtKeyClmn").jqGrid({
                mytype: 'POST',
                datatype: 'json',
                url: baseUrl + 'api/DataReconAPI/GetMetaDataColumnByTableName',
                postData: { client_ID: client_ID, project_ID: project_ID, database_IP: tgtDatabaseIP, source_Target: 'TARGET', database_Name: tgtDatabaseName, Config_Id: tgtConfigId, Table_Name: tgtTblName, IsKeyColumn: 1 },
                height: 115,
                width: 550,
                autowidth: false,
                shrinkToFit: false,
                colNames: ['Select', 'Seq No', 'Column Name', 'Expression', 'Data Type'],
                colModel: [
                    {
                        name: "select", width: 60, align: "center",
                        formatter: "checkbox", formatoptions: { disabled: false },
                        edittype: "checkbox", editoptions: { value: "Yes:No", defaultValue: "Yes" },
                        stype: "select"
                    },
                { name: 'seqno', index: 'seqno', width: 50, align: 'left', editable: false },
                {
                    name: 'clmname', index: 'clmname', width: 300, align: 'left', editable: true,
                    edittype: "text",
                    editoptions: {
                        dataInit: function (elem) {
                            var rowid = $(elem).closest('tr.jqgrow').attr('id');
                            var elemVal = $(elem).val();
                            $(elem).autocomplete({
                                minLength: 0,
                                source: tgtColumnList,
                                select: function (event, ui) {
                                    if (ui.item.label == "Expression") {
                                        ShowExpressionBuilder(rowid, "jqgTgtKeyClmn");
                                    } else {
                                        elemVal = ui.item.label;
                                        $(this).val(ui.item.label);
                                    }
                                },
                                foucs: function (event, ui) {
                                    event.preventDefault();
                                },
                                change: function (event, ui) {
                                    if (ui.item == null || ui.item == undefined) {
                                        $("#jqgTgtKeyClmn").jqGrid("setCell", rowid, "clmname", elemVal);
                                    }
                                },
                                close: function (event, ui) {
                                    if (ui.item == null || ui.item == undefined) {
                                        $("#jqgTgtKeyClmn").jqGrid("setCell", rowid, "clmname", elemVal);
                                    }
                                    $("#jqgTgtKeyClmn").saveRow(rowid);

                                }
                            }).autocomplete("instance")._renderItem = function (ul, item) {
                                return $("<li>")
                                  .append(item.label == "Expression" ? "<span class='exp-autocomplete'>" + item.label + "</span>" : item.label)
                                  .appendTo(ul);
                            };;

                            $(elem).bind('focus', function () { $(this).autocomplete("search", ""); })
                            $(elem).keydown(function (event) {
                                if (event.keyCode == 13 & $(this).val().length != elemVal.length) {
                                    $("#jqgTgtKeyClmn").jqGrid("setCell", rowid, "clmname", elemVal);
                                }
                            });
                        }
                    }
                },
                { name: 'Expression', index: 'Expression', width: 35, align: 'left', editable: false, hidden: true },
                { name: 'datatype', index: 'datatype', width: 120, align: 'left', editable: false }

                ],
                cmTemplate: { sortable: false },
                pager: '#pgTgtKeyClmn',
                rowNum: 1000,
                multiselect: false,
                loadonce: true,
                gridview: true,
                pginput: false,
                pgbuttons: false,
                viewrecords: true,
                caption: 'Target Key Columns',
                onCellSelect: function (rowid, iCol, cellcontent) {

                    if (iCol == "2") {
                        jQuery('#jqgTgtKeyClmn').jqGrid('editRow', rowid, true);
                    } else if (iCol == "3") {
                        ShowExpressionBuilder(rowid, "jqgTgtKeyClmn");
                    }

                },
                onSelectRow: function (rowId) {

                },
                loadComplete: function () {
                    var i = getColumnIndexByName('select');

                    // nth-child need 1-based index so we use (i+1) below
                    $("tbody > tr.jqgrow > td:nth-child(" + (i + 1) + ") > input", this).click(function (e) {
                        if ($(this).is(':Checked')) {
                            preventIfFiveChecked(this, '#jqgTgtKeyClmn');
                        }
                    });

                }

            });

        }

        function InitializingGrid() {

            $("#SourceTargettableGrid").GridUnload();

            var ServiceUrl = baseUrl + "api/DataReconAPI/GetTableDataDetail";
            $grid = jQuery("#SourceTargettableGrid").jqGrid({
                mytype: 'GET',
                datatype: 'json',
                url: ServiceUrl,
                height: 180,
                width: 1200,
                autowidth: false,
                shrinkToFit: true,
                rowNum: 1100,
                rowList: [10, 20, 30],
                postData: { client_ID: $("#hdnClientId").val(), project_ID: $("#hdnProjectId").val(), Table_Name: $("#ddlSourcetbl").val(), connectionid: $("#hdnConfigId").val() },
                colNames: ['Seq No', 'Column Name', 'Data Type', 'Expression', '', 'Column Name', 'Data Type', 'Expression'],
                colModel: [
               { name: 'Field_Seq_No', index: 'Field_Seq_No', type: 'long', width: 4, sorttype: 'long', search: false, editable: false },
               { name: 'Column_Name', index: 'Column_Name', width: 20, search: false, editable: false },
               { name: 'Data_Type', index: 'Data_Type', width: 20, search: false },
               { name: 'Expression', index: 'Expression', width: 20, align: 'left', hidden: false },
               { name: 'sugBtn', index: 'sugBtn', search: false, sortable: false, align: 'Left', width: 4, formatter: FormatterActionColumn },
               {
                   name: 'Target_Column_Name', index: 'Target_Column_Name', width: 20, search: false, editable: true,
                   edittype: 'text',
                   editoptions: {
                       value: "Ignore:Ignore",
                       dataInit: function (elem) {  //Adding autocomplete widget for column

                           var rowid = $(elem).closest('tr.jqgrow').attr('id');
                           var selectedTableName = $("#ddlTargettbl").val();


                           var jsonTargetData = $("#divHiddenDataTargetColumn").data(selectedTableName);
                           if (jQuery.type(jsonTargetData) === "undefined") {

                               $.ajax({
                                   type: "GET",
                                   url: baseUrl + "api/DataReconAPI/GetTableColumnDetailForAutoComplete",
                                   data: { client_ID: $("#hdnClientId").val(), project_ID: $("#hdnProjectId").val(), Table_Name: selectedTableName, connectionid: $("#hdnTgtConfigId").val() },
                                   dataType: 'json',
                                   success: function (data) {


                                       $("#divHiddenDataTargetColumn").data(selectedTableName, data);

                                       data.unshift({ label: 'Ignore', value: 'Ignore' });

                                       $(elem).autocomplete({
                                           minLength: 0,
                                           source: data,
                                           select: function (event, ui) {
                                               event.preventDefault();
                                               $(this).val(ui.item.label);
                                               $('#hdnColumnType').val(ui.item.value);
                                           },
                                           focus: function (event, ui) {
                                               event.preventDefault();
                                           },
                                           change: function (event, ui) {
                                               //alert(ui.item.value);
                                           },
                                           close: function (event, ui) {

                                               $("#SourceTargettableGrid").jqGrid('setCell', rowid, 'Target_Data_Type', $('#hdnColumnType').val() == 'Ignore' ? ' ' : $('#hdnColumnType').val());
                                           }
                                       }).focus(function () {
                                           $(this).autocomplete("search", "");
                                       });

                                   }
                               });
                           } else {


                               $(elem).autocomplete({
                                   minLength: 0,
                                   source: jsonTargetData,
                                   select: function (event, ui) {
                                       event.preventDefault();
                                       $(this).val(ui.item.label);
                                       $('#hdnColumnType').val(ui.item.value);
                                   },
                                   focus: function (event, ui) {
                                       event.preventDefault();
                                   },
                                   change: function (event, ui) {
                                       //alert(ui.item.value);
                                   },
                                   close: function (event, ui) {

                                       $("#SourceTargettableGrid").jqGrid('setCell', rowid, 'Target_Data_Type', $('#hdnColumnType').val() == 'Ignore' ? ' ' : $('#hdnColumnType').val());
                                   }
                               }).focus(function () {
                                   $(this).autocomplete("search", "");
                               });
                           }
                           //$(elem).bind('focus', function () { $(this).autocomplete("search", ""); })
                       }
                   }
               },
                { name: 'Target_Data_Type', index: 'Target_Data_Type', width: 20, search: false },
                { name: 'Target_Exp', index: 'Target_Exp', width: 20, align: 'left', hidden: false },

                ],
                multiselect: false,
                pager: '#pager_datatable',
                viewrecords: true,
                loadonce: true,
                gridview: true,
                reloadAfterSubmit: true,
                showButtonPanel: true,
                loadui: "disable",
                ignoreCase: true,
                onSelectRow: function (rowId, iRow, iCol, e) {

                    //var SourceFieldName = '';
                    //var TargetFieldName = '';

                    //var SourceFieldName = $('#SourceTargettableGrid').jqGrid('getCell', rowId, 'Column_Name');
                    //if (SourceFieldName.indexOf("select") != -1) {
                    //    SourceFieldName = $('#' + rowId + '_Column_Name option:selected').text();
                    //}

                    //var TargetFieldName = $('#SourceTargettableGrid').jqGrid('getCell', rowId, 'Target_Column_Name');
                    //if (TargetFieldName.indexOf("select") != -1) {
                    //    TargetFieldName = $('#' + rowId + '_Target_Column_Name option:selected').text();
                    //}
                    //else if (TargetFieldName.indexOf("input") != -1) {
                    //    TargetFieldName = $('#' + rowId + '_Target_Column_Name').val();
                    //}

                    //var grid = $('#SourceTargettableGrid');

                    ////jQuery("#SourceTargettableGrid").jqGrid('editRow', rowId, true);

                    //if (rowId && rowId !== lastSel) {
                    //    if (lastSel != -1) {
                    //        grid.saveRow(lastSel);
                    //    }
                    //    lastSel = rowId;
                    //}

                    //if (TargetFieldName == '') // try to mapping the source column to Target column
                    //{
                    //    TargetFieldName = SourceFieldName;
                    //}

                    //var TargetTableName = $("#ddlTargettbl").val();
                    //var selRowID = $('#SourceTargettableGrid').jqGrid('getGridParam', 'selrow');

                    //InitializingTargetColumnName(TargetTableName, selRowID, TargetFieldName, true);
                },
                onCellSelect: function (rowId, iCol, cellcontent) {

                    //if (iCol == "3" || iCol == "6") {
                    if (iCol == "3" || iCol == "7") {
                        ShowExpressionBuilder(rowId, "SourceTargettableGrid", iCol);
                    }
                    else if (iCol == "4") {
                        ShowExpressionBuilder(rowId, "SourceTargettableGrid", iCol);
                    }
                    else {
                        jQuery('#SourceTargettableGrid').jqGrid('editRow', rowId, true);
                        var SourceFieldName = '';
                        var TargetFieldName = '';

                        var SourceFieldName = $('#SourceTargettableGrid').jqGrid('getCell', rowId, 'Column_Name');
                        if (SourceFieldName.indexOf("select") != -1) {
                            SourceFieldName = $('#' + rowId + '_Column_Name option:selected').text();
                        }

                        var TargetFieldName = $('#SourceTargettableGrid').jqGrid('getCell', rowId, 'Target_Column_Name');
                        if (TargetFieldName.indexOf("select") != -1) {
                            TargetFieldName = $('#' + rowId + '_Target_Column_Name option:selected').text();
                        }
                        else if (TargetFieldName.indexOf("input") != -1) {
                            TargetFieldName = $('#' + rowId + '_Target_Column_Name').val();
                        }

                        var grid = $('#SourceTargettableGrid');

                        //jQuery("#SourceTargettableGrid").jqGrid('editRow', rowId, true);

                        if (rowId && rowId !== lastSel) {
                            if (lastSel != -1) {
                                grid.saveRow(lastSel);
                            }
                            lastSel = rowId;
                        }

                        if (TargetFieldName == '') // try to mapping the source column to Target column
                        {
                            TargetFieldName = SourceFieldName;
                        }

                        var TargetTableName = $("#ddlTargettbl").val();
                        var selRowID = $('#SourceTargettableGrid').jqGrid('getGridParam', 'selrow');

                        InitializingTargetColumnName(TargetTableName, rowId, TargetFieldName, true);

                    }
                },
                gridComplete: function () {
                    $(this).prop('p').loadui = 'enable';
                    $('.modal').hide();
                },
                loadComplete: function () {

                    if (tgtTemplateData.length > 0) {

                        var rows1 = $("#SourceTargettableGrid").jqGrid('getDataIDs');
                        for (var m = 0; m < rows1.length; m++) {
                            var rowData1 = $("#SourceTargettableGrid").getRowData(rows1[m]);

                            for (var p = 0; p < srcTemplateData.length; p++) {
                                if (srcTemplateData[p]['seqNo'] == rowData1.Field_Seq_No) {
                                    $("#SourceTargettableGrid").jqGrid("setCell", m + 1, "Expression", srcTemplateData[p]['exp']);
                                }
                            }

                            for (var n = 0; n < tgtTemplateData.length; n++) {
                                if (tgtTemplateData[n]['seqNo'] == rowData1.Field_Seq_No) {
                                    $("#SourceTargettableGrid").jqGrid("setCell", m + 1, "Target_Column_Name", tgtTemplateData[n]['colName']);
                                    $("#SourceTargettableGrid").jqGrid("setCell", m + 1, "Target_Exp", tgtTemplateData[n]['exp']);

                                    InitializingTargetColumnName($("#ddlTargettbl").val(), m + 1, tgtTemplateData[n]['colName'], true)
                                }
                            }
                        }
                        //reset the array
                        tgtTemplateData = [];
                        srcTemplateData = [];
                    }
                }
            });

            jQuery("#SourceTargettableGrid").jqGrid('setGroupHeaders', {
                useColSpanStyle: true,
                groupHeaders: [
                  { startColumnName: 'Column_Name', numberOfColumns: 4, titleText: 'Source' },
                  { startColumnName: 'Target_Column_Name', numberOfColumns: 3, titleText: 'Target' }
                ]
            });

            //jQuery("#SourceTargettableGrid").jqGrid("filterToolbar", { stringResult: true, searchOnEnter: false, defaultSearch: "cn", clearSearch: true, groupOp: "OR" });

            var sourceBgColor = "#24b3b5";
            var targetBgColor = "#1C94C6";
            var GroupHeaderHeight = "40px";
            var RowColumntargetHeight = "28px";

            $('th[class="ui-state-default ui-th-column-header ui-th-ltr"]').each(function () {

                if ($(this).text() == "Source") {
                    this.style.color = "white";
                    this.style.background = sourceBgColor;
                    this.style.height = GroupHeaderHeight;
                    this.style.fontSize = "13px";
                    this.style.textAlign = "center";


                } else if ($(this).text() == "Target") {

                    this.style.color = "white";
                    this.style.background = targetBgColor;
                    this.style.height = GroupHeaderHeight;
                    this.style.fontSize = "13px";
                    this.style.textAlign = "center";
                }
            });

            $('th[class="ui-state-default ui-th-column ui-th-ltr"]').each(function () {



                if ($(this).attr("ID") == "SourceTargettableGrid_Column_Name") {
                    this.style.color = "white";
                    this.style.background = sourceBgColor;
                    this.style.height = RowColumntargetHeight;
                }


                if ($(this).attr("ID") == "SourceTargettableGrid_Data_Type") {
                    this.style.color = "white";
                    this.style.background = sourceBgColor;
                    this.style.height = RowColumntargetHeight;
                }

                if ($(this).attr("ID") == "SourceTargettableGrid_Expression") {
                    this.style.color = "white";
                    this.style.background = sourceBgColor;
                    this.style.height = RowColumntargetHeight;
                }
                if ($(this).attr("ID") == "SourceTargettableGrid_sugBtn") {
                    this.style.color = "white";
                    this.style.background = sourceBgColor;
                    this.style.height = RowColumntargetHeight;
                }

                if ($(this).attr("ID") == "SourceTargettableGrid_Target_Column_Name") {
                    this.style.color = "white";
                    this.style.background = targetBgColor;
                    this.style.height = RowColumntargetHeight;
                }


                if ($(this).attr("ID") == "SourceTargettableGrid_Target_Data_Type") {
                    this.style.color = "white";
                    this.style.background = targetBgColor;
                    this.style.height = RowColumntargetHeight;
                }

                if ($(this).attr("ID") == "SourceTargettableGrid_Target_Exp") {
                    this.style.color = "white";
                    this.style.background = targetBgColor;
                    this.style.height = RowColumntargetHeight;
                }
            });

        }
        function FormatterActionColumn(cellvalue, options, rowObject) {
            //var _tablename = "0";//$("#hdnTableName").val();
            //var _rowId = options.rowId;
            //var _ID = rowObject[0];
            //var _Column_Name = rowObject[2];

            //if (typeof _ID === "undefined") {
            //    _ID = rowObject.ID;
            //    _Column_Name = rowObject.Column_Name;
            //}
            return '<div style="padding:4px;"><img src="../images/suggestion.png" width="25px" height="25px"></div>';
        }
        function InitializingTargetColumnName(SelectedValue, selRowID, DefaultValue, automap) {

            //Data get loaded from the hidden field if already get from server for a table.<Avoiding Multiple call for same table>
            var jsonTargetData = $("#divHiddenDataTargetColumn").data(SelectedValue);
            if (jQuery.type(jsonTargetData) === "undefined") {

                $.ajax({
                    type: "GET",
                    url: baseUrl + "api/DataReconAPI/GetTableColumnDetailForAutoComplete",
                    data: { client_ID: $("#hdnClientId").val(), project_ID: $("#hdnProjectId").val(), Table_Name: SelectedValue, connectionid: $("#hdnTgtConfigId").val() },
                    dataType: 'json',
                    success: function (data) {
                        data.unshift({ label: 'Ignore', value: 'Ignore' }); //Adding Ignore option in clollection on very first

                        $('#' + selRowID + '_Target_Column_Name').autocomplete(); //Initializing autocomplete for input control
                        $('#' + selRowID + '_Target_Column_Name').autocomplete('option', 'source', data); //Loading value on table change
                        $("#divHiddenDataTargetColumn").data(SelectedValue, data);
                        ProcessTargetDataColumn(data, selRowID, DefaultValue, automap);
                    }
                });

            } else {
                ProcessTargetDataColumn(jsonTargetData, selRowID, DefaultValue, automap);
            }
        }

        function ProcessTargetDataColumn(data, selRowID, DefaultValue, automap) {

            $('#' + selRowID + '_Target_Column_Name').autocomplete();
            $('#' + selRowID + '_Target_Column_Name').autocomplete('option', 'source', data);

            ///Assigning Data type value on column change.
            if (DefaultValue != '' && DefaultValue != 'Ignore') {

                var obj = data.filter(function (data) { return data.label.toLowerCase() == DefaultValue.toLowerCase() });

                if (obj != null & obj != "" & obj.length > 0) {
                    $('#' + selRowID + '_Target_Column_Name').val(DefaultValue);
                    if (automap == true) {
                        var dataType = obj[0].value == 'Ignore' ? '' : obj[0].value;
                        $("#SourceTargettableGrid").jqGrid('setCell', selRowID, 'Target_Data_Type', dataType);
                    }
                }
                else
                    $('#' + selRowID + '_Target_Column_Name').val('Ignore');

            }
            else {
                $('#' + selRowID + '_Target_Column_Name').val('Ignore');
                $("#SourceTargettableGrid").jqGrid('setCell', selRowID, 'Target_Data_Type', ' ');
            }
        }

        $("#divdbl").dblclick(function () {

            $("#txtTemplateName").val('');
            if (!$('#ddlTemplateName').is(':visible')) {
                loadTemplateDetails();
                $('#ddlTemplateName').show();
                $("#txtTemplateName").hide();
            }
            else {
                $('#ddlTemplateName').hide();
                $("#txtTemplateName").show();
                $('#btnCompare').prop('disabled', true);
            }
        });

        $("#ddlTemplateName").change(function () {
             loadTemplateDetails();

            $("#jqgridDataCompareStatus").GridUnload();
            $("#jqgrdDtlStus").GridUnload();
            $("#btnViewReport").prop("disabled", true);
        });

        $('#btnValidation').click(function () {

            var configId = $("#hdnClmIndex").val() == 3 ? srcConfigId : tgtConfigId;
            var tableName = $("#hdnClmIndex").val() == 3 ? $("#ddlSourcetbl").val() : $("#ddlTargettbl").val();

            $.ajax({
                url: baseUrl + "api/DataReconAPI/ValidateExpression",
                data: { client_ID: client_ID, project_ID: project_ID, Config_Id: configId, Table_Name: tableName, Expression: $('#txtExpression').val() },
                async: false,
                success: function (data) {
                    if (data.IsSuccess)
                        $('#btnSaveExp').prop('disabled', false);
                    else {
                        $('#btnSaveExp').prop('disabled', true);
                        alert(data.Message);
                    }
                },
                error: function (err) {
                    alert(err.statusText);
                }
            });
        });

        $('#btnSaveExp').click(function () {
            var expclmname = $("#hdnClmIndex").val() == 3 ? 'Expression' : 'Target_Exp';
            var rowId = $("#hdnRowID").val();

            $("#SourceTargettableGrid").jqGrid("setCell", rowId, expclmname, $("#txtExpression").val());
            $("#dialog").dialog("close");
        });

        $('#btnClear').click(function () {
            var expclmname = $("#hdnClmIndex").val() == 3 ? 'Expression' : 'Target_Exp';
            var rowId = $("#hdnRowID").val();
            var val = ' ';
            $("#SourceTargettableGrid").jqGrid("setCell", rowId, expclmname, undefined);

            $("#dialog").dialog("close");
        });

        $("#btnCancel").click(function () {
            $("#dialog").dialog("close");
        });

        $('#btnSave').click(function () {

            var templateName = $('#ddlTemplateName').is(':visible') ? $('#ddlTemplateName option:selected').val() : $('#txtTemplateName').val();

            if (templateName == '' && !$('#ddlTemplateName').is(':visible')) {
                alert("Enter Template Name");
                return;
            }

            var srcKeyColumn = [];
            var tgtKeyColumn = [];
            var SourceDataEntity = [];
            var TargetDataEntity = [];

            var rows = jQuery("#jqgSrcKeyClmn").getDataIDs();
            for (a = 0; a < rows.length; a++) {
                row = jQuery("#jqgSrcKeyClmn").getRowData(rows[a]);
                if (row.select == 'Yes') {
                    var Expression = row.Expression;
                    srcKeyColumn.push({ "ColumnName": row.clmname, "SeqNo": 0 });
                    SourceDataEntity.push({ "TableName": $("#ddlSourcetbl").val(), "ColumnName": row.clmname, "SeqNo": 0, "DataType": row.datatype, "KeyColumn": "Y", Expression: row.Expression });
                }
            }

            var rows = jQuery("#jqgTgtKeyClmn").getDataIDs();
            for (a = 0; a < rows.length; a++) {
                row = jQuery("#jqgTgtKeyClmn").getRowData(rows[a]);
                if (row.select == 'Yes') {
                    tgtKeyColumn.push({ "ColumnName": row.clmname, "SeqNo": 0 });
                    TargetDataEntity.push({ TableName: $("#ddlTargettbl").val(), ColumnName: row.clmname, SeqNo: 0, DataType: row.datatype, KeyColumn: "Y", Expression: row.Expression });
                }

            }

            var rows = jQuery("#SourceTargettableGrid").getDataIDs();
            for (a = 0; a < rows.length; a++) {
                row = jQuery("#SourceTargettableGrid").getRowData(rows[a]);

                var TargetFieldName = row.Target_Column_Name;
                if (row.Target_Column_Name.indexOf("input") != -1) {
                    TargetFieldName = jQuery('#' + (a + 1) + '_Target_Column_Name').val();
                }
                if (TargetFieldName != '' && TargetFieldName.toLowerCase() != 'ignore') {

                    var seqno = row.Field_Seq_No;
                    if (row.Field_Seq_No.indexOf("input") != -1) {
                        seqno = jQuery('#' + (a + 1) + '_Field_Seq_No').val();
                    }

                    TargetDataEntity.push({ TableName: $("#ddlTargettbl").val(), ColumnName: TargetFieldName, SeqNo: seqno, DataType: row.Target_Data_Type, KeyColumn: "N", Expression: row.Target_Exp });
                    SourceDataEntity.push({ TableName: $("#ddlSourcetbl").val(), ColumnName: row.Column_Name, SeqNo: seqno, DataType: row.Data_Type, KeyColumn: "N", Expression: row.Expression });
                }
            }



            /*var sourceRow = jQuery("#jqgSrcTblClmn").jqGrid('getGridParam', 'selarrrow');
            var targetRow = jQuery("#jqgTgtTblClmn").jqGrid('getGridParam', 'selarrrow');

            for (var i = 0, il = sourceRow.length; i < il; i++) {

                var clmname = jQuery("#jqgSrcTblClmn").jqGrid('getCell', sourceRow[i], 'clmname');
                var seqno = jQuery("#jqgSrcTblClmn").jqGrid('getCell', sourceRow[i], 'seqno');
                var type = jQuery("#jqgSrcTblClmn").jqGrid('getCell', sourceRow[i], 'datatype');
                var Expression = jQuery("#jqgSrcTblClmn").jqGrid('getCell', sourceRow[i], 'Expression');

                SourceDataEntity.push({ "TableName": $("#ddlSourcetbl").val(), "ColumnName": clmname, "SeqNo": seqno, "DataType": type, "KeyColumn": "N", Expression: Expression })
            }

            for (var i = 0, il = targetRow.length; i < il; i++) {


                var changedClmn = jQuery("#" + targetRow[i] + "_clmname option:selected").text();
                var clmname = changedClmn != '' ? changedClmn : jQuery("#jqgTgtTblClmn").jqGrid('getCell', targetRow[i], 'clmname');
                var seqno = jQuery("#jqgTgtTblClmn").jqGrid('getCell', targetRow[i], 'seqno');
                var type = jQuery("#jqgTgtTblClmn").jqGrid('getCell', targetRow[i], 'datatype');
                var Expression = jQuery("#jqgTgtTblClmn").jqGrid('getCell', sourceRow[i], 'Expression');

                TargetDataEntity.push({ TableName: $("#ddlTargettbl").val(), ColumnName: clmname, SeqNo: seqno, DataType: type, KeyColumn: "N", Expression: Expression })
            }
            */

            $.ajax({
                type: "POST",
                dataType: "json",
                contentType: "application/json",
                url: baseUrl + "api/DataReconAPI/SaveData",
                data: JSON.stringify({
                    ClientID: client_ID,
                    ProjectID: project_ID,
                    TemplateName: templateName,
                    SourceKeyColumn: srcKeyColumn,
                    TargetKeyColumn: tgtKeyColumn,
                    SourceData: SourceDataEntity,
                    TargetData: TargetDataEntity
                }),
                success: function (data) {
                    if (data == '0') {
                        alert('Data saved successfully');
                        $('#btnCompare').prop('disabled', false);
                    }
                    else {
                        alert(data);
                        $('#btnCompare').prop('disabled', true);
                    }
                },
                error: function (err) {
                    alert(err.statusText);
                    $('#btnCompare').prop('disabled', true);
                },
                beforeSend: function () {
                    $(".modal").show();
                },
                complete: function () {
                    $(".modal").hide();
                }
            });
        })

        $('#btnCompare').click(function () {

            var templateName = $('#ddlTemplateName').is(':visible') ? $('#ddlTemplateName option:selected').val() : $('#txtTemplateName').val();
            if (templateName == '' && !$('#ddlTemplateName').is(':visible')) {
                alert("Enter Template Name");
                return;
            }

            $.ajax({
                type: "GET",
                dataType: "json",
                url: baseUrl + "api/DataReconAPI/CompareData",
                data: { client_id: client_ID, project_id: project_ID, template_name: templateName },
                success: function (data) {
                    alert(data.Message);
                    ShowDataCompareStatusGrid(data.Data);
                    $("#btnViewReport").prop("disabled", false);
                },
                error: function (err) {
                    alert(err.statusText);
                    $("#btnViewReport").prop("disabled", true);
                },
                beforeSend: function () {
                    $(".modal").show();
                },
                complete: function () {
                    $(".modal").hide();
                }
            });
        });

        function loadTemplateDetails() {

            var templateDetails = $.ajax({
                url: baseUrl + "api/DataReconAPI/GetTemplateDetails",
                data: { client_ID: client_ID, project_ID: project_ID, template_name: $("#ddlTemplateName").val() },
                async: false,
                success: function (data, result) {                    
                    $('#btnCompare').prop('disabled', false);
                    if (!result) {
                        alert('Failure to retrieve the existing template details.');
                        $('#btnCompare').prop('disabled', true);
                    }
                },
                error: function (err) {
                    alert(err.statusText);
                }
            }).responseText;

            var templateData = jQuery.parseJSON(templateDetails);

            if (templateData.length > 0) {

                $('#ddlSourcetbl').val(templateData[0].Source_Table_Name).change();
                $('#ddlTargettbl').val(templateData[0].Target_Table_Name).change();

                for (i = 0; i < templateData.length; i++) {
                    srcTemplateData.push({ seqNo: templateData[i].Source_Col_Seq_No, colName: templateData[i].Source_Column_Name, exp: templateData[i].Source_Expression })
                    tgtTemplateData.push({ seqNo: templateData[i].Target_Col_Seq_No, colName: templateData[i].Target_Column_Name, exp: templateData[i].Target_Expression })
                }
            }
        }

        function ShowExpressionBuilder(RowID, CurrentGridID, colIndex) {
            $("#hdnCurrentGridID").val(CurrentGridID);
            $("#hdnRowID").val(RowID);
            $("#hdnClmIndex").val(colIndex);

            var clmname = 'clmname';
            var expclmname = 'Expression';

            if (colIndex != undefined) {
                if (colIndex == 3) {
                    clmname = 'Column_Name';
                }
                if (colIndex == 7) {
                    clmname = 'Target_Column_Name';
                    expclmname = 'Target_Exp';
                }
                if (colIndex == 4) {
                    clmname = 'Target_Column_Name';
                    expclmname = 'Target_Exp';
                }
            }

            var celValue = $("#" + CurrentGridID).jqGrid('getCell', RowID, expclmname);

            if (celValue == "") {
                celValue = $("#" + CurrentGridID).jqGrid('getCell', RowID, clmname);
                if (celValue.indexOf("input") != -1) {
                    celValue = $('#' + RowID + '_' + clmname).val();
                }
            }

            if (colIndex == 4) {
                //$("#txtExpression").val(celValue);
                $("#dialog1").dialog("open");
                //$('#btnSaveExp').prop('disabled', true);
            }
            else {
                $("#txtExpression").val(celValue);
                $("#dialog").dialog("open");
                $('#btnSaveExp').prop('disabled', true);
            }
        }

        function ShowDataCompareStatusGrid(mydata) {

            var mTemplateName = $('#ddlTemplateName').is(':visible') ? $('#ddlTemplateName option:selected').val() : $('#txtTemplateName').val();
            $("#jqgridDataCompareStatus").GridUnload();

            jQuery("#jqgridDataCompareStatus").jqGrid({
                datatype: 'local',
                data: mydata,
                height: 70,
                width: 1200,
                autowidth: false,
                shrinkToFit: true,
                colNames: ['Source Table', 'Source Column', 'Target Table', 'Target Column', 'Error Count', 'Status', 'Run ID'],
                colModel: [
                { name: 'Source_Table_Name', index: 'Source_Table_Name', width: 30, align: 'left', editable: false },
                { name: 'Source_Column_Name', index: 'Source_Column_Name', width: 30, align: 'left', editable: false },
                { name: 'Target_Table_Name', index: 'Target_Table_Name', width: 30, align: 'left', editable: false },
                { name: 'Target_Column_Name', index: 'Target_Column_Name', width: 30, align: 'left', editable: false },
                {
                    name: 'Error_Count', index: 'Error_Count', width: 10, align: 'center',
                    formatter: function (cellvalue, options, rowObject) {
                        if (cellvalue != 0)
                            return "<a style='height:22px;width:20px;text-decoration: underline;cursor: pointer;'  onclick=\"LoadDetailStatus('" + rowObject.Run_ID + "','" + rowObject.Source_Column_Name + "');\"  >" + cellvalue + "<a/>";
                        else
                            return cellvalue;
                    }
                },
                { name: 'Status', index: 'Status', width: 10, align: 'center', editable: false, formatter: ShowPassOrFailImageFormatter },
                { name: 'RunID', index: 'RunID', width: 10, align: 'center', editable: false, hidden: true },
                ],
                pager: '#pagerDataCompareStatus',
                rowNum: 10,
                rowList: [10, 20, 30],
                loadonce: true,
                gridview: true,
                viewrecords: true,
                caption: 'Status',
                loadComplete: function () {

                }
            });

        }

        function ShowPassOrFailImageFormatter(cellvalue, options, rowObject) {
            var cellValueInt = parseInt(cellvalue);
            if (cellValueInt == 0)
                return "<img src='../images/Pass.png' width='15px' alt='Pass' title='Pass' />";
            else
                return "<img src='../images/failed.png' width='20px'  alt='Fail' title='Fail' />";
        }

    });

    function LoadDetailStatus(runID, clmName) {

        $("#jqgrdDtlStus").GridUnload();

        jQuery("#jqgrdDtlStus").jqGrid({
            mytype: 'GET',
            datatype: 'json',
            url: baseUrl + 'api/DataReconAPI/GetDetailedStatus',
            postData: { RunID: runID, ColumnName: clmName },
            height: 70,
            width: 1200,
            autowidth: false,
            shrinkToFit: true,
            colNames: ['Source Value', 'Target Value', 'Table Key Column 1', 'Table Key Column 2', 'Table Key Column 3', 'Table Key Column 4', 'Table Key Column 5'],
            colModel: [
            { name: 'Src_Val', index: 'Src_Val', width: 30, align: 'left', editable: false },
            { name: 'Tgt_Val', index: 'Tgt_Val', width: 30, align: 'left', editable: false },
            { name: 'tbl_key_clm1', index: 'tbl_key_clm1', width: 30, align: 'left', editable: false },
            { name: 'tbl_key_clm2', index: 'tbl_key_clm2', width: 30, align: 'left', editable: false },
            { name: 'tbl_key_clm3', index: 'tbl_key_clm3', width: 30, align: 'left', editable: false },
            { name: 'tbl_key_clm4', index: 'tbl_key_clm4', width: 30, align: 'left', editable: false },
            { name: 'tbl_key_clm5', index: 'tbl_key_clm5', width: 30, align: 'left', editable: false }
            ],
            pager: '#pgrDtlStus',
            rowNum: 10,
            rowList: [10, 20, 30],
            viewrecords: true,
            gridview: true,
            loadonce: true
        });
    }
</script>
<div class="content-body" style="width:95%;padding-left:20px;">
    <div class="group" style="margin-bottom: 0px;">
        <div class="form-group width-per-100 fL" style="margin-bottom: 0px;">
            <div class="col-half-lft">
                <span id="lblTemplateName" class="control-label">Enter Template Name</span>
                <div id="divdbl">
                    <input id="txtTemplateName" type="text" class="textbox" style="width: 56%;" />
                    <select id="ddlTemplateName" class="dropdown" style="width:60%;"></select>
                </div>
            </div>
        </div>
    </div>
    <div class="group" style="margin-bottom: 0px;">
        <div class="col-half-lft">
            <div class="form-group width-per-100" style="margin-bottom: 0px;">
                <span id="lblSourcetbl" class="control-label">Select source table</span><br />
                <select id="ddlSourcetbl" class="dropdown" style="width: 60%;"></select>
            </div>
        </div>
        <div class="col-half-rt">
            <div class="form-group width-per-100" style="margin-bottom: 0px;">
                <span id="lblTargettbl" class="control-label">Select target table</span><br />
                <select id="ddlTargettbl" class="dropdown" style="width:60%;"></select>
            </div>
        </div>
    </div>
    <div class="group" style="margin-bottom: 0px;">
        <div class="col-half-lft">
            <div class="form-group width-per-100" style="margin-bottom: 0px;">
                <span id="lblSrcKey" class="control-label">Select Source Key Columns</span><br />
                <table id="jqgSrcKeyClmn" class="scroll" align='center'></table>
                <div id="pgSrcKeyClmn" class="scroll"></div>
            </div>
        </div>
        <div class="col-half-rt">
            <div class="form-group width-per-100" style="margin-bottom: 0px;">
                <span id="lblTgtKey" class="control-label">Select Target Key Columns</span><br />
                <table id="jqgTgtKeyClmn" class="scroll" align='center'></table>
                <div id="pgTgtKeyClmn" class="scroll"></div>
            </div>
        </div>
    </div>
    <div class="group" style="display:none">
        <div class="col-half-lft">
            <div class="form-group width-per-100">
                <span id="lblSrcTbl" class="control-label">Select Source Comparison Columns</span><br />
                <table id="jqgSrcTblClmn" class="scroll" align='center'></table>
                <div id="pgSrcTblClmn" class="scroll"></div>
            </div>
        </div>
        <div class="col-half-rt">
            <div class="form-group width-per-100">
                <span id="lblTgtTbl" class="control-label">Select Target Comparison Columns</span><br />
                <table id="jqgTgtTblClmn" class="scroll" align='center'></table>
                <div id="pgTgtTblClmn" class="scroll"></div>
            </div>
        </div>
    </div>
    <div class="group" style="margin-top:10px;">
        <div class="form-group width-per-100">
            <span id="lblTgtTbl" class="control-label">Select Comparison Columns</span><br />
            <table id="SourceTargettableGrid" class="scroll" align='center'></table>
            <div id="pager_datatable" class="scroll"></div>
        </div>
    </div>
    <div class="group">
        <div class="form-group width-per-100">
            <table id="jqgridDataCompareStatus" class="scroll" align='center'></table>
            <div id="pagerDataCompareStatus" class="scroll"></div>
        </div>
    </div>
    <div class="group">
        <div class="form-group width-per-100">
            <table id="jqgrdDtlStus" class="scroll" align='center'></table>
            <div id="pgrDtlStus" class="scroll"></div>
        </div>
    </div>
    <div class="group">
        <div class="form-group width-per-100" style="text-align: center;">
            <input class="form-button" type="button" value="Save" id="btnSave">
            <input class="form-button" type="button" value="Compare Data" id="btnCompare">
            <input class="form-button" type="button" value="View Report" id="btnViewReport" onclick="window.location.href='@Url.Action("Report", "DataRecon")';">
        </div>
    </div>
    <div style="width: 80%; display: none;" id="dialog">
        <span id="lblExpression" class="control-label">Expression</span>
        <input id="txtExpression" type="text" class="textbox" style="width: 90%;font-size:10px;" />
        <br /> <br />
        <input class="form-button" style="font-size:12px" type="button" value="Validate" id="btnValidation">
        <input class="form-button" style="font-size:12px" type="button" value="Save" id="btnSaveExp">
        <input class="form-button" style="font-size:12px" type="button" value="Clear" id="btnClear">
        <input class="form-button" style="font-size:12px" type="button" value="Cancel" id="btnCancel">
        <input type="hidden" value="" id="hdnRowID" />
        <input type="hidden" value="" id="hdnClmIndex" />
        <input type="hidden" value="" id="hdnCurrentGridID" />
    </div>
    <div style="width: 80%; display: none;" id="dialog1">
        @*<span id="lblExpression" class="control-label">Transformation applied on:</span>
            <input id="txtExpression" type="text" class="textbox" style="width: 90%;font-size:10px;" />
            <br /> <br />
            <input class="form-button" style="font-size:12px" type="button" value="Validate" id="btnValidation">
            <input class="form-button" style="font-size:12px" type="button" value="Save" id="btnSaveExp">
            <input class="form-button" style="font-size:12px" type="button" value="Clear" id="btnClear">
            <input class="form-button" style="font-size:12px" type="button" value="Cancel" id="btnCancel">
            <input type="hidden" value="" id="hdnRowID" />
            <input type="hidden" value="" id="hdnClmIndex" />
            <input type="hidden" value="" id="hdnCurrentGridID" />*@
    </div>
</div>
<div class="modal" style="display: none">
    <div class="myLoadingProgress" align="center">
        Processing. Please wait.
        <img alt="" src="~/Images/loader.gif" />
    </div>
</div>

<div id="divHiddenDataTargetColumn"></div>
<input type="hidden" value="" id="hdnColumnType" />
<input type="hidden" value="@ViewData["ClientID"]" id="hdnClientId" />
<input type="hidden" value="@ViewData["ProjectID"]" id="hdnProjectId" />
<input type="hidden" value="@ViewData["DatabaseIP"]" id="hdnDatabaseIP" />
<input type="hidden" value="@ViewData["SourceTarget"]" id="hdnSourceTarget" />
<input type="hidden" value="@ViewData["DatabaseName"]" id="hdnDatabaseName" />
<input type="hidden" value="@ViewData["ConfigId"]" id="hdnConfigId" />
<input type="hidden" value="@ViewData["TgtConfigId"]" id="hdnTgtConfigId" />
<input type="hidden" value="@ViewData["TgtDatabaseIP"]" id="hdnTgtDatabaseIP" />
<input type="hidden" value="@ViewData["TgtDatabaseName"]" id="hdnTgtDatabaseName" />
