<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/20/2015 4:24:32 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="EBII433F1"
  DTS:CreatorName="CORP\30655"
  DTS:DTSID="{0514CDD6-0D0A-445A-BE52-A74834DC3CDC}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="12.0.4100.1"
  DTS:LocaleID="1033"
  DTS:ObjectName="Automaton_Fuzzy_full_check"
  DTS:PackageType="5"
  DTS:VersionBuild="1131"
  DTS:VersionGUID="{A5AA268D-4C70-4A0D-AF16-2F83E30EC398}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DF4FCC29-D635-497B-B5F8-0C56018C5A26}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Client_ID">
      <DTS:VariableValue
        DTS:DataType="8">0001</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DEDC3550-2191-414E-822C-BF142D2D2BDF}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="DeltaLoad">
      <DTS:VariableValue
        DTS:DataType="3">1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{69AB305E-30F3-4105-BD53-CF815EA14D64}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MetaDataConn">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=172.22.50.30;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=pnvuser;Password=Password123;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0568E5A8-516A-4844-9976-85765EF8CF70}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PackageSaveLocation">
      <DTS:VariableValue
        DTS:DataType="8">C:\DMO\GeneratexmlSSIS\New Package\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2AB3EFA1-C6BB-4DF0-97AF-3E4367042B3F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Project_ID">
      <DTS:VariableValue
        DTS:DataType="8">pnv_ins</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E2F8D69B-0D0C-4431-BC5C-C89888A60B92}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Template_Id">
      <DTS:VariableValue
        DTS:DataType="3">9</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5277A155-10AA-4562-944B-AB60D41DB703}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Tool_ID">
      <DTS:VariableValue
        DTS:DataType="3">1</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{DE5ADCD6-F64D-4171-A57B-7774AC9D2758}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{04CADCF2-69AF-49E3-9319-B5CB617333B1}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="SQL_Query">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Script Task.EventHandlers[OnError]"
          DTS:CreationName="OnError"
          DTS:DTSID="{E45F3778-81E8-4988-AD22-665C443B2B67}"
          DTS:EventID="153018280"
          DTS:EventName="OnError"
          DTS:LocaleID="-1">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:Description="The propagate property of the event"
              DTS:DTSID="{3F534316-11C4-41DB-8B50-FE1CBAC2333C}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="System"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_45bc0f92ea8e4517be1762b8201bed3c"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SQL_Query,User::Client_ID,User::DeltaLoad,User::MetaDataConn,User::PackageSaveLocation,User::Project_ID,User::Template_Id,User::Tool_ID">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Settings.get_Default():ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Sett" +
    "ings")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using System.Data.Sql;
using Microsoft.SqlServer.Dts.Tasks;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask;
using ExecuteSQLTask = Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.Connections;

using System.Data.SqlTypes;
using Microsoft.SqlServer.Server;
using System.IO;
using System.Collections.Generic;
namespace ST_e9c9cb3a5ac449d293ddeb5242adec78.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/
        public void Main()
        {
            Package p = new Package();
            Sequence exec_SEQ = (Sequence)p.Executables.Add("STOCK:SEQUENCE");
            exec_SEQ.FailPackageOnFailure = true;
            exec_SEQ.FailParentOnFailure = true;
            exec_SEQ.Name = @"Sequence Container";
            exec_SEQ.Description = @"Sequence Container";
            Application Automaton_app = new Application();
            try
            {
                string SQL_Query = Dts.Variables["SQL_Query"].Value.ToString().Trim();

                int test = SQL_Query.IndexOf("SELECT");
                Executable exec = null;

                if (!SQL_Query.Equals(""))
                {
                    if (test.Equals(-1))
                    {
                        SQL_Query = "Exec " + SQL_Query;
                    }
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = string.Format("Data Source=172.25.125.54;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123#;");
                    exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                    TaskHost th = exec as TaskHost;

                    th.Properties["Name"].SetValue(th, "Execute Procedure");
                    th.Properties["Description"].SetValue(th, "Execute Procedure");
                    th.Properties["Connection"].SetValue(th, "OLEDB Source");
                    //th.Properties["SqlStatementSource"].SetValue(th, "Truncate table dbo.Employee_TGT");
                    th.Properties["SqlStatementSource"].SetValue(th, SQL_Query);
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.164.63", "sa", "Password123");
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.121.105", null, null);

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + SQL_Query + ".dtsx", p, null);
                }
                else
                {
                    SqlCommand Sqlcmd1 = new SqlCommand();
                    SqlConnection SqlConn1 = new SqlConnection();

                    //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";
                    SqlConn1.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                    Sqlcmd1.Connection = SqlConn1;
                    Sqlcmd1.CommandType = CommandType.StoredProcedure;
                    Sqlcmd1.CommandText = "[dbo].[ATMTN_GET_CONNECTION_DETAILS_SP]";
                    SqlParameter param1;
                    string Testdata = Dts.Variables["Client_ID"].Value.ToString().Trim();
                    param1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                    param1.Direction = ParameterDirection.Input;
                    param1.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param1);

                    SqlParameter param2;
                    param2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                    param2.Direction = ParameterDirection.Input;
                    param2.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param2);

                    SqlParameter param3;
                    param3 = new SqlParameter("@Template_Id", Dts.Variables["Template_Id"].Value.ToString().Trim());
                    param3.Direction = ParameterDirection.Input;
                    param3.DbType = DbType.Int32;
                    Sqlcmd1.Parameters.Add(param3);

                    SqlParameter param4;
                    param4 = new SqlParameter("@PKG_Save_Location", Dts.Variables["PackageSaveLocation"].Value.ToString().Trim());
                    param4.Direction = ParameterDirection.Input;
                    param4.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param4);

                    SqlParameter param5;
                    param5 = new SqlParameter("@Status_code", "");
                    param5.Direction = ParameterDirection.Output;
                    param5.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param5);

                    SqlParameter param6;
                    param6 = new SqlParameter("@Message", "");
                    param6.Direction = ParameterDirection.Output;
                    param6.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param6);

                    SqlParameter param7;
                    param7 = new SqlParameter("@Tool_ID", Dts.Variables["Tool_ID"].Value.ToString().Trim());
                    param7.Direction = ParameterDirection.Input;
                    param7.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param7);

                    SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
                    DataSet dsCols1 = new DataSet();
                    if (SqlConn1.State == ConnectionState.Closed)
                        SqlConn1.Open();
                    sqlAdp1.SelectCommand = Sqlcmd1;


                    SqlDataReader rdr1 = null;
                    rdr1 = Sqlcmd1.ExecuteReader();
                    string SRC_Query = null;
                    string SRC_Query1 = null;
                    string LKP_Query = null;
                    string DST_Table = null;
                    string Template_Name = null;
                    string SRC_Table = null;
                    string TransRule = null;
                    string TransType = null;
                    string LKP_Columns = null;
                    string SRC_ConnectionString = null;
                    string DST_Connection_String = null;
                    int LookupOutput = 0;
                    int fuzzylookupOutput = 0;

                    while (rdr1.Read())
                    {
                        SRC_Query = (string)rdr1["SRC_Query"];
                        TransType = rdr1["Trans_type"].ToString().Replace(" ", "").ToUpper();
                        if (TransType.Contains("MERGEJOIN"))
                        {
                            SRC_Query1 = (string)rdr1["SRC_Query2"];
                        }
                        if (TransType.Contains("LOOKUP"))
                        {
                            LKP_Query = (string)rdr1["LKP_Query"];
                            LKP_Columns = (string)rdr1["LKP_Columns"];
                        }
                        if (TransType.Contains("FUZZYLOOKUP"))
                        {
                            LKP_Query = (string)rdr1["LKP_Query"];
                            LKP_Columns = (string)rdr1["LKP_Columns"];
                        }
                        DST_Table = (string)rdr1["DST_Table"];
                        Template_Name = (string)rdr1["Template_Name"];
                        SRC_Table = (string)rdr1["Task_name"];
                        TransRule = (string)rdr1["Trans_Rule"];
                        DST_Connection_String = (string)rdr1["DST_Connection_String"];
                        SRC_ConnectionString = (string)rdr1["Source_Conn_String"];
                    }

                    SqlConn1.Close();



                    //SqlConn1.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");    

                    SqlCommand SqlcmdType = new SqlCommand();
                    SqlConnection SqlConnType = new SqlConnection();
                    SqlDataReader rdrType = null;
                    SqlDataAdapter sqlAdpType = new SqlDataAdapter();
                    DataSet dsColsType = new DataSet();



                    SqlcmdType.CommandText = "select Type FROM ETL_TEMPLATE_MS WHERE Template_ID = " + Dts.Variables["Template_Id"].Value.ToString().Trim();

                    SqlConnType.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                    SqlcmdType.Connection = SqlConnType;
                    if (SqlConnType.State == ConnectionState.Closed)
                        SqlConnType.Open();
                    SqlcmdType.Connection = SqlConnType;
                    SqlcmdType.CommandType = CommandType.Text;
                    sqlAdpType.SelectCommand = SqlcmdType;

                    rdrType = SqlcmdType.ExecuteReader();

                    string TemplateType = string.Empty;
                    while (rdrType.Read())
                    {

                        TemplateType = (string)rdrType["Type"];
                    }

                    SqlConnType.Close();
                    if (TemplateType.ToUpper() == "DATATYPE")
                    {

                        SqlCommand SqlcmdExists = new SqlCommand();
                        SqlConnection SqlConnExists = new SqlConnection();
                        SqlDataReader rdrExists = null;
                        SqlDataAdapter sqlAdpExists = new SqlDataAdapter();
                        DataSet dsColsExists = new DataSet();


                        SqlConnExists.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");
                        string dst_table_1 = DST_Table.Split('.')[1].Replace("[","").Replace("]","");
                        SqlcmdExists.CommandText = "select '1' from Information_Schema.Tables where TABLE_NAME='" + dst_table_1 + "'";


                        SqlcmdExists.Connection = SqlConnExists;
                        if (SqlConnExists.State == ConnectionState.Closed)
                            SqlConnExists.Open();
                        SqlcmdExists.Connection = SqlConnExists;
                        SqlcmdExists.CommandType = CommandType.Text;
                        sqlAdpExists.SelectCommand = SqlcmdExists;

                        rdrExists = SqlcmdExists.ExecuteReader();
                        int TableExists = 0;

                        while (rdrExists.Read())
                        {
                            TableExists = 1;
                        }

                        SqlConnExists.Close();

                        SqlCommand SqlcmdCreateTable = new SqlCommand();
                        SqlConnection SqlConnCreateTable = new SqlConnection();

                        //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";
                        SqlConnCreateTable.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                        SqlcmdCreateTable.Connection = SqlConnCreateTable;
                        SqlcmdCreateTable.CommandType = CommandType.StoredProcedure;
                        SqlcmdCreateTable.CommandText = "[dbo].[ATMTN_GET_DATATYPE_DETAILS_SP]";

                        SqlParameter paramCreate1;
                        paramCreate1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                        paramCreate1.Direction = ParameterDirection.Input;
                        paramCreate1.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate1);

                        SqlParameter paramCreate2;
                        paramCreate2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                        paramCreate2.Direction = ParameterDirection.Input;
                        paramCreate2.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate2);

                        SqlParameter paramCreate3;
                        paramCreate3 = new SqlParameter("@Template_Id", Dts.Variables["Template_Id"].Value.ToString().Trim());
                        paramCreate3.Direction = ParameterDirection.Input;
                        paramCreate3.DbType = DbType.Int32;
                        SqlcmdCreateTable.Parameters.Add(paramCreate3);

                        SqlParameter paramCreate4;
                        paramCreate4 = new SqlParameter("@Tool_ID", Dts.Variables["Tool_ID"].Value.ToString().Trim());
                        paramCreate4.Direction = ParameterDirection.Input;
                        paramCreate4.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate4);

                        SqlParameter paramCreate5;
                        paramCreate5 = new SqlParameter("@TableExists", TableExists);
                        paramCreate5.Direction = ParameterDirection.Input;
                        paramCreate5.DbType = DbType.Int32;
                        SqlcmdCreateTable.Parameters.Add(paramCreate5);

                        SqlParameter paramCreate6;
                        paramCreate6 = new SqlParameter("@Message", "");
                        paramCreate6.Direction = ParameterDirection.Output;
                        paramCreate6.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate6);



                        SqlDataAdapter sqlAdpCreateTable = new SqlDataAdapter();

                        if (SqlConnCreateTable.State == ConnectionState.Closed)
                            SqlConnCreateTable.Open();
                        sqlAdpCreateTable.SelectCommand = SqlcmdCreateTable;


                        SqlDataReader rdrCreateTable = null;
                        rdrCreateTable = SqlcmdCreateTable.ExecuteReader();
                        SqlConnCreateTable.Close();


                    }


                    //Source Connection
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = SRC_ConnectionString;

                    //Destination Connection
                    ConnectionManager cm1 = p.Connections.Add("OLEDB");
                    cm1.Name = "OLEDB Destination";
                    cm1.ConnectionString = DST_Connection_String;
                    Executable e = exec_SEQ.Executables.Add("STOCK:PipelineTask");

                  

                    string ExecSQL_First = "N";
                    int parameterCount = 0;
                    string[] parameterList = null;
                    string SRC_Target = null;
                    int DType = 130;
                    Variable SQLParam;
                    p.Variables.Add("V_SourceProductName", false, "User", "TESTING");

                    string table_name = SRC_Table.Replace("[", "").Replace("]", "");
                    //Dts.Variables["Table_Name"].Value = table_name;
                    p.Variables.Add("Table_Name", false, "User", table_name);

                    if (TransType.Split('~')[0].Trim() == "EXECUTESQL" && TransRule.Split('~')[0].Trim().Split('#')[0].Trim().ToUpper() == "PRE")
                    {
                        exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                        TaskHost th = exec as TaskHost;

                        string SQLConnection = null;


                        ExecuteSQLTask EXST = (ExecuteSQLTask)th.InnerObject;

                        SRC_Target = TransRule.Split('~')[0].Trim().Split('#')[2].Trim();

                        parameterList = null;
                        if (SRC_Target.Contains("$"))
                        {
                            parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                            SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                        }


                        if (parameterList != null)
                        {

                            foreach (string parameter in parameterList)
                            {
                                EXST.ParameterBindings.Add();

                                switch (parameter.Split('.')[0].ToUpper().Trim())
                                {
                                    case "STRING":
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                        DType = 130;
                                        break;
                                    case "DATETIME":
                                    case "DATE":

                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                        DType = 133;
                                        break;
                                    default:
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                        DType = 3;
                                        break;
                                }


                                IDTSParameterBinding parameterBinding = EXST.ParameterBindings.GetBinding(parameterCount);
                                parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                parameterBinding.ParameterDirection = ParameterDirections.Output;
                                //parameterBinding.DataType = Dtype;
                                parameterBinding.DataType = DType;
                                //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                parameterBinding.ParameterName = parameterCount;
                                parameterBinding.ParameterSize = -1;
                                parameterCount++;

                            }

                        }




                        if (TransRule.Split('~')[0].Trim().Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                        {
                            SQLConnection = "OLEDB Source";
                        }
                        else
                        {
                            SQLConnection = "OLEDB Destination";
                        }
                        th.Properties["Name"].SetValue(th, "Execute Procedure");
                        th.Properties["Description"].SetValue(th, "Execute Procedure");
                        th.Properties["Connection"].SetValue(th, SQLConnection);
                        th.Properties["SqlStatementSource"].SetValue(th, TransRule.Split('~')[0].Split('#')[1]);

                        if (TransType.Split('~')[1].Trim() != "EXECUTESQL")
                        {
                            PrecedenceConstraint pcFileTasks1 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)e);
                        }
                        ExecSQL_First = "Y";
                    }
                    TaskHost thMainPipe = e as TaskHost;
                    MainPipe dataFlowTask = thMainPipe.InnerObject as MainPipe;

                    thMainPipe.Name = "DFT" 
                        
                        ;

                    IDTSComponentMetaData100 component = dataFlowTask.ComponentMetaDataCollection.New();
                    component.ComponentClassID = "DTSAdapter.OleDbSource.4";
                    IDTSDesigntimeComponent100 instance = component.Instantiate();
                    instance.ProvideComponentProperties();
                    component.Name = "OLEDBSource";
                    component.Description = "OLEDBSource";

                    //Connect the Execute SQL task to the data flow task

                    if (component.RuntimeConnectionCollection.Count > 0)
                    {
                        component.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                        component.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                    }

                    instance.SetComponentProperty("AccessMode", 2);
                    instance.SetComponentProperty("SqlCommand", SRC_Query);

                    instance.AcquireConnections(null);
                    instance.ReinitializeMetaData();
                    instance.ReleaseConnections();

                    IDTSComponentMetaData100 dataConditional_Split = null;
                    IDTSComponentMetaData100 data_DerivedColumn = null;
                    IDTSComponentMetaData100 dataConvertComponent = null;
                    IDTSComponentMetaData100 aggregate = null;
                    IDTSComponentMetaData100 lookupComponent = null;
                    IDTSComponentMetaData100 fuzzylookupComponent = null;
                    IDTSComponentMetaData100 componentUnionAll = null;
                    IDTSComponentMetaData100 RowCountComponent = null;
                    IDTSComponentMetaData100 sortWrapper = null;
                    IDTSComponentMetaData100 MergeSortWrapper = null;
                    IDTSComponentMetaData100 dataOLEDbCommand = null;
                    IDTSComponentMetaData100 componentMerge = null;
                    IDTSComponentMetaData100 mergeJoin = null;
                    IDTSComponentMetaData100 copyMapComponent = null;
                    IDTSComponentMetaData100 multiCastComponent = null;
                    IDTSComponentMetaData100 component1 = null;
                    IDTSComponentMetaData100 componentSCD = null;
                    string[] TransList = TransType.Split('~');
                    string[] RuleList = TransRule.Split('~');
                    string namelist = string.Empty;
                    string multiCast = "N";
                    String[] joinColumns = null;

                    string LastTrans = "OleDBSource";
                    string testsplit;
                    int condSplitCnt = 0;
                    string MulticastTargetTable = string.Empty;
                    int RuleCounter = 0;
                    if (ExecSQL_First == "Y")
                    {
                        RuleCounter = 1;
                    }

                    for (int i = RuleCounter; i < TransList.Length; i++)
                    {

                        testsplit = TransType.Split(',')[0].Trim();
                        RuleList[i] = RuleList[i].Trim();
                        switch (TransList[i])
                        {
                            case "EXECUTESQL":

                                Executable exec1 = exec_SEQ.Executables.Add("STOCK:SQLTask");
                                TaskHost th1 = exec1 as TaskHost;

                                ExecuteSQLTask EST = (ExecuteSQLTask)th1.InnerObject;
                                parameterCount = 0;
                                string ExecProcName = "Execute Procedure_" + i;
                                string testSql = RuleList[i];
                                string ExecSql_query = RuleList[i].Split('#')[1];
                                string SQLConnection = null;
                                SRC_Target = RuleList[i].Split('#')[2];

                                parameterList = null;
                                if (SRC_Target.Contains("$"))
                                {
                                    parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                                    SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                                }


                                if (parameterList != null)
                                {

                                    foreach (string parameter in parameterList)
                                    {
                                        EST.ParameterBindings.Add();

                                        switch (parameter.Split('.')[0].ToUpper().Trim())
                                        {
                                            case "STRING":
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                                DType = 130;
                                                break;
                                            case "DATETIME":
                                            case "DATE":

                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                                DType = 133;
                                                break;
                                            default:
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                                DType = 3;
                                                break;
                                        }


                                        IDTSParameterBinding parameterBinding = EST.ParameterBindings.GetBinding(parameterCount);
                                        parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                        parameterBinding.ParameterDirection = ParameterDirections.Output;
                                        //parameterBinding.DataType = Dtype;
                                        parameterBinding.DataType = DType;
                                        //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                        parameterBinding.ParameterName = parameterCount;
                                        parameterBinding.ParameterSize = -1;
                                        parameterCount++;

                                    }

                                }

                                if (RuleList[i].Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                                {
                                    SQLConnection = "OLEDB Source";
                                }
                                else
                                {
                                    SQLConnection = "OLEDB Destination";
                                }

                                th1.Properties["Name"].SetValue(th1, ExecProcName);
                                th1.Properties["Description"].SetValue(th1, "Execute Procedure");
                                th1.Properties["Connection"].SetValue(th1, SQLConnection);
                                th1.Properties["SqlStatementSource"].SetValue(th1, ExecSql_query);

                                if (ExecSQL_First == "Y" && RuleList[i].Split('#')[0].Trim().ToUpper() == "PRE")
                                {

                                    PrecedenceConstraint pcFileTasks2 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)exec1);
                                    PrecedenceConstraint pcFileTasks3 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec1, (Executable)e);
                                    ExecSQL_First = "N";
                                }
                                else
                                {
                                    PrecedenceConstraint pcFileTasks4 = exec_SEQ.PrecedenceConstraints.Add((Executable)e, (Executable)exec1);
                                }

                                break;
                            case "CONDITIONALSPLIT":
                                dataConditional_Split = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConditional_Split.ComponentClassID = "DTSTransform.ConditionalSplit.4";
                                CManagedComponentWrapper data_Split_Wrapper = dataConditional_Split.Instantiate();
                                data_Split_Wrapper.ProvideComponentProperties();
                                dataConditional_Split.Name = "Filter_Router_" + i;
                                dataConditional_Split.Description = "Evaluates and directs rows in a dataset based a column.";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 input = dataConditional_Split.InputCollection[0];
                                IDTSVirtualInput100 dataConvertVirtualInput = input.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 destinationVirtualInputColumns = dataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 dataConvertOutput = dataConditional_Split.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                int sourceColumnLineageId;
                                int evalOrder = 0;

                                string get_name = "";
                                string[] CondRules = RuleList[i].Split('#');

                                //get_name = ConditionalSplit.Split('>')[0].Trim();
                                foreach (string rule in CondRules)
                                {
                                    foreach (IDTSVirtualInputColumn100 virtualInputColumn in destinationVirtualInputColumns)
                                    {
                                        get_name = virtualInputColumn.Name.ToString();
                                        string getname = "[" + get_name + "]";

                                        if (rule.Trim().ToUpper().Contains(get_name.ToUpper()))
                                        {
                                            sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                            data_Split_Wrapper.SetUsageType(input.ID, dataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READONLY);
                                            IDTSOutput100 splitOutput_1 = data_Split_Wrapper.InsertOutput(DTSInsertPlacement.IP_BEFORE, dataConditional_Split.OutputCollection[evalOrder].ID);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "EvaluationOrder", evalOrder);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "FriendlyExpression", rule.Trim());
                                            evalOrder++;
                                        }
                                    }

                                    condSplitCnt = evalOrder - 1;
                                }
                                LastTrans = "ConditionalSplit";
                                break;
                            case "DERIVEDCOLUMN":
                                data_DerivedColumn = dataFlowTask.ComponentMetaDataCollection.New();
                                data_DerivedColumn.ComponentClassID = "DTSTransform.DerivedColumn.4";
                                CManagedComponentWrapper DesignDerivedTransformColumns = data_DerivedColumn.Instantiate();
                                DesignDerivedTransformColumns.ProvideComponentProperties();
                                data_DerivedColumn.Name = "DerivedColTransform_" + i;

                                data_DerivedColumn.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                data_DerivedColumn.InputCollection[0].HasSideEffects = false;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 DerivedColumnInput = data_DerivedColumn.InputCollection[0];
                                IDTSVirtualInput100 DerivedColumnVirtualInput = DerivedColumnInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 DerivedColumnVirtualInputColumns = DerivedColumnVirtualInput.VirtualInputColumnCollection;
                                IDTSCustomProperty100 ConcatProperty = null;
                                //RuleList[i] = RuleList[i] + "#ZZ_STATUS_CODE = \"P\"";
                            
                                string[] DerColumns = new string[10]; //create 10 empty index in array terms




                                string[] RulesList = RuleList[i].Split('#');
                                //int DerColCount = 0;

                                List<string> ColCollection = new List<string>();
                                foreach (string Rulevalues in RulesList)
                                {
                                    string _val = string.Empty;
                                    _val = Rulevalues.Split('$')[0].Trim();
                                    ColCollection.Add(_val);
                                }

                                foreach (string RuleValue in RulesList)
                                {
                                    string newDerCol = "Y";
                                    string _v = string.Empty;
                                    _v = RuleValue.Split('$')[0].Trim();


                                    // Iterate through the virtual input column collection.
                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {


                                        for (int j = 0; j < RulesList.Length; j++)
                                        {


                                            //DerColumns[DerColCount] = vColumn.Name;
                                            //DerColCount++;
                                            if (vColumn.Name == _v)
                                            {
                                                IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READWRITE);
                                                break;
                                            }

                                        }


                                    }

                                    string[] ColumnCollection = ColCollection.ToArray();

                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {

                                        string ColName = Array.Find(ColCollection.ToArray(), element => element.Equals(vColumn.Name, StringComparison.Ordinal));
                                        if (string.IsNullOrEmpty(ColName))
                                        {
                                            IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                        }
                                    }

                                    foreach (IDTSInputColumn100 inputColumn in DerivedColumnInput.InputColumnCollection)
                                    {
                                        if (inputColumn.Name == RuleValue.Split('$')[0].Trim())
                                        {
                                            inputColumn.Description = string.Format("Override the orginal column {0} with OTHERS if the string is NULL.", inputColumn.Name);
                                            ConcatProperty = inputColumn.CustomPropertyCollection["Expression"];

                                            ConcatProperty.Name = "Expression";
                                            ConcatProperty.Value = RuleValue.Split('$')[1].Trim();

                                            ConcatProperty = inputColumn.CustomPropertyCollection["FriendlyExpression"];
                                            ConcatProperty.Name = "FriendlyExpression";
                                            ConcatProperty.Value = ConcatProperty.Value = RuleValue.Split('$')[1].Trim();
                                            newDerCol = "N";
                                        }
                                    }

                                    if (newDerCol == "Y")
                                    {
                                        IDTSOutputColumn100 ConCatCol = data_DerivedColumn.OutputCollection[0].OutputColumnCollection.New();
                                        ConCatCol.Name = RuleValue.Split('$')[0].Trim();
                                        ConCatCol.ExternalMetadataColumnID = 0;
                                        ConCatCol.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        ConCatCol.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        IDTSCustomProperty100 ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        ConCatProp.Name = "Expression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatProp.Name = "FriendlyExpression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatCol.MappedColumnID = 0;

                                    }
                                }

                                LastTrans = "DerivedColumn";

                                break;
                            case "CHARACTERMAP":
                                dataConvertComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConvertComponent.ComponentClassID = "DTSTransform.CharacterMap.4";
                                dataConvertComponent.Name = "capitalise all initials_" + i;
                                dataConvertComponent.Description = "capitalise all initials";
                                CManagedComponentWrapper dataConvertWrapper = dataConvertComponent.Instantiate();
                                dataConvertWrapper.ProvideComponentProperties();
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 CharMapInput = dataConvertComponent.InputCollection[0];
                                IDTSVirtualInput100 CharMapDataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 CharMapDestinationVirtualInputColumns = CharMapDataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 CharMapDataConvertOutput = dataConvertComponent.OutputCollection[0];
                                IDTSOutputColumnCollection100 CharMapDataConvertOutputColumns = CharMapDataConvertOutput.OutputColumnCollection;
                                //IDTSOutputColumn100 newOutputColumn;



                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in CharMapDestinationVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    IDTSInputColumn100 inputColumn = dataConvertWrapper.SetUsageType(CharMapInput.ID, CharMapDataConvertVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);


                                    if (RuleList[i].IndexOf(get_name) > 0)
                                    {
                                        sourceColumnLineageId = CharMapDataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                        dataConvertWrapper.SetUsageType(dataConvertComponent.InputCollection[0].ID, CharMapDataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, virtualInputColumn.ID, "MapFlags", 0);

                                        /*-------------Enable this code to add a new column into the data flow --------------------*/
                                        //newOutputColumn=dataConvertWrapper.InsertOutputColumnAt(CharMapDataConvertOutput.ID, 1, get_name, string.Empty);
                                        //newOutputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 100, 0, 0, 1252);
                                        //newOutputColumn.MappedColumnID = 0;
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, newOutputColumn.ID, "InputColumnLineageID", sourceColumnLineageId);

                                        /*  MapColumns details
                                         -----------------------------
                                            Byte reversal (2)
                                            Full width (6)
                                            Half width (5)
                                            Hiragana (3)
                                            Katakana (4)
                                            Linguistic casing (7)
                                            Lowercase (0)
                                            Simplified Chinese (8)
                                            Traditional Chinese(9)
                                            Uppercase (1)*/

                                    }
                                }


                                LastTrans = "CharacterMap";
                                break;
                            case "AGGREGATE":
                                aggregate = dataFlowTask.ComponentMetaDataCollection.New();
                                aggregate.ComponentClassID = "DTSTransform.Aggregate.4";
                                CManagedComponentWrapper AggregateWrapper = aggregate.Instantiate();
                                AggregateWrapper.ProvideComponentProperties();
                                aggregate.Name = "Aggregate_" + i;
                                //AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.ReinitializeMetaData();
                                AggregateWrapper.ReleaseConnections();

                                //aggregate.InputCollection[0].InputColumnCollection.RemoveAll();
                                //aggregate.OutputCollection[0].OutputColumnCollection.RemoveAll();

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], aggregate.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 AggregateInput = aggregate.InputCollection[0];
                                IDTSVirtualInput100 AggregateVirtualInput = AggregateInput.GetVirtualInput();
                                IDTSOutput100 AggregateOutputCollection = aggregate.OutputCollection[0];
                                IDTSInput100 AggregateInputCollection = aggregate.InputCollection[0];
                                IDTSVirtualInputColumnCollection100 AggregateVirtualInputColumns = AggregateVirtualInput.VirtualInputColumnCollection;

                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in AggregateVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    //AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READWRITE);
                                    IDTSInputColumn100 inputColumn = AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);

                                    //AggregateWrapper.SetInputColumnProperty(AggregateInput.ID, inputColumn.ID, "CopyFromReferenceColumn", virtualInputColumn);

                                    string ColumnName = null;
                                    if (RuleList[i].IndexOf(get_name) != -1)
                                    {
                                        ColumnName = RuleList[i].Split('=')[0].Trim();

                                        string RuleName = RuleList[i].Split('=')[1].Trim().Split('(')[0].Trim().ToLower();
                                        int AggregateProperty = 0;
                                        switch (RuleName)
                                        {
                                            /*
                                            case "count":
                                                AggregateProperty = 1;
                                                break;
                                            case "countall":
                                                AggregateProperty = 2;
                                                break;
                                            case "countdistinct":
                                                AggregateProperty = 3;
                                                break;
                                            case "sum":
                                                AggregateProperty = 4;
                                                break;
                                            case "max":
                                                AggregateProperty = 5;
                                                break;
                                            case "min":
                                                AggregateProperty = 6;
                                                break; */

                                            case "count":
                                                AggregateProperty = 1;
                                                break;
                                            case "countall":
                                                AggregateProperty = 2;
                                                break;
                                            case "countdistinct":
                                                AggregateProperty = 3;
                                                break;
                                            case "sum":
                                                AggregateProperty = 4;
                                                break;
                                            case "avg":
                                                AggregateProperty = 5;
                                                break;
                                            case "min":
                                                AggregateProperty = 6;
                                                break;
                                            case "max":
                                                AggregateProperty = 7;
                                                break;
                                        }

                                        //AggregateWrapper.SetUsageType(AggregateInputCollection.ID, AggregateVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        IDTSOutputColumn100 newOutputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, ColumnName, string.Empty);
                                        newOutputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        newOutputColumn.MappedColumnID = 0;
                                        for (int x = 0; x < newOutputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = newOutputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = AggregateProperty;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                        /*IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                       InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                       InputColumn.MappedColumnID = 1;
                                       sourceColumnLineageId = AggregateVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                       for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                       {
                                           IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                           switch (property.Name)
                                           {
                                               case "AggregationColumnId":
                                                   property.Value = virtualInputColumn.LineageID;
                                                   break;
                                               case "AggregationType":
                                                   property.Value = 0;
                                                   break;
                                               case "IsBig":
                                                   property.Value = 0;
                                                   break;
                                               case "AggregationComparisonFlags":
                                                   property.Value = 0;
                                                   break;
                                           }
                                       } */
                                    }
                                    else
                                    {
                                        IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                        InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = 0;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                    }
                                }

                                LastTrans = "Aggregate";
                                break;
                            case "LOOKUP":
                                lookupComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                lookupComponent.ComponentClassID = "DTSTransform.Lookup.4";

                                if (RuleList[i].Contains("$"))
                                {
                                    if (RuleList[i].Split('$')[1].Trim().Replace(" ", "").ToUpper() == "NOMATCH")
                                    {
                                        LookupOutput = 1;
                                    }

                                    RuleList[i] = RuleList[i].Split('$')[0].Trim();
                                }

                                if (RuleList[i].Contains("#"))
                                {
                                    if (LKP_Query.Contains(" WHERE "))
                                    {
                                        LKP_Query = LKP_Query + " and " + RuleList[i].Split('#')[1].Trim();
                                    }
                                    else
                                    {
                                        LKP_Query = LKP_Query + " WHERE " + RuleList[i].Split('#')[1].Trim();
                                    }

                                    RuleList[i] = RuleList[i].Split('#')[0].Trim();
                                }



                                CManagedComponentWrapper lookupWrapper = lookupComponent.Instantiate();
                                lookupWrapper.ProvideComponentProperties();
                                lookupComponent.Name = "Lookup_" + i;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], lookupComponent.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], lookupComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                }
                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);

                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;

                                // Cache Type - Full = 0, Partial = 1, None = 2

                                lookupWrapper.SetComponentProperty("CacheType", 0);
                                lookupWrapper.SetComponentProperty("NoMatchBehavior", 1);// 1= Redirect rows to No Match output
                                lookupWrapper.SetComponentProperty("SqlCommand", LKP_Query);

                                // initialize metadata

                                lookupWrapper.AcquireConnections(null);
                                lookupWrapper.ReinitializeMetaData();
                                lookupWrapper.ReleaseConnections();

                                // Mark the columns we are joining on

                                IDTSInput100 lookupInput = lookupComponent.InputCollection[0];
                                IDTSInputColumnCollection100 lookupInputColumns = lookupInput.InputColumnCollection;
                                IDTSVirtualInput100 lookupVirtualInput = lookupInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 lookupVirtualInputColumns = lookupVirtualInput.VirtualInputColumnCollection;

                                // Note: join columns should be marked as READONLY

                                joinColumns = RuleList[i].Split('|');
                                foreach (string conditions in joinColumns)
                                {
                                    string columnName = conditions.Replace("IN_", "").Split('=')[1].Trim();
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "JoinToReferenceColumn", conditions.Replace("IN_", "").Split('=')[0].Trim());
                                }

                                //string[] ReadWriteColumns = LKP_Query.Replace("from", "~").Split('~')[0].Replace("SELECT", "").Replace(" ", "").Split(',');
                                //var ReadWriteColumns = new string[] { "SNo" };
                                /* 
                                string columnName1;
                                foreach (string columnName in ReadWriteColumns)
                                {
                                    if(columnName.Contains("AS"))
                                    {
                                        columnName1 = columnName.Replace("AS", "~").Split('~')[1];
                                    }
                                    else
                                    {
                                        columnName1 = columnName;
                                    }
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName1];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READWRITE);

                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "CopyFromReferenceColumn", columnName1);
                                }                                 
                                */

                                //LKP_New_Columns = "address,city,company_name,county,cust_code,email,first_name,phone1,phone2,state,zip,ZZ_STATUS_CODE";
                                string[] newColumns = LKP_Columns.Split(',');
                                IDTSOutput100 lookupMatchOutput = lookupComponent.OutputCollection[LookupOutput];
                                string SourceJoinColumn = joinColumns[0].Replace("IN_", "").Split('=')[1].Trim();
                                foreach (string sourceColumn in newColumns)
                                {
                                    if (SourceJoinColumn != sourceColumn)
                                    {
                                        //sourceColumn =  sourceColumn;
                                        string newColumnName = sourceColumn.Trim();
                                        string description = sourceColumn;

                                        // insert the new column
                                        IDTSOutputColumn100 outputColumn = lookupWrapper.InsertOutputColumnAt(lookupMatchOutput.ID, 0, newColumnName, description);
                                        outputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        lookupWrapper.SetOutputColumnProperty(lookupMatchOutput.ID, outputColumn.ID, "CopyFromReferenceColumn", sourceColumn);
                                    }
                                }

                                LastTrans = "Lookup";
                                break;
                            //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                            //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                            case "FUZZYLOOKUP":

                                fuzzylookupComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                fuzzylookupComponent.ComponentClassID = "DTSTransform.BestMatch.4";
                                CManagedComponentWrapper fuzzylookupWrapper = fuzzylookupComponent.Instantiate();
                                fuzzylookupWrapper.ProvideComponentProperties();
                                fuzzylookupComponent.Name = "fuzzylookup_" + i;
                                fuzzylookupComponent.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                                fuzzylookupComponent.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                                // initialize metadata
                                fuzzylookupWrapper.AcquireConnections(null);
                                fuzzylookupWrapper.ReinitializeMetaData();
                                fuzzylookupWrapper.ReleaseConnections();
                                //Populate reference table name from lookup query
                                string Table2 = LKP_Query.Replace("FROM", "~").Split('~')[1].Replace("WHERE", "~").Split('~')[0].Replace("[", "").Replace("]", "");
                                string a = "dbo." + Table2.Trim();
                                fuzzylookupWrapper.SetComponentProperty("ReferenceTableName", a);
                                //Other Properties
                                fuzzylookupWrapper.SetComponentProperty("MatchIndexOptions", 1);
                                fuzzylookupWrapper.SetComponentProperty("DropExistingMatchIndex", 1);
                                fuzzylookupWrapper.SetComponentProperty("CopyReferenceTable", 1);
                                fuzzylookupWrapper.SetComponentProperty("MaxOutputMatchesPerInput", 100);
                                fuzzylookupWrapper.SetComponentProperty("MinSimilarity", 0);
                                fuzzylookupWrapper.SetComponentProperty("Exhaustive", "False");
                                fuzzylookupWrapper.SetComponentProperty("WarmCaches", "True");
                                //Input collection
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "CopyColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], fuzzylookupComponent.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 fuzzylookupInput = fuzzylookupComponent.InputCollection[0];
                                IDTSExternalMetadataColumnCollection100 externalMetadataColumns = fuzzylookupInput.ExternalMetadataColumnCollection;
                                IDTSInputColumnCollection100 fuzzylookupInputColumns = fuzzylookupInput.InputColumnCollection;
                                IDTSVirtualInput100 fuzzylookupVirtualInput = fuzzylookupInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 fuzzylookupVirtualInputColumns = fuzzylookupVirtualInput.VirtualInputColumnCollection;

                                string[] joinColumn = RuleList[i].Split('|');
                                string SourceJoinColumn1 = joinColumn[0].Replace("IN_", "").Split('=')[1].Trim();
                          
                                foreach (IDTSVirtualInputColumn100 outputColumn in fuzzylookupVirtualInputColumns)
                                {
                                    IDTSInputColumn100 colfuz = fuzzylookupWrapper.SetUsageType(fuzzylookupInput.ID, fuzzylookupVirtualInput, outputColumn.LineageID, DTSUsageType.UT_READONLY);
                                    if (outputColumn.Name == SourceJoinColumn1)
                                    {
     
                                        fuzzylookupWrapper.SetInputColumnProperty(fuzzylookupInput.ID, colfuz.ID, "JoinToReferenceColumn", SourceJoinColumn1);
                         
                                        fuzzylookupWrapper.SetInputColumnProperty(fuzzylookupInput.ID, colfuz.ID, "JoinType", 2);
                                    }
                                }

                                IDTSOutput100 fuzzyLookupOutput = fuzzylookupComponent.OutputCollection[fuzzylookupOutput];
                                string lkpColumns = LKP_Query.Replace("FROM", "~").Split('~')[0];
                                string[] ReadWriteColumns = lkpColumns.Replace("SELECT", "").Replace(" ", "").Split(',');

                                string columnName1;
                                string columnName2;
                                foreach (string columnName in ReadWriteColumns)
                                {
                                   
                                    if (columnName.Contains("AS"))
                                    {
                                        columnName1 = columnName.Replace("AS", "~").Split('~')[0].Replace("[", "").Replace("]", "");
                                        columnName2 = columnName.Replace("AS", "~").Split('~')[1].Replace("[", "").Replace("]", "").Trim();
                                        columnName1 = columnName1.Trim();
                                        string description = columnName1.Trim();
                                        IDTSOutputColumn100 outputColumn = fuzzylookupWrapper.InsertOutputColumnAt(fuzzyLookupOutput.ID, 1, columnName2, description);
                                        outputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        fuzzylookupWrapper.SetOutputColumnProperty(fuzzyLookupOutput.ID, outputColumn.ID, "CopyFromReferenceColumn", columnName1);
                                    }
                                    else
                                    {
                                        columnName1 = columnName;
                                        columnName2 = columnName;
                                        columnName1 = columnName1.Trim();
                                        string description = columnName1.Trim();
                                        IDTSOutputColumn100 outputColumn = fuzzylookupWrapper.InsertOutputColumnAt(fuzzyLookupOutput.ID, 1, columnName1, description);
                                        outputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        fuzzylookupWrapper.SetOutputColumnProperty(fuzzyLookupOutput.ID, outputColumn.ID, "CopyFromReferenceColumn", columnName1);
                                    }
                                   
                                    

                                }

                                  foreach (IDTSVirtualInputColumn100 outputColumn in fuzzylookupVirtualInputColumns)
                                 {
                                     if (outputColumn.Name != SourceJoinColumn1)
                                     {
                                         IDTSOutputColumn100 cols = fuzzylookupWrapper.InsertOutputColumnAt(fuzzyLookupOutput.ID, 0, outputColumn.Name, "");
                                         cols.SetDataTypeProperties(
                                         outputColumn.DataType, outputColumn.Length, outputColumn.Precision, outputColumn.Scale, outputColumn.CodePage);
                                         fuzzylookupWrapper.SetOutputColumnProperty(fuzzyLookupOutput.ID, cols.ID, "SourceInputColumnLineageID", outputColumn.LineageID);
                                     }
                                 }
/*
                                string[] newColumnsfuzzy = LKP_Columns.Split(',');
                                 IDTSOutput100 fuzzyLookupOutput = fuzzylookupComponent.OutputCollection[fuzzylookupOutput];
                                 string SourceJoinColumnfuzzy = joinColumn[0].Replace("IN_", "").Split('=')[1].Trim();
                                 foreach (string sourceColumn in newColumnsfuzzy)
                                 {
                                     if (SourceJoinColumnfuzzy != sourceColumn)
                                     {
                                         //sourceColumn =  sourceColumn;
                                         string newColumnName1 = sourceColumn.Trim();
                                         string description1 = sourceColumn;

                                         // insert the new column
                                         IDTSOutputColumn100 outputColumn = fuzzylookupWrapper.InsertOutputColumnAt(fuzzyLookupOutput.ID, 0, newColumnName1, description1);
                                         outputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                         fuzzylookupWrapper.SetOutputColumnProperty(fuzzyLookupOutput.ID, outputColumn.ID, "CopyFromReferenceColumn", sourceColumn);
                                     }
                                 }*/
                                
                     

                                LastTrans = "FuzzyLookup";
                                break;
                            //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
                            //----------------------------------
                            case "ROWCOUNT":
                                Variable Counter = p.Variables.Add(RuleList[i].Trim(), false, "User", 0);
                                RowCountComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                RowCountComponent.ComponentClassID = "DTSTransform.RowCount.4";
                                RowCountComponent.Name = "get row counter_" + i;
                                RowCountComponent.Description = "gets row counter";

                                CManagedComponentWrapper RowCountWrapper = RowCountComponent.Instantiate();
                                RowCountWrapper.ProvideComponentProperties();
                                RowCountWrapper.SetComponentProperty("VariableName", RuleList[i].Trim());

                                // Connect the source and the transform

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "RowCount";
                                break;
                            case "SORT":
                            case "SORT&ELIMINATEDUPLICATES":
                                string SortColumn = RuleList[i].Split(' ')[0].Trim();
                                string SortType = RuleList[i].Split(' ')[1].Trim();
                                sortWrapper = dataFlowTask.ComponentMetaDataCollection.New();

                                sortWrapper.ComponentClassID = "DTSTransform.Sort.4";

                                CManagedComponentWrapper sortinstance = sortWrapper.Instantiate();
                                sortinstance.ProvideComponentProperties();
                                sortWrapper.Name = "SortTransform_" + i;
                                sortWrapper.Description = "Sortcomponent";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], sortWrapper.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], sortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                }
                                string[] sortcolumns = SortColumn.Split(',');
                                IDTSInputColumn100 col = null;
                                IDTSVirtualInput100 vSortInput = sortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                int sortPos = 1;
                                foreach (string SortColumn1 in sortcolumns)
                                {
                                    foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                    {
                                        //if (SortColumn.Contains(col.Name))
                                        if (vColumn.Name == SortColumn1.Trim())
                                        {
                                            col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                            int sortPref;

                                            if (SortType.ToUpper() == "DESC")
                                            {
                                                sortPref = -1 * sortPos;
                                            }
                                            else
                                            {
                                                sortPref = sortPos;
                                            }
                                            if (col.CustomPropertyCollection.Count > 0)
                                            {
                                                sortinstance.SetInputColumnProperty(sortWrapper.InputCollection[0].ID, col.ID, "NewSortKeyPosition", sortPref);
                                                sortPos++;
                                            }
                                        }
                                    }
                                }
                                foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                {
                                    if (!SortColumn.Contains(vColumn.Name))
                                    {
                                        col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                if (TransList[i] == "SORT&ELIMINATEDUPLICATES")
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 1);
                                }
                                else
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 0);
                                }

                                LastTrans = "Sort";
                                break;
                            case "UNIONALL":
                                componentUnionAll = dataFlowTask.ComponentMetaDataCollection.New();
                                componentUnionAll.ComponentClassID = "DTSTransform.UnionAll.4";
                                CManagedComponentWrapper instanceUnionAll = componentUnionAll.Instantiate();
                                instanceUnionAll.ProvideComponentProperties();
                                componentUnionAll.Name = "Union All columns_" + i;

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "UnionAll";
                                break;
                            case "MERGE":

                                componentMerge = dataFlowTask.ComponentMetaDataCollection.New();
                                componentMerge.ComponentClassID = "DTSTransform.Merge.4";
                                CManagedComponentWrapper instanceMerge = componentMerge.Instantiate();
                                instanceMerge.ProvideComponentProperties();
                                componentMerge.Name = "Merge All columns_" + i;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentMerge.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], componentMerge.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                }
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], componentMerge.InputCollection[1]);

                                LastTrans = "Merge";
                                break;

                            case "OLEDBCOMMAND":
                                dataOLEDbCommand = dataFlowTask.ComponentMetaDataCollection.New();

                                dataOLEDbCommand.ComponentClassID = "DTSTransform.OLEDBCommand.4";
                                CManagedComponentWrapper OLEDB_Wrapper = dataOLEDbCommand.Instantiate();
                                OLEDB_Wrapper.ProvideComponentProperties();
                                dataOLEDbCommand.Name = "OLE DB Command_" + i;

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    /*case "CopyColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;*/

                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                }
                                if (dataOLEDbCommand.RuntimeConnectionCollection.Count > 0)
                                {
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                                }
                                OLEDB_Wrapper.SetComponentProperty("SqlCommand", RuleList[i].Trim());
                                LastTrans = "OLEDB";
                                break;
                            case "MERGEJOIN":
                                component1 = dataFlowTask.ComponentMetaDataCollection.New();

                                component1.ComponentClassID = "DTSAdapter.OleDbSource.4";
                                IDTSDesigntimeComponent100 instance1 = component1.Instantiate();
                                instance1.ProvideComponentProperties();
                                component1.Name = "OLEDBSource1";
                                component1.Description = "OLEDBSource1";
                                IDTSComponentMetaData100 MyComponentMetadata = dataFlowTask.ComponentMetaDataCollection["OLEDBSource1"];

                                MyComponentMetadata.Name = "OLEDB Source2";

                                //Connect the Execute SQL task to the data flow task

                                if (component1.RuntimeConnectionCollection.Count > 0)
                                {
                                    component1.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                                    component1.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                                }

                                string MergeSortColumn = "row_id";
                                string[] MergeSortColumns = RuleList[i].Split('=');
                                string[] FirstColumn = MergeSortColumns[0].Split('.');
                                MergeSortColumn = FirstColumn[1];
                                if (!SRC_Query1.ToUpper().Contains("ORDER BY"))
                                {
                                    SRC_Query1 = SRC_Query1 + " Order by " + MergeSortColumn;
                                }
                                instance1.SetComponentProperty("AccessMode", 2);
                                instance1.SetComponentProperty("SqlCommand", SRC_Query1);
                                //instance1.SetComponentProperty("SqlCommand", "Select row_id, cust_code from Customer Order by Row_ID");

                                instance1.AcquireConnections(null);
                                instance1.ReinitializeMetaData();
                                instance1.ReleaseConnections();

                                MergeSortWrapper = dataFlowTask.ComponentMetaDataCollection.New();
                                MergeSortWrapper.ComponentClassID = "DTSTransform.Sort.4";
                                CManagedComponentWrapper MergeSortinstance = MergeSortWrapper.Instantiate();
                                MergeSortinstance.ProvideComponentProperties();
                                MergeSortWrapper.Name = "MergeSortTransform";
                                MergeSortWrapper.Description = "MergeSortTransform";
                                MergeSortWrapper.ContactInfo = "Sort1";
                                //MergeSortWrapper.SetComponentProperty("EliminateDuplicates", 1);                    

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;

                                }

                                IDTSVirtualInput100 vMergeSortInput = MergeSortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                IDTSInputColumn100 MergeCol = null;

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    //if (SortColumn.Contains(col.Name))
                                    if (vColumn.Name == MergeSortColumn.Trim())
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);

                                        if (MergeCol.CustomPropertyCollection.Count > 0)
                                        {
                                            MergeSortinstance.SetInputColumnProperty(MergeSortWrapper.InputCollection[0].ID, MergeCol.ID, "NewSortKeyPosition", 1);

                                        }
                                    }
                                }

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    if (!MergeSortColumn.Contains(vColumn.Name))
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                MergeSortinstance.SetComponentProperty("EliminateDuplicates", 1);

                                mergeJoin = dataFlowTask.ComponentMetaDataCollection.New();
                                mergeJoin.ComponentClassID = "DTSTransform.MergeJoin.4";
                                mergeJoin.Name = "merge";
                                CManagedComponentWrapper mergeInstance = mergeJoin.Instantiate();
                                mergeInstance.ProvideComponentProperties();

                                //create path from source1 to merge

                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(MergeSortWrapper.OutputCollection[0], mergeJoin.InputCollection[0]);
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], mergeJoin.InputCollection[1]);

                                MergeSortWrapper.OutputCollection[0].IsSorted = true;
                                MergeSortWrapper.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[0].HasSideEffects = false;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[1].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[1].HasSideEffects = false;

                                IDTSInput100 mergeInput1 = mergeJoin.InputCollection[0];

                                IDTSVirtualInput100 vMergeInput1 = mergeInput1.GetVirtualInput();
                                int NumKeyColumns = 0;
                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput1.VirtualInputColumnCollection)
                                {
                                    mergeInstance.SetUsageType(mergeInput1.ID, vMergeInput1, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    if (vColumn.SortKeyPosition > NumKeyColumns)
                                        NumKeyColumns = vColumn.SortKeyPosition;
                                }
                                IDTSInput100 mergeInput2 = mergeJoin.InputCollection[1];
                                IDTSVirtualInput100 vMergeInput2 = mergeInput2.GetVirtualInput();
                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput2.VirtualInputColumnCollection)
                                {
                                    if (!MergeSortColumn.Contains(vColumn.Name))
                                    {
                                        mergeInstance.SetUsageType(mergeInput2.ID, vMergeInput2, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                        if (vColumn.SortKeyPosition > NumKeyColumns)
                                            NumKeyColumns = vColumn.SortKeyPosition;
                                    }
                                }
                                IDTSCustomProperty100 property1 = mergeJoin.CustomPropertyCollection[0];
                                property1.Value = 2;
                                IDTSCustomProperty100 property2 = mergeJoin.CustomPropertyCollection[1];
                                property2.Value = 1;

                                IDTSOutput100 outt = mergeJoin.OutputCollection[0];

                                for (int merge_cnt = (outt.OutputColumnCollection.Count / 2); merge_cnt < outt.OutputColumnCollection.Count; merge_cnt++)
                                {
                                    if (!MergeSortColumn.Contains(outt.OutputColumnCollection[merge_cnt].Name))
                                    {
                                        outt.OutputColumnCollection[merge_cnt].Name = outt.OutputColumnCollection[merge_cnt].Name;
                                    }
                                }

                                mergeInstance.SetComponentProperty("JoinType", 1); //full join (0),left outer (1),inner (2)
                                mergeInstance.AcquireConnections(null);
                                mergeInstance.ReinitializeMetaData();
                                mergeInstance.ReleaseConnections();

                                LastTrans = "MergeJoin";
                                break;

                            case "MULTICAST":
                                multiCastComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                multiCastComponent.ComponentClassID = "DTSTransform.Multicast.4";
                                CManagedComponentWrapper multiCastWrapper = multiCastComponent.Instantiate();
                                multiCastWrapper.ProvideComponentProperties();

                                multiCastComponent.Name = "Multicast_" + i;
                                multiCastComponent.Description = "Multicast";
                                MulticastTargetTable = RuleList[i];
                                multiCast = "Y";


                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "FuzzyLookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 multiCastInput = multiCastComponent.InputCollection[0];
                                IDTSVirtualInput100 multiCastVirtualInput = multiCastInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 multiCastVirtualInputColumns = multiCastVirtualInput.VirtualInputColumnCollection;

                                LastTrans = "MultiCast";
                                break;

                        }
                    }

                    /*
                    componentSCD = dataFlowTask.ComponentMetaDataCollection.New();
                    componentSCD.ComponentClassID = "DTSTransform.SCD";
                    CManagedComponentWrapper SCDDesignTime = componentSCD.Instantiate();
                    SCDDesignTime.ProvideComponentProperties();
                    componentSCD.Name = "SCD Task";
                    // string compName = new Application().PipelineComponentInfos["Slowly Changing Dimension"].CreationName;

                    componentSCD.Description = "SCD Transform Example";

                    switch (LastTrans)
                    {
                        case "OleDBSource":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "ConditionalSplit":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "DerivedColumn":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "CharacterMap":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Aggregate":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Lookup":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentSCD.InputCollection[0]);
                            break;
                        case "RowCount":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Sort":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "UnionAll":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "OLEDB":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Merge":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MergeJoin":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MultiCast":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                    }

                    
                    try
                    {
                        // Set the custom properties of the SCD.              
                        SCDDesignTime.SetComponentProperty("CurrentRowWhere", "[CurrentStatus] = 'A'");
                        SCDDesignTime.SetComponentProperty("EnableInferredMember", false);
                        SCDDesignTime.SetComponentProperty("UpdateChangingAttributeHistory", false);
                        SCDDesignTime.SetComponentProperty("SqlCommand", "SELECT [city], [cust_code], [first_name], [phone1],[CurrentStatus] FROM [dbo].[CUSTOMER_TGT]");
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                    }
                    catch (Exception exception)
                    {

                    }

                    //MapColumn(componentSCD, SCDDesignTime);
                    IDTSInput100 SCDInput = componentSCD.InputCollection[0];
                    IDTSVirtualInput100 virtualInput = SCDInput.GetVirtualInput();
                    IDTSVirtualInputColumnCollection100 SCDVirtualInputColumns = virtualInput.VirtualInputColumnCollection;
                    
                    //Setting all properties
                    foreach (IDTSVirtualInputColumn100 virtualColumn in SCDVirtualInputColumns)
                    {
                        try
                        {
                            String cname1 = virtualColumn.Name;

                            if (cname1 == "cust_code")
                            {
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 1);
                            }
                            // designTime.SetInputColumnProperty(SCDInput.ID,virtualColumn.ID, "ColumnType", 1);
                            if (cname1 == "city")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 3);
                            }
                            if (cname1 == "phone1")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 2);
                            }
                            if (cname1 == "first_name")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 4);
                            }
                            //if (cname1 == "CurrentStatus")
                            //{
                            //    IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                            //    SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "CurrentRowWhere", "");
                            //}
                        }
                        catch (Exception fg)
                        {

                        }
                    }

                    SCDDesignTime.AcquireConnections(null);
                    SCDDesignTime.ReinitializeMetaData();
                    SCDDesignTime.ReleaseConnections();
                    IDTSInputColumn100 SCDCol = null;
                    IDTSVirtualInput100 vSCDInput = componentSCD.InputCollection[0].GetVirtualInput();
                    //IDTSVirtualInputColumn100 vColumn = null;

                    foreach (IDTSVirtualInputColumn100 vSCDColumn in vSCDInput.VirtualInputColumnCollection)
                    {

                        SCDCol = SCDDesignTime.SetUsageType(componentSCD.InputCollection[0].ID, vSCDInput, vSCDColumn.LineageID, DTSUsageType.UT_READONLY);
                        
                    }
                     

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                    */

                    //Data Convert Transform start//

                    int condCount = 0;
                    string des_tab = DST_Table.Split('.')[1].Replace("[", "").Replace("]", ""); 
                    string[] DEST_Tables = des_tab.Split(',');
                    //string[] DEST_Tables = DST_Table.Split('.')[1].Replace("[", "").Replace("]", "");
                    foreach (string DEST_TABLE in DEST_Tables)
                    {

                        IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                        dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert.4";
                        CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                        dataConvertWrapper1.ProvideComponentProperties();

                        dataConvertComponent1.Description = "Data Conversion Component";
                        dataConvertComponent1.Name = "DataConvert Component_" + condCount;

                        if (condCount > 0)
                        {
                            LastTrans = "ConditionalSplit";
                        }
                        SqlCommand Sqlcmd = new SqlCommand();
                        SqlConnection SqlConn = new SqlConnection();
                        //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";
                        switch (LastTrans)
                        {
                            case "OleDBSource":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "ConditionalSplit":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[condCount], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "DerivedColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CharacterMap":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Aggregate":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Lookup":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "FuzzyLookup":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(fuzzylookupComponent.OutputCollection[fuzzylookupOutput], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "RowCount":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Sort":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "UnionAll":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "OLEDB":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CopyColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MergeJoin":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Merge":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MultiCast":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                        }
                        SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");

                        Sqlcmd.Connection = SqlConn;
                        Sqlcmd.CommandType = CommandType.Text;

                        Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + DEST_TABLE + "'";
                        SqlDataAdapter sqlAdp = new SqlDataAdapter();
                        DataSet dsCols = new DataSet();
                        if (SqlConn.State == ConnectionState.Closed)
                            SqlConn.Open();
                        sqlAdp.SelectCommand = Sqlcmd;
                        SqlDataReader rdr = null;
                        rdr = Sqlcmd.ExecuteReader();
                        int a = 0;
                        while (rdr.Read())
                        {
                            try
                            {
                                string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                dataConvertWrapper1.SetUsageType(
                                    dataConvertComponent1.InputCollection[0].ID,
                                    dataConvertVirtualInput, sourceColumnLineageId,
                                    DTSUsageType.UT_READONLY);

                                IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                }
                                if (DATA_TYPE.ToLower() == "nvarchar")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "numeric")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "float")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int" || DATA_TYPE.ToLower() == "bigint")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                }

                                else if (DATA_TYPE.ToLower() == "bit")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "real")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R4, 0, 0, NUMERIC_SCALE, 0);
                                }

                                ConvCol1.MappedColumnID = a;

                                dataConvertWrapper1.SetOutputColumnProperty(
                                        dataConvertOutput.ID,
                                        ConvCol1.ID,
                                        "SourceInputColumnLineageID",
                                        sourceColumnLineageId);
                                a = a + 1;
                            }
                            catch (Exception ex)
                            {

                            }
                        }

                        if (SqlConn.State == ConnectionState.Open)
                            SqlConn.Close();

                        //Get input and virtual input for destination to select and map columns:

                        IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                        destination.ComponentClassID = "DTSAdapter.OleDbDestination.4";
                        CManagedComponentWrapper destDesignTime = destination.Instantiate();
                        destDesignTime.ProvideComponentProperties();
                        destination.Name = "OLEDBDestination";


                        destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);
                        //string des = DEST_TABLE.Split('.')[1].Replace("[", "").Replace("]", "");
                        destDesignTime.SetComponentProperty("OpenRowset", DST_Table); //Prajakta - To add the value from "DST Table"
                        destDesignTime.SetComponentProperty("AccessMode", 3);
                        destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                        //Connect the source to destination component:
                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                        IDTSInput100 destinationInputerr = destination.InputCollection[0];
                        IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                        IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                        //Reinitialize the destination metadata:

                        destDesignTime.AcquireConnections(null);
                        destDesignTime.ReinitializeMetaData();
                        destDesignTime.ReleaseConnections();

                        //Get the destination s default input and virtual input:

                        IDTSInput100 destInput = destination.InputCollection[0];
                        IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                        IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                        IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                        IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                        IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;

                        // The OLEDB destination requires you to hook up the external data conversion columns
                        foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                        {
                            try
                            {
                                // Get the external column id
                                IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                if (extCol != null)
                                {
                                    // Create an input column from an output col of previous component.
                                    vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                    IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                    if (inputCol != null)
                                    {
                                        // map the input column with an external metadata column
                                        destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                    }
                                }
                            }
                            catch (Exception exc)
                            {
                                foreach (string joinCol in joinColumns)
                                {
                                    if (outputCol.Name != joinCol)
                                    {
                                        Dts.TaskResult = (int)ScriptResults.Failure;
                                    }
                                }
                            }
                        }
                        condCount = condCount + 1;
                    }

                    if (multiCast == "Y")
                    {
                        int multiCastCount = 1;

                        string[] multiCast_Tables = MulticastTargetTable.Split('#');

                        foreach (string TGT_TABLE in multiCast_Tables)
                        {

                            IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                            dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert.4";
                            CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                            dataConvertWrapper1.ProvideComponentProperties();

                            dataConvertComponent1.Description = "Data Conversion Component";
                            dataConvertComponent1.Name = "DataConvert Component_MultiCast_" + multiCastCount;


                            SqlCommand Sqlcmd = new SqlCommand();
                            SqlConnection SqlConn = new SqlConnection();
                            //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";

                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[multiCastCount], dataConvertComponent1.InputCollection[0]);

                            SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");

                            Sqlcmd.Connection = SqlConn;
                            Sqlcmd.CommandType = CommandType.Text;

                            Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + TGT_TABLE + "'";
                            SqlDataAdapter sqlAdp = new SqlDataAdapter();
                            DataSet dsCols = new DataSet();
                            if (SqlConn.State == ConnectionState.Closed)
                                SqlConn.Open();
                            sqlAdp.SelectCommand = Sqlcmd;
                            SqlDataReader rdr = null;
                            rdr = Sqlcmd.ExecuteReader();
                            int a = 0;
                            while (rdr.Read())
                            {
                                try
                                {
                                    string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                    string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                    int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                    int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                    int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                    IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                    IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                    IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                    int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                    dataConvertWrapper1.SetUsageType(
                                        dataConvertComponent1.InputCollection[0].ID,
                                        dataConvertVirtualInput, sourceColumnLineageId,
                                        DTSUsageType.UT_READONLY);

                                    IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                    if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                    }
                                    if (DATA_TYPE.ToLower() == "nvarchar")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "numeric")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "float")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                    }

                                    else if (DATA_TYPE.ToLower() == "bit")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                    }


                                    ConvCol1.MappedColumnID = a;

                                    dataConvertWrapper1.SetOutputColumnProperty(
                                            dataConvertOutput.ID,
                                            ConvCol1.ID,
                                            "SourceInputColumnLineageID",
                                            sourceColumnLineageId);
                                    a = a + 1;
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                            if (SqlConn.State == ConnectionState.Open)
                                SqlConn.Close();

                            //Get input and virtual input for destination to select and map columns:

                            IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                            destination.ComponentClassID = "DTSAdapter.OleDbDestination.4";
                            CManagedComponentWrapper destDesignTime = destination.Instantiate();
                            destDesignTime.ProvideComponentProperties();
                            destination.Name = "OLEDBDestination_" + TGT_TABLE + "_" + multiCastCount;


                            destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                            destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                            destDesignTime.SetComponentProperty("OpenRowset", TGT_TABLE); //Prajakta - To add the value from "DST Table"
                            destDesignTime.SetComponentProperty("AccessMode", 3);
                            destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                            //Connect the source to destination component:
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                            IDTSInput100 destinationInputerr = destination.InputCollection[0];
                            IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                            IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                            //Reinitialize the destination metadata:

                            destDesignTime.AcquireConnections(null);
                            destDesignTime.ReinitializeMetaData();
                            destDesignTime.ReleaseConnections();

                            //Get the destination s default input and virtual input:

                            IDTSInput100 destInput = destination.InputCollection[0];
                            IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                            IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                            IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                            IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                            IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;

                            // The OLEDB destination requires you to hook up the external data conversion columns
                            foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                            {
                                try
                                {
                                    // Get the external column id
                                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                    if (extCol != null)
                                    {
                                        // Create an input column from an output col of previous component.
                                        vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                        IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                        if (inputCol != null)
                                        {
                                            // map the input column with an external metadata column
                                            destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                        }
                                    }
                                }
                                catch (Exception exc)
                                {
                                    foreach (string joinCol in joinColumns)
                                    {
                                        if (outputCol.Name != joinCol)
                                        {
                                            Dts.TaskResult = (int)ScriptResults.Failure;
                                        }
                                    }
                                }
                            }
                            multiCastCount = multiCastCount + 1;
                        }
                    }


                    //We then save the package into a file system.
                    //Dts.TaskResult = (int)ScriptResults.Success;
                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + Template_Name + ".dtsx", p, null);
                    //p.Execute();
                }

            }
            catch (Exception ex)
            {
                Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_45bc0f92ea8e4517be1762b8201bed3c.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</RootNamespace>
    <AssemblyName>ST_45bc0f92ea8e4517be1762b8201bed3c</AssemblyName>
    <ProjectGuid>{C0FCFF17-7581-4520-BCC1-8ED2A17FE389}</ProjectGuid>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x86</PlatformTarget>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.Dts.Design, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\120\SDK\Assemblies\Microsoft.SqlServer.Dts.Design.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\120\SDK\Assemblies\Microsoft.SqlServer.DTSPipelineWrap.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\120\SDK\Assemblies\Microsoft.SQLServer.DTSRuntimeWrap.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SQLServer.ManagedDTS, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\120\SDK\Assemblies\Microsoft.SQLServer.ManagedDTS.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SqlServer.SQLTask, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Tasks\Microsoft.SqlServer.SQLTask.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=12.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug519a594f-da24-4629-a875-35e4ddafb7de/357e17d4-4b90-4aaf-a2e5-26b2b96e4e1a&quot;" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <PropertyGroup>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:ProjectId>{BCC422BA-10FD-488F-8FE6-8AF6FD310273}</msb:ProjectId>
		<msb:NoContent>Reference;Import;Folder</msb:NoContent>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>st_0cef29a9393f4e4c8dda023d910526e5</msb:CodeName>
		<msb:DisplayName>st_0cef29a9393f4e4c8dda023d910526e5</msb:DisplayName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Project Include="ST_45bc0f92ea8e4517be1762b8201bed3c.csproj"/>
		<msb:Breakpoint Include="6dd69800e6e74a86b5277fd30b17067f">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>25</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>2347</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="e3d7cef5ed914280bb764421ba4327cc">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:LineNumber>49</msb:LineNumber>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="a369bdd9d2bf4104b510ff37f3be65ee">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>25</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>2251</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hexaware")]
[assembly: AssemblyProduct("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyCopyright("Copyright @ Hexaware 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_45bc0f92ea8e4517be1762b8201bed3c.dll">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
FBMTFBMUFBMVFBMWFBMXFBMYFBMZFBMaFBMbFBMcFBMdFhMeFhMfODUBAAAREnI8BABwb0YAAAp0
HAAAARMTERJyUAQAcG9GAAAKbyQAAApyZgQAcHLnAABwb0cAAApvSAAAChMaERpyagQAcG9JAAAK
LBMREnJ+BABwb0YAAAp0HAAAARMUERpylAQAcG9JAAAKLCYREnKiBABwb0YAAAp0HAAAARMVERJy
tgQAcG9GAAAKdBwAAAETGxEacs4EAHBvSQAACiwmERJyogQAcG9GAAAKdBwAAAETFREScrYEAHBv
RgAACnQcAAABExsREnLmBABwb0YAAAp0HAAAARMWERJy+gQAcG9GAAAKdBwAAAETFxESchYFAHBv
RgAACnQcAAABExgREnIqBQBwb0YAAAp0HAAAARMZERJyQAUAcG9GAAAKdBwAAAETHREScmwFAHBv
RgAACnQcAAABExwREm9KAAAKOr/+//8RCW9LAAAKczUAAAoTIHM2AAAKEyEUEyJzQAAAChMjc0EA
AAomESBykgUAcAIoIAAACm8hAAAKcrADAHBvIgAACm8jAAAKbyQAAApvJQAACigpAAAKbzoAAAoR
IQIoIAAACm8hAAAKctQCAHBvIgAACm8jAAAKbyQAAApvJQAACm83AAAKESARIW84AAAKESFvQgAA
Ci0HESFvQwAAChEgESFvOAAAChEgF285AAAKESMRIG9EAAAKESBvRQAAChMifkwAAAoTJCsTESJy
/gUAcG9GAAAKdBwAAAETJBEib0oAAAot5BEhb0sAAAoRJG9IAAAKcggGAHAoTQAACjkKAwAAczUA
AAoTJXM2AAAKEyYUEydzQAAAChMoc0EAAAomESYRHXIaBgBwcucAAHBvRwAACm83AAAKERYXjT0A
AAH+DikB/gwpARYfLp3+DCkBb04AAAoXmnJEBgBwcucAAHBvRwAACnJIBgBwcucAAHBvRwAAChMp
ESVyTAYAcBEpcsYGAHAoMwAACm86AAAKESURJm84AAAKESZvQgAACi0HESZvQwAAChElESZvOAAA
ChElF285AAAKESgRJW9EAAAKESVvRQAAChMnFhMqKwMXEyoRJ29KAAAKLfQRJm9LAAAKczUAAAoT
K3M2AAAKEywRLAIoIAAACm8hAAAKctQCAHBvIgAACm8jAAAKbyQAAApvJQAACm83AAAKESsRLG84
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
cG8xAAAKEV8RYm8yAAAKETdyQggAcChNAAAKLGQRVxFdmheNPQAAAf4OKQH+DCkBFh8jnf4MKQFv
TgAAChaabyUAAApvSAAACnLsBwBwKE0AAAosLAdvXAAAChEFEV5vXQAACiYHb1wAAAoRXhE2b10A
AAomcnoHAHATNzi2XAAAB29cAAAKETYRXm9dAAAKJjihXAAAEUNvGgAABm8eAAAGE0YRRnIICgBw
byYAAAYRRm8pAAAGE2YRZm8wAAAGEUZySAoAcBFdjCcAAAEocwAACm8jAAAGEUZyZgoAcG8hAAAG
EVol/g4sATlJBAAA/hN+CQAABDq7AAAAHw5zcAAACiVyxAgAcBYocQAACiVy1goAcBcocQAACiVy
+AoAcBgocQAACiVyFAsAcBkocQAACiVyLgsAcBoocQAACiVyQgsAcBsocQAACiVyUAsAcBwocQAA
CiVyaAsAcB0ocQAACiVyegsAcB4ocQAACiVyhAsAcB8JKHEAAAolcvUAAHAfCihxAAAKJXKWCwBw
HwsocQAACiVyogsAcB8MKHEAAAolcrYLAHAfDShxAAAK/hOACQAABP4TfgkAAAT+DCwB/g0tAShy
AAAKOWkDAAD+DC0BRQ4AAAAFAAAAPwAAAHkAAACzAAAA7QAAACcBAABiAQAAnQEAANcBAAARAgAA
SwIAAIUCAAC8AgAA8wIAADgjAwAAEUNvGwAABm9QAAAGEURvKAAABhaMJwAAAW9TAAAGEUZvJwAA
BhaMJwAAAW9bAAAGb1IAAAY46QIAABFDbxsAAAZvUAAABhFGbygAAAYWjCcAAAFvUwAABhFGbycA
AAYWjCcAAAFvWwAABm9SAAAGOK8CAAARQ28bAAAGb1AAAAYRR28oAAAGFownAAABb1MAAAYRRm8n
AAAGFownAAABb1sAAAZvUgAABjh1AgAAEUNvGwAABm9QAAAGEUhvKAAABhaMJwAAAW9TAAAGEUZv
JwAABhaMJwAAAW9bAAAGb1IAAAY4OwIAABFDbxsAAAZvUAAABhFJbygAAAYWjCcAAAFvUwAABhFG
bycAAAYWjCcAAAFvWwAABm9SAAAGOAECAAARQ28bAAAGb1AAAAYRSm8oAAAGER6MJwAAAW9TAAAG
EUZvJwAABhaMJwAAAW9bAAAGb1IAAAY4xgEAABFDbxsAAAZvUAAABhFLbygAAAYRH4wnAAABb1MA
AAYRRm8nAAAGFownAAABb1sAAAZvUgAABjiLAQAAEUNvGwAABm9QAAAGEU1vKAAABhaMJwAAAW9T
AAAGEUZvJwAABhaMJwAAAW9bAAAGb1IAAAY4UQEAABFDbxsAAAZvUAAABhFObygAAAYWjCcAAAFv
UwAABhFGbycAAAYWjCcAAAFvWwAABm9SAAAGOBcBAAARQ28bAAAGb1AAAAYRTG8oAAAGFownAAAB
b1MAAAYRRm8nAAAGFownAAABb1sAAAZvUgAABjjdAAAAEUNvGwAABm9QAAAGEVBvKAAABhaMJwAA
AW9TAAAGEUZvJwAABhaMJwAAAW9bAAAGb1IAAAY4owAAABFDbxsAAAZvUAAABhFRbygAAAYWjCcA
AAFvUwAABhFGbycAAAYWjCcAAAFvWwAABm9SAAAGK2wRQ28bAAAGb1AAAAYRUm8oAAAGFownAAAB
b1MAAAYRRm8nAAAGFownAAABb1sAAAZvUgAABis1EUNvGwAABm9QAAAGEVRvKAAABhaMJwAAAW9T
AAAGEUZvJwAABhaMJwAAAW9bAAAGb1IAAAYRRm8nAAAGFownAAABb1sAAAYTZxFnb2IAAAYTaBFo
b2cAAAYTaRFGbygAAAYWjCcAAAFvUwAABhNqEWpvVwAABiYWE2xy5wAAcBNtEVcRXZoXjT0AAAH+
DikB/gwpARYfI53+DCkBb04AAAoTbhFu/g4qARb+DisBOCYBAAD+DCoB/gwrAZoTbxFpb2oAAAb+
Di4BONQAAAD+DC4Bb38AAAp0BwAAAhNwEXBvDQAABm8kAAAKE21yRAYAcBFtckgGAHAoMwAACiYR
b28lAAAKb0gAAAoRbW9IAAAKb0kAAAo5hwAAABFob2cAAAYRbW9pAAAGbxUAAAYTaxFmEWdvXAAA
BhFoEWsWbzQAAAYmEWYWEUZvKAAABhFsjCcAAAFvUwAABm9UAAAGbzsAAAYTcRFmEXFvVAAABnLK
CwBwEWyMJwAAAW83AAAGJhFmEXFvVAAABnLqCwBwEW9vJQAACm83AAAGJhFsF1gTbP4MLgFvhwAA
Cjoe////3h3+DC4BdV8AAAH+Di8B/gwvASwJ/gwvAW+IAAAK3P4MKwEXWP4OKwH+DCsB/gwqAY5p
P8v+//9y1goAcBNaOD9WAAARQ28aAAAGbx4AAAYTRxFHchAMAHBvJgAABhFHbykAAAYTchFybzAA
AAYRR3JKDABwEV2MJwAAAShzAAAKbyMAAAYRR28nAAAGFownAAABb1sAAAZvZQAABhZvegAABhFH
bycAAAYWjCcAAAFvWwAABhZvYAAABhFaJf4OLAE5SQQAAP4TfgoAAAQ6uwAAAB8Oc3AAAAolcsQI
AHAWKHEAAAolctYKAHAXKHEAAAolcvgKAHAYKHEAAAolchQLAHAZKHEAAAolci4LAHAaKHEAAAol
clALAHAbKHEAAAolckILAHAcKHEAAAolcmgLAHAdKHEAAAolcnoLAHAeKHEAAAolcoQLAHAfCShx
AAAKJXL1AABwHwoocQAACiVylgsAcB8LKHEAAAolcqILAHAfDChxAAAKJXK2CwBwHw0ocQAACv4T
gAoAAAT+E34KAAAE/gwsAf4NLQEocgAACjlpAwAA/gwtAUUOAAAABQAAAD8AAAB5AAAAswAAAO0A
AAAnAQAAYgEAAJ0BAADXAQAAEQIAAEsCAACFAgAAvAIAAPMCAAA4IwMAABFDbxsAAAZvUAAABhFE
bygAAAYWjCcAAAFvUwAABhFHbycAAAYWjCcAAAFvWwAABm9SAAAGOOkCAAARQ28bAAAGb1AAAAYR
Rm8oAAAGFownAAABb1MAAAYRR28nAAAGFownAAABb1sAAAZvUgAABjivAgAAEUNvGwAABm9QAAAG
EUdvKAAABhaMJwAAAW9TAAAGEUdvJwAABhaMJwAAAW9bAAAGb1IAAAY4dQIAABFDbxsAAAZvUAAA
BhFIbygAAAYWjCcAAAFvUwAABhFHbycAAAYWjCcAAAFvWwAABm9SAAAGODsCAAARQ28bAAAGb1AA
AAYRSG8oAAAGFownAAABb1MAAAYRR28nAAAGFownAAABb1sAAAZvUgAABjgBAgAAEUNvGwAABm9Q
AAAGEUtvKAAABhEfjCcAAAFvUwAABhFHbycAAAYWjCcAAAFvWwAABm9SAAAGOMYBAAARQ28bAAAG
b1AAAAYRSm8oAAAGER6MJwAAAW9TAAAGEUdvJwAABhaMJwAAAW9bAAAGb1IAAAY4iwEAABFDbxsA
AAZvUAAABhFNbygAAAYWjCcAAAFvUwAABhFHbycAAAYWjCcAAAFvWwAABm9SAAAGOFEBAAARQ28b
AAAGb1AAAAYRTm8oAAAGFownAAABb1MAAAYRR28nAAAGFownAAABb1sAAAZvUgAABjgXAQAAEUNv
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
7QAAACcBAABiAQAAnQEAANcBAAARAgAASwIAAIUCAAC8AgAA8wIAADgjAwAAEUNvGwAABm9QAAAG
EURvKAAABhaMJwAAAW9TAAAGEUhvJwAABhaMJwAAAW9bAAAGb1IAAAY46QIAABFDbxsAAAZvUAAA
BhFGbygAAAYWjCcAAAFvUwAABhFIbycAAAYWjCcAAAFvWwAABm9SAAAGOK8CAAARQ28bAAAGb1AA
AAYRR28oAAAGFownAAABb1MAAAYRSG8nAAAGFownAAABb1sAAAZvUgAABjh1AgAAEUNvGwAABm9Q
AAAGEUhvKAAABhaMJwAAAW9TAAAGEUhvJwAABhaMJwAAAW9bAAAGb1IAAAY4OwIAABFDbxsAAAZv
UAAABhFJbygAAAYWjCcAAAFvUwAABhFIbycAAAYWjCcAAAFvWwAABm9SAAAGOAECAAARQ28bAAAG
b1AAAAYRSm8oAAAGER6MJwAAAW9TAAAGEUhvJwAABhaMJwAAAW9bAAAGb1IAAAY4xgEAABFDbxsA
AAZvUAAABhFLbygAAAYRH4wnAAABb1MAAAYRSG8nAAAGFownAAABb1sAAAZvUgAABjiLAQAAEUNv
GwAABm9QAAAGEU1vKAAABhaMJwAAAW9TAAAGEUhvJwAABhaMJwAAAW9bAAAGb1IAAAY4UQEAABFD
bxsAAAZvUAAABhFObygAAAYWjCcAAAFvUwAABhFIbycAAAYWjCcAAAFvWwAABm9SAAAGOBcBAAAR
Q28bAAAGb1AAAAYRTG8oAAAGFownAAABb1MAAAYRSG8nAAAGFownAAABb1sAAAZvUgAABjjdAAAA
EUNvGwAABm9QAAAGEVBvKAAABhaMJwAAAW9TAAAGEUhvJwAABhaMJwAAAW9bAAAGb1IAAAY4owAA
ABFDbxsAAAZvUAAABhFRbygAAAYWjCcAAAFvUwAABhFIbycAAAYWjCcAAAFvWwAABm9SAAAGK2wR
Q28bAAAGb1AAAAYRUm8oAAAGFownAAABb1MAAAYRSG8nAAAGFownAAABb1sAAAZvUgAABis1EUNv
GwAABm9QAAAGEVRvKAAABhaMJwAAAW9TAAAGEUhvJwAABhaMJwAAAW9bAAAGb1IAAAYRSG8nAAAG
FownAAABb1sAAAYThxFIbycAAAYWjCcAAAFvWwAABm9iAAAGE4gRiG9nAAAGE4kRSG8oAAAGFown
AAABb1MAAAYTihGKb1cAAAYmEYlvagAABv4OLgErf/4MLgFvfwAACnQHAAACE4sRi28NAAAGbyQA
AAoTbRGGEYdvXAAABhGIEYtvFQAABhZvNAAABiYRVxFdmhFtbyYAAAoWMTkRiG9nAAAGEW1vaQAA
Bm8VAAAGE2sRhhFIbycAAAYWjCcAAAFvWwAABm9cAAAGEYgRaxdvNAAABib+DC4Bb4cAAAo6c///
/94d/gwuAXVfAAAB/g4vAf4MLwEsCf4MLwFviAAACtxyFAsAcBNaOABHAAARQ28aAAAGbx4AAAYT
SRFJcqsNAHBvJgAABhFJbykAAAYTjBGMbzAAAAYRSXLdDQBwEV2MJwAAAShzAAAKbyMAAAYRjBRv
PQAABhGMbzEAAAYRjG8+AAAGEVol/g4sATlIBAAA/hN+DAAABDq7AAAAHw5zcAAACiVyxAgAcBYo
cQAACiVy1goAcBcocQAACiVy+AoAcBgocQAACiVyFAsAcBkocQAACiVyLgsAcBoocQAACiVyQgsA
cBsocQAACiVyUAsAcBwocQAACiVyaAsAcB0ocQAACiVyegsAcB4ocQAACiVyhAsAcB8JKHEAAAol
cvUAAHAfCihxAAAKJXKWCwBwHwsocQAACiVyogsAcB8MKHEAAAolcrYLAHAfDShxAAAK/hOADAAA
BP4TfgwAAAT+DCwB/g0tAShyAAAKOWgDAAD+DC0BRQ4AAAAFAAAAPwAAAHkAAACzAAAA7QAAACcB
AABhAQAAnAEAANYBAAAQAgAASgIAAIQCAAC7AgAA8gIAADgiAwAAEUNvGwAABm9QAAAGEURvKAAA
BhaMJwAAAW9TAAAGEUlvJwAABhaMJwAAAW9bAAAGb1IAAAY46AIAABFDbxsAAAZvUAAABhFGbygA
AAYWjCcAAAFvUwAABhFJbycAAAYWjCcAAAFvWwAABm9SAAAGOK4CAAARQ28bAAAGb1AAAAYRR28o
AAAGFownAAABb1MAAAYRSW8nAAAGFownAAABb1sAAAZvUgAABjh0AgAAEUNvGwAABm9QAAAGEUhv
KAAABhaMJwAAAW9TAAAGEUlvJwAABhaMJwAAAW9bAAAGb1IAAAY4OgIAABFDbxsAAAZvUAAABhFJ
bygAAAYWjCcAAAFvUwAABhFJbycAAAYWjCcAAAFvWwAABm9SAAAGOAACAAARQ28bAAAGb1AAAAYR
SW8oAAAGFownAAABb1MAAAYRSW8nAAAGFownAAABb1sAAAZvUgAABjjGAQAAEUNvGwAABm9QAAAG
EUtvKAAABhEfjCcAAAFvUwAABhFJbycAAAYWjCcAAAFvWwAABm9SAAAGOIsBAAARQ28bAAAGb1AA
AAYRTW8oAAAGFownAAABb1MAAAYRSW8nAAAGFownAAABb1sAAAZvUgAABjhRAQAAEUNvGwAABm9Q
AAAGEU5vKAAABhaMJwAAAW9TAAAGEUlvJwAABhaMJwAAAW9bAAAGb1IAAAY4FwEAABFDbxsAAAZv
UAAABhFMbygAAAYWjCcAAAFvUwAABhFJbycAAAYWjCcAAAFvWwAABm9SAAAGON0AAAARQ28bAAAG
b1AAAAYRUG8oAAAGFownAAABb1MAAAYRSW8nAAAGFownAAABb1sAAAZvUgAABjijAAAAEUNvGwAA
Bm9QAAAGEVFvKAAABhaMJwAAAW9TAAAGEUlvJwAABhaMJwAAAW9bAAAGb1IAAAYrbBFDbxsAAAZv
UAAABhFSbygAAAYWjCcAAAFvUwAABhFJbycAAAYWjCcAAAFvWwAABm9SAAAGKzURQ28bAAAGb1AA
AAYRVG8oAAAGFownAAABb1MAAAYRSW8nAAAGFownAAABb1sAAAZvUgAABhFJbycAAAYWjCcAAAFv
WwAABhONEY1vYgAABhOOEUlvKAAABhaMJwAAAW9TAAAGE48RSW8nAAAGFownAAABb1sAAAYmEY5v
ZwAABhOQEZBvagAABv4OLgE48AMAAP4MLgFvfwAACnQHAAACE5ERkW8NAAAGbyQAAAoTbRGMEY1v
XAAABhGOEZFvFQAABhZvNAAABiYUE5IRVxFdmhFtbyYAAAoVO4ECAAARVxFdmheNPQAAAf4OKQH+
DCkBFh89nf4MKQFvTgAAChaabyUAAAoTkhFXEV2aF409AAAB/g4pAf4MKQEWHz2d/gwpAW9OAAAK
F5pvJQAACheNPQAAAf4OKQH+DCkBFh8onf4MKQFvTgAAChaabyUAAApvpAAAChOTFhOUEZMl/g4s
ATnIAAAA/hN+DQAABC1hHXNwAAAKJXLzDQBwFihxAAAKJXL/DQBwFyhxAAAKJXIRDgBwGChxAAAK
JXItDgBwGShxAAAKJXI1DgBwGihxAAAKJXI9DgBwGyhxAAAKJXJFDgBwHChxAAAK/hOADQAABP4T
fg0AAAT+DCwB/g0tAShyAAAKLEj+DC0BRQcAAAACAAAABwAAAAwAAAARAAAAFgAAABsAAAAgAAAA
KyEXE5QrHBgTlCsXGROUKxIaE5QrDRsTlCsIHBOUKwMdE5QRjBGPb1QAAAYWEZJ+TAAACm8yAAAG
E5URlRGOb2cAAAYRbW9pAAAGbxAAAAYRjm9nAAAGEW1vaQAABm8RAAAGFhYRjm9nAAAGEW1vaQAA
Bm8XAAAGb5EAAAYRlRZvjAAABhYTljivAAAAEZVviQAABhGWjCcAAAFvfwAABhOXEZdvSgAABiX+
DiwBOYMAAAD+DCwBck0OAHAoTQAACi0y/gwsAXJ1DgBwKE0AAAotN/4MLAFylQ4AcChNAAAKLTf+
DCwBcqEOAHAoTQAACi02K0ERlxGRbxUAAAaMJwAAAW9OAAAGKywRlxGUjCcAAAFvTgAABiscEZcW
jCcAAAFvTgAABisNEZcWjCcAAAFvTgAABhGWF1gTlhGWEZVviQAABm+BAAAGPz7///84IwEAABGM
EY9vVAAABhYRbX5MAAAKbzIAAAYTmBGYEY5vZwAABhFtb2kAAAZvEAAABhGOb2cAAAYRbW9pAAAG
bxEAAAYWFhGOb2cAAAYRbW9pAAAGbxcAAAZvkQAABhYTmTiuAAAAEZhviQAABhGZjCcAAAFvfwAA
BhOaEZpvSgAABiX+DiwBOYIAAAD+DCwBck0OAHAoTQAACi0y/gwsAXJ1DgBwKE0AAAotN/4MLAFy
lQ4AcChNAAAKLTb+DCwBcqEOAHAoTQAACi01K0ARmhGRbxUAAAaMJwAAAW9OAAAGKysRmhaMJwAA
AW9OAAAGKxwRmhaMJwAAAW9OAAAGKw0RmhaMJwAAAW9OAAAGEZkXWBOZEZkRmG+JAAAGb4EAAAY/
P/////4MLgFvhwAACjoC/P//3h3+DC4BdV8AAAH+Di8B/gwvASwJ/gwvAW+IAAAK3HIuCwBwE1o4
zj0AABFDbxoAAAZvHgAABhNKEUpy1w4AcG8mAAAGEVcRXZpy9AcAcG9JAAAKLHYRVxFdmheNPQAA
Af4OKQH+DCkBFh8knf4MKQFvTgAACheabyUAAApyZgQAcHLnAABwb0cAAApvSAAACnIDDwBwKE0A
AAosAxcTHhFXEV0RVxFdmheNPQAAAf4OKQH+DCkBFh8knf4MKQFvTgAAChaabyUAAAqiEVcRXZpy
Ew8AcG9JAAAKOaYAAAARFXIXDwBwb0kAAAosNxEVcicPAHARVxFdmheNPQAAAf4OKQH+DCkBFh8j
nf4MKQFvTgAACheabyUAAAooMwAAChMVKzURFXIXDwBwEVcRXZoXjT0AAAH+DikB/gwpARYfI53+
DCkBb04AAAoXmm8lAAAKKDMAAAoTFRFXEV0RVxFdmheNPQAAAf4OKQH+DCkBFh8jnf4MKQFvTgAA
ChaabyUAAAqiEUpvKQAABhObEZtvMAAABhFKcjMPAHARXYwnAAABKHMAAApvIwAABhFaJf4OLAE5
SQQAAP4Tfg4AAAQ6uwAAAB8Oc3AAAAolcsQIAHAWKHEAAAolctYKAHAXKHEAAAolcvgKAHAYKHEA
AAolchQLAHAZKHEAAAolci4LAHAaKHEAAAolckILAHAbKHEAAAolclALAHAcKHEAAAolcmgLAHAd
KHEAAAolcnoLAHAeKHEAAAolcoQLAHAfCShxAAAKJXL1AABwHwoocQAACiVylgsAcB8LKHEAAAol
cqILAHAfDChxAAAKJXK2CwBwHw0ocQAACv4TgA4AAAT+E34OAAAE/gwsAf4NLQEocgAACjlpAwAA
/gwtAUUOAAAABQAAAD8AAAB5AAAAswAAAO0AAAAnAQAAYgEAAJ0BAADXAQAAEQIAAEsCAACFAgAA
vAIAAPMCAAA4IwMAABFDbxsAAAZvUAAABhFEbygAAAYWjCcAAAFvUwAABhFKbycAAAYWjCcAAAFv
WwAABm9SAAAGOOkCAAARQ28bAAAGb1AAAAYRRm8oAAAGFownAAABb1MAAAYRSm8nAAAGFownAAAB
b1sAAAZvUgAABjivAgAAEUNvGwAABm9QAAAGEUdvKAAABhaMJwAAAW9TAAAGEUpvJwAABhaMJwAA
AW9bAAAGb1IAAAY4dQIAABFDbxsAAAZvUAAABhFIbygAAAYWjCcAAAFvUwAABhFKbycAAAYWjCcA
AAFvWwAABm9SAAAGODsCAAARQ28bAAAGb1AAAAYRSW8oAAAGFownAAABb1MAAAYRSm8nAAAGFown
AAABb1sAAAZvUgAABjgBAgAAEUNvGwAABm9QAAAGEUpvKAAABhEejCcAAAFvUwAABhFKbycAAAYW
jCcAAAFvWwAABm9SAAAGOMYBAAARQ28bAAAGb1AAAAYRS28oAAAGER+MJwAAAW9TAAAGEUpvJwAA
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
ACcBAABiAQAAnQEAANcBAAARAgAASwIAAIUCAAC/AgAA9gIAAC0DAAA4XQMAABFDbxsAAAZvUAAA
BhFEbygAAAYWjCcAAAFvUwAABhFLbycAAAYWjCcAAAFvWwAABm9SAAAGOCMDAAARQ28bAAAGb1AA
AAYRRm8oAAAGFownAAABb1MAAAYRS28nAAAGFownAAABb1sAAAZvUgAABjjpAgAAEUNvGwAABm9Q
AAAGEUdvKAAABhaMJwAAAW9TAAAGEUtvJwAABhaMJwAAAW9bAAAGb1IAAAY4rwIAABFDbxsAAAZv
UAAABhFIbygAAAYWjCcAAAFvUwAABhFLbycAAAYWjCcAAAFvWwAABm9SAAAGOHUCAAARQ28bAAAG
b1AAAAYRSW8oAAAGFownAAABb1MAAAYRS28nAAAGFownAAABb1sAAAZvUgAABjg7AgAAEUNvGwAA
Bm9QAAAGEUpvKAAABhEejCcAAAFvUwAABhFLbycAAAYWjCcAAAFvWwAABm9SAAAGOAACAAARQ28b
AAAGb1AAAAYRS28oAAAGER+MJwAAAW9TAAAGEUtvJwAABhaMJwAAAW9bAAAGb1IAAAY4xQEAABFD
bxsAAAZvUAAABhFNbygAAAYWjCcAAAFvUwAABhFLbycAAAYWjCcAAAFvWwAABm9SAAAGOIsBAAAR
Q28bAAAGb1AAAAYRTm8oAAAGFownAAABb1MAAAYRS28nAAAGFownAAABb1sAAAZvUgAABjhRAQAA
EUNvGwAABm9QAAAGEUxvKAAABhaMJwAAAW9TAAAGEUtvJwAABhaMJwAAAW9bAAAGb1IAAAY4FwEA
ABFDbxsAAAZvUAAABhFQbygAAAYWjCcAAAFvUwAABhFLbycAAAYWjCcAAAFvWwAABm9SAAAGON0A
AAARQ28bAAAGb1AAAAYRU28oAAAGFownAAABb1MAAAYRS28nAAAGFownAAABb1sAAAZvUgAABjij
AAAAEUNvGwAABm9QAAAGEVJvKAAABhaMJwAAAW9TAAAGEUtvJwAABhaMJwAAAW9bAAAGb1IAAAYr
bBFDbxsAAAZvUAAABhFRbygAAAYWjCcAAAFvUwAABhFLbycAAAYWjCcAAAFvWwAABm9SAAAGKzUR
Q28bAAAGb1AAAAYRVG8oAAAGFownAAABb1MAAAYRS28nAAAGFownAAABb1sAAAZvUgAABhFLbycA
AAYWjCcAAAFvWwAABhOtEa1vZQAABiYRrW9jAAAGJhGtb2IAAAYTrhGub2cAAAYTrxFXEV2aF409
AAAB/g4pAf4MKQEWH3yd/gwpAW9OAAAKE7ARsBaacncPAHBy5wAAcG9HAAAKF409AAAB/g4pAf4M
KQEWHz2d/gwpAW9OAAAKF5pvJQAAChOxEa9vagAABv4OLgEreP4MLgFvfwAACnQHAAACE7IRqhGt
b1wAAAYRrhGybxUAAAYWbzQAAAYTsxGybw0AAAYRsShNAAAKLD4RqhGtb1wAAAYRs29vAAAGcn8P
AHARsW84AAAGJhGqEa1vXAAABhGzb28AAAZyjxEAcBiMJwAAAW84AAAGJv4MLgFvhwAACjp6////
3h3+DC4BdV8AAAH+Di8B/gwvASwJ/gwvAW+IAAAK3BFLbygAAAYRH4wnAAABb1MAAAYTtBEVcicQ
AHByMRAAcG9HAAAKF409AAAB/g4pAf4MKQEWH36d/gwpAW9OAAAKFpoTtRG1ctkAAHBy5wAAcG9H
AAAKcmYEAHBy5wAAcG9HAAAKF409AAAB/g4pAf4MKQEWHyyd/gwpAW9OAAAKE7YRtv4OKgEW/g4r
ATiBAQAA/gwqAf4MKwGaE7kRuXKhEQBwb0kAAAo5+wAAABG5cqERAHByMRAAcG9HAAAKF409AAAB
/g4pAf4MKQEWH36d/gwpAW9OAAAKFppyRAYAcHLnAABwb0cAAApySAYAcHLnAABwb0cAAAoTtxG5
cqERAHByMRAAcG9HAAAKF409AAAB/g4pAf4MKQEWH36d/gwpAW9OAAAKF5pyRAYAcHLnAABwb0cA
AApySAYAcHLnAABwb0cAAApvJQAAChO4EbdvJQAAChO3EbdvJQAAChO6EaoRtG9UAAAGFxG4Ebpv
MgAABhO7EbsgggAAACD/AAAAFhYWb5EAAAYRqhG0b1QAAAYRu2+DAAAGcqsPAHARt285AAAGJitg
EbkTtxG5E7gRt28lAAAKE7cRt28lAAAKE7wRqhG0b1QAAAYXEbcRvG8yAAAGE70RvSCCAAAAIP8A
AAAWFhZvkQAABhGqEbRvVAAABhG9b4MAAAZyqw8AcBG3bzkAAAYm/gwrARdY/g4rAf4MKwH+DCoB
jmk/cP7//xGvb2oAAAb+Di4BOI4AAAD+DC4Bb38AAAp0BwAAAhO+Eb5vDQAABhGxKFsAAAosbhGq
EbRvVAAABhYRvm8NAAAGcucAAHBvMgAABhO/Eb8Rvm8QAAAGEb5vEQAABhG+bxIAAAYRvm8TAAAG
Eb5vFwAABm+RAAAGEaoRtG9UAAAGEb9vgwAABnKnEQBwEb5vFQAABownAAABbzkAAAYm/gwuAW+H
AAAKOmT////eHf4MLgF1XwAAAf4OLwH+DC8BLAn+DC8Bb4gAAArcclALAHATWjiyKgAABm9PAAAK
EVcRXZpvJQAAChZypgcAcBaMJwAAAW9QAAAKJhFDbxoAAAZvHgAABhNNEU1y3REAcG8mAAAGEU1y
DRIAcBFdjCcAAAEocwAACm8jAAAGEU1yLxIAcG8hAAAGEU1vKQAABhPAEcBvMAAABhHAclESAHAR
VxFdmm8lAAAKbzUAAAYmEVol/g4sATlJBAAA/hN+EAAABDq7AAAAHw5zcAAACiVyxAgAcBYocQAA
CiVy1goAcBcocQAACiVy+AoAcBgocQAACiVyFAsAcBkocQAACiVyLgsAcBoocQAACiVyQgsAcBso
cQAACiVyUAsAcBwocQAACiVyaAsAcB0ocQAACiVyegsAcB4ocQAACiVyhAsAcB8JKHEAAAolcvUA
AHAfCihxAAAKJXKWCwBwHwsocQAACiVyogsAcB8MKHEAAAolcrYLAHAfDShxAAAK/hOAEAAABP4T
fhAAAAT+DCwB/g0tAShyAAAKOWkDAAD+DC0BRQ4AAAAFAAAAPwAAAHkAAACzAAAA7QAAACcBAABi
AQAAnQEAANcBAAARAgAASwIAAIUCAAC8AgAA8wIAADgjAwAAEUNvGwAABm9QAAAGEURvKAAABhaM
JwAAAW9TAAAGEU1vJwAABhaMJwAAAW9bAAAGb1IAAAY46QIAABFDbxsAAAZvUAAABhFGbygAAAYW
jCcAAAFvUwAABhFNbycAAAYWjCcAAAFvWwAABm9SAAAGOK8CAAARQ28bAAAGb1AAAAYRR28oAAAG
FownAAABb1MAAAYRTW8nAAAGFownAAABb1sAAAZvUgAABjh1AgAAEUNvGwAABm9QAAAGEUhvKAAA
BhaMJwAAAW9TAAAGEU1vJwAABhaMJwAAAW9bAAAGb1IAAAY4OwIAABFDbxsAAAZvUAAABhFJbygA
AAYWjCcAAAFvUwAABhFNbycAAAYWjCcAAAFvWwAABm9SAAAGOAECAAARQ28bAAAGb1AAAAYRSm8o
AAAGER6MJwAAAW9TAAAGEU1vJwAABhaMJwAAAW9bAAAGb1IAAAY4xgEAABFDbxsAAAZvUAAABhFL
bygAAAYRH4wnAAABb1MAAAYRTW8nAAAGFownAAABb1sAAAZvUgAABjiLAQAAEUNvGwAABm9QAAAG
EU1vKAAABhaMJwAAAW9TAAAGEU1vJwAABhaMJwAAAW9bAAAGb1IAAAY4UQEAABFDbxsAAAZvUAAA
BhFObygAAAYWjCcAAAFvUwAABhFNbycAAAYWjCcAAAFvWwAABm9SAAAGOBcBAAARQ28bAAAGb1AA
AAYRTG8oAAAGFownAAABb1MAAAYRTW8nAAAGFownAAABb1sAAAZvUgAABjjdAAAAEUNvGwAABm9Q
AAAGEVBvKAAABhaMJwAAAW9TAAAGEU1vJwAABhaMJwAAAW9bAAAGb1IAAAY4owAAABFDbxsAAAZv
UAAABhFRbygAAAYWjCcAAAFvUwAABhFNbycAAAYWjCcAAAFvWwAABm9SAAAGK2wRQ28bAAAGb1AA
AAYRUm8oAAAGFownAAABb1MAAAYRTW8nAAAGFownAAABb1sAAAZvUgAABis1EUNvGwAABm9QAAAG
EVRvKAAABhaMJwAAAW9TAAAGEU1vJwAABhaMJwAAAW9bAAAGb1IAAAZyaAsAcBNaOMolAAARVxFd
mheNPQAAAf4OKQH+DCkBFh8gnf4MKQFvTgAAChaabyUAAAoTwRFXEV2aF409AAAB/g4pAf4MKQEW
HyCd/gwpAW9OAAAKF5pvJQAAChPCEUNvGgAABm8eAAAGE04RTnJrEgBwbyYAAAYRTm8pAAAGE8MR
w28wAAAGEU5ykxIAcBFdjCcAAAEocwAACm8jAAAGEU5ysRIAcG8hAAAGEVol/g4sATlJBAAA/hN+
EQAABDq7AAAAHw5zcAAACiVyxAgAcBYocQAACiVy1goAcBcocQAACiVy+AoAcBgocQAACiVyFAsA
cBkocQAACiVyLgsAcBoocQAACiVyQgsAcBsocQAACiVyUAsAcBwocQAACiVyaAsAcB0ocQAACiVy
egsAcB4ocQAACiVyhAsAcB8JKHEAAAolcvUAAHAfCihxAAAKJXKWCwBwHwsocQAACiVyogsAcB8M
KHEAAAolcrYLAHAfDShxAAAK/hOAEQAABP4TfhEAAAT+DCwB/g0tAShyAAAKOWkDAAD+DC0BRQ4A
AAAFAAAAPwAAAHkAAACzAAAA7QAAACcBAABiAQAAnQEAANcBAAARAgAASwIAAIUCAAC8AgAA8wIA
ADgjAwAAEUNvGwAABm9QAAAGEURvKAAABhaMJwAAAW9TAAAGEU5vJwAABhaMJwAAAW9bAAAGb1IA
AAY46QIAABFDbxsAAAZvUAAABhFGbygAAAYWjCcAAAFvUwAABhFObycAAAYWjCcAAAFvWwAABm9S
AAAGOK8CAAARQ28bAAAGb1AAAAYRR28oAAAGFownAAABb1MAAAYRTm8nAAAGFownAAABb1sAAAZv
UgAABjh1AgAAEUNvGwAABm9QAAAGEUhvKAAABhaMJwAAAW9TAAAGEU5vJwAABhaMJwAAAW9bAAAG
b1IAAAY4OwIAABFDbxsAAAZvUAAABhFJbygAAAYWjCcAAAFvUwAABhFObycAAAYWjCcAAAFvWwAA
Bm9SAAAGOAECAAARQ28bAAAGb1AAAAYRSm8oAAAGER6MJwAAAW9TAAAGEU5vJwAABhaMJwAAAW9b
AAAGb1IAAAY4xgEAABFDbxsAAAZvUAAABhFLbygAAAYRH4wnAAABb1MAAAYRTm8nAAAGFownAAAB
b1sAAAZvUgAABjiLAQAAEUNvGwAABm9QAAAGEU1vKAAABhaMJwAAAW9TAAAGEU5vJwAABhaMJwAA
AW9bAAAGb1IAAAY4UQEAABFDbxsAAAZvUAAABhFObygAAAYWjCcAAAFvUwAABhFObycAAAYWjCcA
AAFvWwAABm9SAAAGOBcBAAARQ28bAAAGb1AAAAYRTG8oAAAGFownAAABb1MAAAYRTm8nAAAGFown
AAABb1sAAAZvUgAABjjdAAAAEUNvGwAABm9QAAAGEVBvKAAABhaMJwAAAW9TAAAGEU5vJwAABhaM
JwAAAW9bAAAGb1IAAAY4owAAABFDbxsAAAZvUAAABhFRbygAAAYWjCcAAAFvUwAABhFObycAAAYW
jCcAAAFvWwAABm9SAAAGK2wRQ28bAAAGb1AAAAYRUm8oAAAGFownAAABb1MAAAYRTm8nAAAGFown
AAABb1sAAAZvUgAABis1EUNvGwAABm9QAAAGEVRvKAAABhaMJwAAAW9TAAAGEU5vJwAABhaMJwAA
AW9bAAAGb1IAAAYRwReNPQAAAf4OKQH+DCkBFh8snf4MKQFvTgAAChPEFBPFEU5vJwAABhaMJwAA
AW9bAAAGb2IAAAYTxhcTxxHE/g4qARb+DisBOA8BAAD+DCoB/gwrAZoTyBHGb2cAAAZvagAABv4O
LgE4uAAAAP4MLgFvfwAACnQHAAACE8kRyW8NAAAGEchvJQAACihNAAAKOZAAAAARwxFObycAAAYW
jCcAAAFvWwAABm9cAAAGEcYRyW8VAAAGFm80AAAGE8URwm9IAAAKcs0SAHAoTQAACiwIFRHHWhPK
KwQRxxPKEcVvdgAABm+BAAAGFjE4EcMRTm8nAAAGFownAAABb1sAAAZvXAAABhHFb28AAAZy1xIA
cBHKjCcAAAFvOAAABiYRxxdYE8f+DC4Bb4cAAAo6Ov///94d/gwuAXVfAAAB/g4vAf4MLwEsCf4M
LwFviAAACtz+DCsBF1j+DisB/gwrAf4MKgGOaT/i/v//EcZvZwAABm9qAAAG/g4uAStK/gwuAW9/
AAAKdAcAAAITyxHBEctvDQAABm9JAAAKLSoRwxFObycAAAYWjCcAAAFvWwAABm9cAAAGEcYRy28V
AAAGFm80AAAGE8X+DC4Bb4cAAAotq94d/gwuAXVfAAAB/g4vAf4MLwEsCf4MLwFviAAACtwRVhFd
mnJkCQBwKE0AAAosFRHDcv0SAHAXjCcAAAFvNQAABiYrExHDcv0SAHAWjCcAAAFvNQAABiZyegsA
cBNaOJ4eAAARQ28aAAAGbx4AAAYTTBFMciUTAHBvJgAABhFMbykAAAYTzBHMbzAAAAYRTHJVEwBw
EV2MJwAAAShzAAAKbyMAAAYRWiX+DiwBOUkEAAD+E34SAAAEOrsAAAAfDnNwAAAKJXLECABwFihx
AAAKJXLWCgBwFyhxAAAKJXL4CgBwGChxAAAKJXIUCwBwGShxAAAKJXIuCwBwGihxAAAKJXJCCwBw
GyhxAAAKJXJQCwBwHChxAAAKJXJoCwBwHShxAAAKJXJ6CwBwHihxAAAKJXKECwBwHwkocQAACiVy
9QAAcB8KKHEAAAolcpYLAHAfCyhxAAAKJXKiCwBwHwwocQAACiVytgsAcB8NKHEAAAr+E4ASAAAE
/hN+EgAABP4MLAH+DS0BKHIAAAo5aQMAAP4MLQFFDgAAAAUAAAA/AAAAeQAAALMAAADtAAAAJwEA
AGIBAACdAQAA1wEAABECAABLAgAAhQIAALwCAADzAgAAOCMDAAARQ28bAAAGb1AAAAYRRG8oAAAG
FownAAABb1MAAAYRTG8nAAAGFownAAABb1sAAAZvUgAABjjpAgAAEUNvGwAABm9QAAAGEUZvKAAA
BhaMJwAAAW9TAAAGEUxvJwAABhaMJwAAAW9bAAAGb1IAAAY4rwIAABFDbxsAAAZvUAAABhFHbygA
AAYWjCcAAAFvUwAABhFMbycAAAYWjCcAAAFvWwAABm9SAAAGOHUCAAARQ28bAAAGb1AAAAYRSG8o
AAAGFownAAABb1MAAAYRTG8nAAAGFownAAABb1sAAAZvUgAABjg7AgAAEUNvGwAABm9QAAAGEUlv
KAAABhaMJwAAAW9TAAAGEUxvJwAABhaMJwAAAW9bAAAGb1IAAAY4AQIAABFDbxsAAAZvUAAABhFK
bygAAAYRHownAAABb1MAAAYRTG8nAAAGFownAAABb1sAAAZvUgAABjjGAQAAEUNvGwAABm9QAAAG
EUtvKAAABhEfjCcAAAFvUwAABhFMbycAAAYWjCcAAAFvWwAABm9SAAAGOIsBAAARQ28bAAAGb1AA
AAYRTW8oAAAGFownAAABb1MAAAYRTG8nAAAGFownAAABb1sAAAZvUgAABjhRAQAAEUNvGwAABm9Q
AAAGEU5vKAAABhaMJwAAAW9TAAAGEUxvJwAABhaMJwAAAW9bAAAGb1IAAAY4FwEAABFDbxsAAAZv
UAAABhFMbygAAAYWjCcAAAFvUwAABhFMbycAAAYWjCcAAAFvWwAABm9SAAAGON0AAAARQ28bAAAG
b1AAAAYRUG8oAAAGFownAAABb1MAAAYRTG8nAAAGFownAAABb1sAAAZvUgAABjijAAAAEUNvGwAA
Bm9QAAAGEVFvKAAABhaMJwAAAW9TAAAGEUxvJwAABhaMJwAAAW9bAAAGb1IAAAYrbBFDbxsAAAZv
UAAABhFSbygAAAYWjCcAAAFvUwAABhFMbycAAAYWjCcAAAFvWwAABm9SAAAGKzURQ28bAAAGb1AA
AAYRVG8oAAAGFownAAABb1MAAAYRTG8nAAAGFownAAABb1sAAAZvUgAABnKECwBwE1o4+xkAABFD
bxoAAAZvHgAABhNREVFyexMAcG8mAAAGEVFvKQAABhPNEc1vMAAABhFRcqUTAHARXYwnAAABKHMA
AApvIwAABhFVbygAAAYWjCcAAAFvUwAABhdvWgAABhFVbygAAAYWjCcAAAFvUwAABm9XAAAGFown
AAABb2sAAAYXb48AAAYRWiX+DiwBOUkEAAD+E34TAAAEOrsAAAAfDnNwAAAKJXLECABwFihxAAAK
JXLWCgBwFyhxAAAKJXL4CgBwGChxAAAKJXIUCwBwGShxAAAKJXIuCwBwGihxAAAKJXJCCwBwGyhx
AAAKJXJQCwBwHChxAAAKJXJoCwBwHShxAAAKJXJ6CwBwHihxAAAKJXKECwBwHwkocQAACiVy9QAA
cB8KKHEAAAolcpYLAHAfCyhxAAAKJXKiCwBwHwwocQAACiVytgsAcB8NKHEAAAr+E4ATAAAE/hN+
EwAABP4MLAH+DS0BKHIAAAo5aQMAAP4MLQFFDgAAAAUAAAA/AAAAeQAAALMAAADtAAAAJwEAAGIB
AACdAQAA1wEAABECAABLAgAAhQIAALwCAADzAgAAOCMDAAARQ28bAAAGb1AAAAYRRG8oAAAGFown
AAABb1MAAAYRUW8nAAAGFownAAABb1sAAAZvUgAABjjpAgAAEUNvGwAABm9QAAAGEUZvKAAABhaM
JwAAAW9TAAAGEVFvJwAABhaMJwAAAW9bAAAGb1IAAAY4rwIAABFDbxsAAAZvUAAABhFHbygAAAYW
jCcAAAFvUwAABhFRbycAAAYWjCcAAAFvWwAABm9SAAAGOHUCAAARQ28bAAAGb1AAAAYRSG8oAAAG
FownAAABb1MAAAYRUW8nAAAGFownAAABb1sAAAZvUgAABjg7AgAAEUNvGwAABm9QAAAGEUlvKAAA
BhaMJwAAAW9TAAAGEVFvJwAABhaMJwAAAW9bAAAGb1IAAAY4AQIAABFDbxsAAAZvUAAABhFKbygA
AAYRHownAAABb1MAAAYRUW8nAAAGFownAAABb1sAAAZvUgAABjjGAQAAEUNvGwAABm9QAAAGEUtv
KAAABhEfjCcAAAFvUwAABhFRbycAAAYWjCcAAAFvWwAABm9SAAAGOIsBAAARQ28bAAAGb1AAAAYR
TW8oAAAGFownAAABb1MAAAYRUW8nAAAGFownAAABb1sAAAZvUgAABjhRAQAAEUNvGwAABm9QAAAG
EU5vKAAABhaMJwAAAW9TAAAGEVFvJwAABhaMJwAAAW9bAAAGb1IAAAY4FwEAABFDbxsAAAZvUAAA
BhFMbygAAAYWjCcAAAFvUwAABhFRbycAAAYWjCcAAAFvWwAABm9SAAAGON0AAAARQ28bAAAGb1AA
AAYRUG8oAAAGFownAAABb1MAAAYRUW8nAAAGFownAAABb1sAAAZvUgAABjijAAAAEUNvGwAABm9Q
AAAGEVFvKAAABhaMJwAAAW9TAAAGEVFvJwAABhaMJwAAAW9bAAAGb1IAAAYrbBFDbxsAAAZvUAAA
BhFSbygAAAYWjCcAAAFvUwAABhFRbycAAAYWjCcAAAFvWwAABm9SAAAGKzURQ28bAAAGb1AAAAYR
VG8oAAAGFownAAABb1MAAAYRUW8nAAAGFownAAABb1sAAAZvUgAABhFDbxsAAAZvUAAABhFVbygA
AAYWjCcAAAFvUwAABhFRbycAAAYXjCcAAAFvWwAABm9SAAAGcpYLAHATWjjjFAAAEUNvGgAABm8e
AAAGE1ARUHLLEwBwbyYAAAYRUG8pAAAGE84Rzm8wAAAGEVByAxQAcBFdjCcAAAEocwAACm8jAAAG
EVol/g4sATlJBAAA/hN+FAAABDq7AAAAHw5zcAAACiVyxAgAcBYocQAACiVy1goAcBcocQAACiVy
+AoAcBgocQAACiVyFAsAcBkocQAACiVyLgsAcBoocQAACiVyQgsAcBsocQAACiVyUAsAcBwocQAA
CiVyaAsAcB0ocQAACiVyegsAcB4ocQAACiVyhAsAcB8JKHEAAAolcvUAAHAfCihxAAAKJXKiCwBw
HwsocQAACiVylgsAcB8MKHEAAAolcrYLAHAfDShxAAAK/hOAFAAABP4TfhQAAAT+DCwB/g0tAShy
AAAKOWkDAAD+DC0BRQ4AAAAFAAAAPwAAAHkAAACzAAAA7QAAACcBAABiAQAAnQEAANcBAAARAgAA
SwIAAIUCAAC8AgAA8wIAADgjAwAAEUNvGwAABm9QAAAGEURvKAAABhaMJwAAAW9TAAAGEVBvJwAA
BhaMJwAAAW9bAAAGb1IAAAY46QIAABFDbxsAAAZvUAAABhFGbygAAAYWjCcAAAFvUwAABhFQbycA
AAYWjCcAAAFvWwAABm9SAAAGOK8CAAARQ28bAAAGb1AAAAYRR28oAAAGFownAAABb1MAAAYRUG8n
AAAGFownAAABb1sAAAZvUgAABjh1AgAAEUNvGwAABm9QAAAGEUhvKAAABhaMJwAAAW9TAAAGEVBv
JwAABhaMJwAAAW9bAAAGb1IAAAY4OwIAABFDbxsAAAZvUAAABhFJbygAAAYWjCcAAAFvUwAABhFQ
bycAAAYWjCcAAAFvWwAABm9SAAAGOAECAAARQ28bAAAGb1AAAAYRSm8oAAAGER6MJwAAAW9TAAAG
EVBvJwAABhaMJwAAAW9bAAAGb1IAAAY4xgEAABFDbxsAAAZvUAAABhFLbygAAAYRH4wnAAABb1MA
AAYRUG8nAAAGFownAAABb1sAAAZvUgAABjiLAQAAEUNvGwAABm9QAAAGEU1vKAAABhaMJwAAAW9T
AAAGEVBvJwAABhaMJwAAAW9bAAAGb1IAAAY4UQEAABFDbxsAAAZvUAAABhFObygAAAYWjCcAAAFv
UwAABhFQbycAAAYWjCcAAAFvWwAABm9SAAAGOBcBAAARQ28bAAAGb1AAAAYRTG8oAAAGFownAAAB
b1MAAAYRUG8nAAAGFownAAABb1sAAAZvUgAABjjdAAAAEUNvGwAABm9QAAAGEVBvKAAABhaMJwAA
AW9TAAAGEVBvJwAABhaMJwAAAW9bAAAGb1IAAAY4owAAABFDbxsAAAZvUAAABhFSbygAAAYWjCcA
AAFvUwAABhFQbycAAAYWjCcAAAFvWwAABm9SAAAGK2wRQ28bAAAGb1AAAAYRUW8oAAAGFownAAAB
b1MAAAYRUG8nAAAGFownAAABb1sAAAZvUgAABis1EUNvGwAABm9QAAAGEVRvKAAABhaMJwAAAW9T
AAAGEVBvJwAABhaMJwAAAW9bAAAGb1IAAAYRUG8sAAAGb0MAAAYWMTwRUG8sAAAGFownAAABb0EA
AAYRNShoAAAKb0gAAAYRUG8sAAAGFownAAABb0EAAAYRNW9qAAAKb0YAAAYRznKuCABwEVcRXZpv
JQAACm81AAAGJnL1AABwE1o43g8AABFDbxoAAAZvHgAABhNVEVVyTggAcG8mAAAGEVVvKQAABhPP
Ec9vMAAABhFVciMUAHBvIwAABhFVciMUAHBvIQAABhFDbxoAAAZyIxQAcG8cAAAGE9AR0HI9FABw
byMAAAYRVW8sAAAGb0MAAAYWMTwRVW8sAAAGFownAAABb0EAAAYRNChoAAAKb0gAAAYRVW8sAAAG
FownAAABb0EAAAYRNG9qAAAKb0YAAAZyWRQAcBPREVcRXZoXjT0AAAH+DikB/gwpARYfPZ3+DCkB
b04AAAoT0hHSFpoXjT0AAAH+DikB/gwpARYfLp3+DCkBb04AAAoT0xHTF5oT0REUb0gAAApyZxQA
cG9JAAAKLRARFHJ5FABwEdEoMwAAChMUEc9ymAgAcBiMJwAAAW81AAAGJhHPcq4IAHARFG81AAAG
JhHPFG89AAAGEc9vMQAABhHPbz4AAAYRQ28aAAAGbx4AAAYTTxFPcmsSAHBvJgAABhFPbykAAAYT
1BHUbzAAAAYRT3KPFABwbyMAAAYRT3KPFABwbyEAAAYRT3K1FABwby8AAAYRWiX+DiwBOf0DAAD+
E34VAAAEOq4AAAAfDXNwAAAKJXLECABwFihxAAAKJXLWCgBwFyhxAAAKJXL4CgBwGChxAAAKJXIU
CwBwGShxAAAKJXIuCwBwGihxAAAKJXJCCwBwGyhxAAAKJXJoCwBwHChxAAAKJXJ6CwBwHShxAAAK
JXKECwBwHihxAAAKJXL1AABwHwkocQAACiVylgsAcB8KKHEAAAolcqILAHAfCyhxAAAKJXK2CwBw
HwwocQAACv4TgBUAAAT+E34VAAAE/gwsAf4NLQEocgAACjkqAwAA/gwtAUUNAAAABQAAAD8AAAB5
AAAAswAAAO0AAAAnAQAAYgEAAJwBAADWAQAAEAIAAEoCAACBAgAAuAIAADjoAgAAEUNvGwAABm9Q
AAAGEURvKAAABhaMJwAAAW9TAAAGEU9vJwAABhaMJwAAAW9bAAAGb1IAAAY4rgIAABFDbxsAAAZv
UAAABhFGbygAAAYWjCcAAAFvUwAABhFPbycAAAYWjCcAAAFvWwAABm9SAAAGOHQCAAARQ28bAAAG
b1AAAAYRR28oAAAGFownAAABb1MAAAYRT28nAAAGFownAAABb1sAAAZvUgAABjg6AgAAEUNvGwAA
Bm9QAAAGEUhvKAAABhaMJwAAAW9TAAAGEU9vJwAABhaMJwAAAW9bAAAGb1IAAAY4AAIAABFDbxsA
AAZvUAAABhFJbygAAAYWjCcAAAFvUwAABhFPbycAAAYWjCcAAAFvWwAABm9SAAAGOMYBAAARQ28b
AAAGb1AAAAYRSm8oAAAGER6MJwAAAW9TAAAGEU9vJwAABhaMJwAAAW9bAAAGb1IAAAY4iwEAABFD
bxsAAAZvUAAABhFNbygAAAYWjCcAAAFvUwAABhFPbycAAAYWjCcAAAFvWwAABm9SAAAGOFEBAAAR
Q28bAAAGb1AAAAYRTm8oAAAGFownAAABb1MAAAYRT28nAAAGFownAAABb1sAAAZvUgAABjgXAQAA
EUNvGwAABm9QAAAGEUxvKAAABhaMJwAAAW9TAAAGEU9vJwAABhaMJwAAAW9bAAAGb1IAAAY43QAA
ABFDbxsAAAZvUAAABhFQbygAAAYWjCcAAAFvUwAABhFPbycAAAYWjCcAAAFvWwAABm9SAAAGOKMA
AAARQ28bAAAGb1AAAAYRUW8oAAAGFownAAABb1MAAAYRT28nAAAGFownAAABb1sAAAZvUgAABits
EUNvGwAABm9QAAAGEVJvKAAABhaMJwAAAW9TAAAGEU9vJwAABhaMJwAAAW9bAAAGb1IAAAYrNRFD
bxsAAAZvUAAABhFUbygAAAYWjCcAAAFvUwAABhFPbycAAAYWjCcAAAFvWwAABm9SAAAGEU9vJwAA
BhaMJwAAAW9bAAAGb2IAAAYT1RQT1hHVb2cAAAZvagAABv4OLgE4jwAAAP4MLgFvfwAACnQHAAAC
E9cR128NAAAGEdFvJQAACihNAAAKLGoR1BFPbycAAAYWjCcAAAFvWwAABm9cAAAGEdUR128VAAAG
Fm80AAAGE9YR1m92AAAGb4EAAAYWMTER1BFPbycAAAYWjCcAAAFvWwAABm9cAAAGEdZvbwAABnLX
EgBwF4wnAAABbzgAAAYm/gwuAW+HAAAKOmP////eHf4MLgF1XwAAAf4OLwH+DC8BLAn+DC8Bb4gA
AArcEdVvZwAABm9qAAAG/g4uAStK/gwuAW9/AAAKdAcAAAIT2BHREdhvDQAABm9JAAAKLSoR1BFP
bycAAAYWjCcAAAFvWwAABm9cAAAGEdUR2G8VAAAGFm80AAAGE9b+DC4Bb4cAAAotq94d/gwuAXVf
AAAB/g4vAf4MLwEsCf4MLwFviAAACtwR1HL9EgBwF4wnAAABbzUAAAYmEUNvGgAABm8eAAAGE1IR
UnLBFABwbyYAAAYRUnLzFABwbyMAAAYRUm8pAAAGE9kR2W8wAAAGEUNvGwAABm9QAAAGEU9vKAAA
BhaMJwAAAW9TAAAGEVJvJwAABhaMJwAAAW9bAAAGb1IAAAYRQ28bAAAGb1AAAAYRVW8oAAAGFown
AAABb1MAAAYRUm8nAAAGF4wnAAABb1sAAAZvUgAABhFPbygAAAYWjCcAAAFvUwAABhdvWgAABhFP
bygAAAYWjCcAAAFvUwAABm9XAAAGFownAAABb2sAAAYXb48AAAYRUm8nAAAGFownAAABb1sAAAZv
ZQAABhZvegAABhFSbycAAAYWjCcAAAFvWwAABhZvYAAABhFVbygAAAYWjCcAAAFvUwAABhdvWgAA
BhFVbygAAAYWjCcAAAFvUwAABm9XAAAGFownAAABb2sAAAYXb48AAAYRUm8nAAAGF4wnAAABb1sA
AAZvZQAABhZvegAABhFSbycAAAYXjCcAAAFvWwAABhZvYAAABhFSbycAAAYWjCcAAAFvWwAABhPa
EdpvYgAABhPbFhPcEdtvZwAABm9qAAAG/g4uASs9/gwuAW9/AAAKdAcAAAIT3RHZEdpvXAAABhHb
Ed1vFQAABhZvNAAABiYR3W8YAAAGEdwxCRHdbxgAAAYT3P4MLgFvhwAACi243h3+DC4BdV8AAAH+
Di8B/gwvASwJ/gwvAW+IAAAK3BFSbycAAAYXjCcAAAFvWwAABhPeEd5vYgAABhPfEd9vZwAABm9q
AAAG/g4uAStN/gwuAW9/AAAKdAcAAAIT4BHREeBvDQAABm9JAAAKLS0R2RHeb1wAAAYR3xHgbxUA
AAYWbzQAAAYmEeBvGAAABhHcMQkR4G8YAAAGE9z+DC4Bb4cAAAotqN4d/gwuAXVfAAAB/g4vAf4M
LwEsCf4MLwFviAAACtwRUm8qAAAGFownAAABb38AAAYT4RHhGIwnAAABb04AAAYRUm8qAAAGF4wn
AAABb38AAAYT4hHiF4wnAAABb04AAAYRUm8oAAAGFownAAABb1MAAAYT4xHjb1cAAAZvbQAABhhb
E+QrVxHREeNvVwAABhHkjCcAAAFvawAABm+GAAAGb0kAAAotMBHjb1cAAAYR5IwnAAABb2sAAAYR
429XAAAGEeSMJwAAAW9rAAAGb4YAAAZvhwAABhHkF1gT5BHkEeNvVwAABm9tAAAGMpkR2XKPEQBw
F4wnAAABbzUAAAYmEdkUbz0AAAYR2W8xAAAGEdlvPgAABnKiCwBwE1o43QQAABFDbxoAAAZvHgAA
BhNUEVRy/xQAcG8mAAAGEVRvKQAABhPlEeVvMAAABhFUcjEVAHARXYwnAAABKHMAAApvIwAABhFU
ckcVAHBvIQAABhFXEV2aE1tyQggAcBNYEVol/g4sATlJBAAA/hN+FgAABDq7AAAAHw5zcAAACiVy
xAgAcBYocQAACiVy1goAcBcocQAACiVy+AoAcBgocQAACiVyFAsAcBkocQAACiVyLgsAcBoocQAA
CiVyQgsAcBsocQAACiVyUAsAcBwocQAACiVyaAsAcB0ocQAACiVyegsAcB4ocQAACiVyhAsAcB8J
KHEAAAolcvUAAHAfCihxAAAKJXKWCwBwHwsocQAACiVyogsAcB8MKHEAAAolcrYLAHAfDShxAAAK
/hOAFgAABP4TfhYAAAT+DCwB/g0tAShyAAAKOWkDAAD+DC0BRQ4AAAAFAAAAPwAAAHkAAACzAAAA
7QAAACcBAABiAQAAnQEAANcBAAARAgAASwIAAIUCAAC8AgAA8wIAADgjAwAAEUNvGwAABm9QAAAG
EURvKAAABhaMJwAAAW9TAAAGEVRvJwAABhaMJwAAAW9bAAAGb1IAAAY46QIAABFDbxsAAAZvUAAA
BhFGbygAAAYWjCcAAAFvUwAABhFUbycAAAYWjCcAAAFvWwAABm9SAAAGOK8CAAARQ28bAAAGb1AA
AAYRR28oAAAGFownAAABb1MAAAYRVG8nAAAGFownAAABb1sAAAZvUgAABjh1AgAAEUNvGwAABm9Q
AAAGEUhvKAAABhaMJwAAAW9TAAAGEVRvJwAABhaMJwAAAW9bAAAGb1IAAAY4OwIAABFDbxsAAAZv
UAAABhFJbygAAAYWjCcAAAFvUwAABhFUbycAAAYWjCcAAAFvWwAABm9SAAAGOAECAAARQ28bAAAG
b1AAAAYRSm8oAAAGER6MJwAAAW9TAAAGEVRvJwAABhaMJwAAAW9bAAAGb1IAAAY4xgEAABFDbxsA
AAZvUAAABhFLbygAAAYRH4wnAAABb1MAAAYRVG8nAAAGFownAAABb1sAAAZvUgAABjiLAQAAEUNv
GwAABm9QAAAGEU1vKAAABhaMJwAAAW9TAAAGEVRvJwAABhaMJwAAAW9bAAAGb1IAAAY4UQEAABFD
bxsAAAZvUAAABhFObygAAAYWjCcAAAFvUwAABhFUbycAAAYWjCcAAAFvWwAABm9SAAAGOBcBAAAR
Q28bAAAGb1AAAAYRTG8oAAAGFownAAABb1MAAAYRVG8nAAAGFownAAABb1sAAAZvUgAABjjdAAAA
EUNvGwAABm9QAAAGEVBvKAAABhaMJwAAAW9TAAAGEVRvJwAABhaMJwAAAW9bAAAGb1IAAAY4owAA
ABFDbxsAAAZvUAAABhFRbygAAAYWjCcAAAFvUwAABhFUbycAAAYWjCcAAAFvWwAABm9SAAAGK2wR
Q28bAAAGb1AAAAYRUm8oAAAGFownAAABb1MAAAYRVG8nAAAGFownAAABb1sAAAZvUgAABis1EUNv
GwAABm9QAAAGEVRvKAAABhaMJwAAAW9TAAAGEVRvJwAABhaMJwAAAW9bAAAGb1IAAAYRVG8nAAAG
FownAAABb1sAAAYT5hHmb2IAAAYT5xHnb2cAAAYmcrYLAHATWhFdF1gTXRFdEVaOaT+Rnf//FhPo
ERYXjT0AAAH+DikB/gwpARYfLp3+DCkBb04AAAoXmnJEBgBwcucAAHBvRwAACnJIBgBwcucAAHBv
RwAAChPpEekXjT0AAAH+DikB/gwpARYfLJ3+DCkBb04AAAoT6hHq/g4qARb+DisBOB8LAAD+DCoB
/gwrAZoT6xFDbxoAAAZvHgAABhPsEexyWxUAcG8mAAAGEexvKQAABhPtEe1vMAAABhHscpEVAHBv
IQAABhHscsUVAHAR6IwnAAABKHMAAApvIwAABhHoFjEHctYKAHATWnM1AAAKE+5zNgAAChPvEVol
/g4sATmVBAAA/hN+FwAABDrIAAAAHw9zcAAACiVyxAgAcBYocQAACiVy1goAcBcocQAACiVy+AoA
cBgocQAACiVyFAsAcBkocQAACiVyLgsAcBoocQAACiVyQgsAcBsocQAACiVyUAsAcBwocQAACiVy
aAsAcB0ocQAACiVyegsAcB4ocQAACiVyhAsAcB8JKHEAAAolcvUAAHAfCihxAAAKJXJ5EQBwHwso
cQAACiVyogsAcB8MKHEAAAolcpYLAHAfDShxAAAKJXK2CwBwHw4ocQAACv4TgBcAAAT+E34XAAAE
/gwsAf4NLQEocgAACjmoAwAA/gwtAUUPAAAABQAAAD8AAAB6AAAAtAAAAO4AAAAoAQAAYwEAAJ4B
AADYAQAAEgIAAEwCAACGAgAAwAIAAPcCAAAuAwAAOF4DAAARQ28bAAAGb1AAAAYRRG8oAAAGFown
AAABb1MAAAYR7G8nAAAGFownAAABb1sAAAZvUgAABjgkAwAAEUNvGwAABm9QAAAGEUZvKAAABhHo
jCcAAAFvUwAABhHsbycAAAYWjCcAAAFvWwAABm9SAAAGOOkCAAARQ28bAAAGb1AAAAYRR28oAAAG
FownAAABb1MAAAYR7G8nAAAGFownAAABb1sAAAZvUgAABjivAgAAEUNvGwAABm9QAAAGEUhvKAAA
BhaMJwAAAW9TAAAGEexvJwAABhaMJwAAAW9bAAAGb1IAAAY4dQIAABFDbxsAAAZvUAAABhFJbygA
AAYWjCcAAAFvUwAABhHsbycAAAYWjCcAAAFvWwAABm9SAAAGODsCAAARQ28bAAAGb1AAAAYRSm8o
AAAGER6MJwAAAW9TAAAGEexvJwAABhaMJwAAAW9bAAAGb1IAAAY4AAIAABFDbxsAAAZvUAAABhFL
bygAAAYRH4wnAAABb1MAAAYR7G8nAAAGFownAAABb1sAAAZvUgAABjjFAQAAEUNvGwAABm9QAAAG
EU1vKAAABhaMJwAAAW9TAAAGEexvJwAABhaMJwAAAW9bAAAGb1IAAAY4iwEAABFDbxsAAAZvUAAA
BhFObygAAAYWjCcAAAFvUwAABhHsbycAAAYWjCcAAAFvWwAABm9SAAAGOFEBAAARQ28bAAAGb1AA
AAYRTG8oAAAGFownAAABb1MAAAYR7G8nAAAGFownAAABb1sAAAZvUgAABjgXAQAAEUNvGwAABm9Q
AAAGEVBvKAAABhaMJwAAAW9TAAAGEexvJwAABhaMJwAAAW9bAAAGb1IAAAY43QAAABFDbxsAAAZv
UAAABhFTbygAAAYWjCcAAAFvUwAABhHsbycAAAYWjCcAAAFvWwAABm9SAAAGOKMAAAARQ28bAAAG
b1AAAAYRUm8oAAAGFownAAABb1MAAAYR7G8nAAAGFownAAABb1sAAAZvUgAABitsEUNvGwAABm9Q
AAAGEVFvKAAABhaMJwAAAW9TAAAGEexvJwAABhaMJwAAAW9bAAAGb1IAAAYrNRFDbxsAAAZvUAAA
BhFUbygAAAYWjCcAAAFvUwAABhHsbycAAAYWjCcAAAFvWwAABm9SAAAGEe8RHXIaBgBwcucAAHBv
RwAACm83AAAKEe4R7284AAAKEe4XbzkAAAoR7nLzFQBwEetyxgYAcCgzAAAKbzoAAApzQAAAChPw
c0EAAAomEe9vQgAACi0HEe9vQwAAChHwEe5vRAAAChQT8RHub0UAAAoT8RYT8jjIAgAAEfFyxhcA
cG9GAAAKdBwAAAET8xHxct4XAHBvRgAACnQcAAABE/QR8XLyFwBwb0YAAAqlJwAAARP1EfFyJBgA
cG9GAAAKKLoAAAoT9hHxckgYAHBvRgAACii6AAAKE/cR7G8nAAAGFownAAABb1sAAAZvYgAABhP4
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
HQAAAAAAAAACAAAAxUcAAKMAAABoSAAAHQAAAAAAAAACAAAA11IAAM0AAACkUwAAHQAAAAAAAAAC
AAAA6lMAAFkAAABDVAAAHQAAAAAAAAACAAAAP2kAAKQAAADjaQAAHQAAAAAAAAACAAAAEGoAAFkA
AABpagAAHQAAAAAAAAACAAAAU2wAAEwAAACfbAAAHQAAAAAAAAACAAAA6WwAAFwAAABFbQAAHQAA
AAAAAAAAAAAAVHkAAMUCAAAZfAAAAwAAAGsAAAEAAAAA430AAHEAAABUfgAAUwAAAGsAAAECAAAA
zH0AAOsAAAC3fgAAHQAAAAAAAAAAAAAAjIAAAAgDAACUgwAAAwAAAGsAAAEAAAAA0YUAAHMAAABE
hgAAUwAAAGsAAAECAAAAuoUAAO0AAACnhgAAHQAAAAAAAAAAAAAARgAAANuGAAAhhwAARQAAAGsA
AAEeAijDAAAKKrQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRl
ciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlU
b2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0
AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwA
AACsJAAAI34AABglAABQHgAAI1N0cmluZ3MAAAAAaEMAAHgaAAAjVVMA4F0AABAAAAAjR1VJRAAA
APBdAAB0EAAAI0Jsb2IAAAAAAAAAAgAAAVc/ogkJCwAAAPolMwAWAAABAAAAdAAAACkAAABaAAAA
mgAAAHoAAAAZAAAAygAAAEEAAADpAAAAVAAAAAIAAAAVAAAAOgAAAFQAAAADAAAAAQAAAAcAAAAB
AAAAAgAAAAEAAAAAAAoAAQAAAAAABgDPAMgACgDrANYADgBLASIBBgBnAcgABgB9AWwBBgCuAZkB
BgBlAksCBgCQAn4CBgCnAn4CBgDEAn4CBgDjAn4CBgD8An4CBgAVA34CBgAwA34CBgBLA34CBgBk
A34CBgCdA30DBgC9A30DBgASBP8DBgAvBMgABgA0BMgABgBYBH4CCgCEBG4ECgCdBG4EBgCyBH0D
DgDUBCIBBAAJBSMFBgBwBcgABgB3BcgAEgDOBa4FEgDWBa4FEgDyBa4FEgABBq4FEgAKBq4FEgBh
Bq4FDgBtBiIBEgCHBq4FEgCfBq4FBgDRBsgAEgDeBq4FEgD6Bq4FEgAoB64FEgAxB64FEgBOB64F
EgBjB64FFgCaB4QHFgClB4QHFgDGB7MHFgDiB7MHFgDsB3gHFgAYCIQHFgAlCLMHFgAxCHgHFgBS
CHgHFgBkCIQHFgCKCIQHFgCZCHgHFgChCHgHFgDSCIQHFgDuCLMHBgAxCcgAGgCVCWgJGgCkCWgJ
GgDQCWgJBgDlCcgAGgAVCmgJEgB/Cq4FEgCvCq4FBADECiMFBADNCiMFBADdCiMFBAAgCyMFBABS
CyMFBAB3CyMFBACtCyMFBAD6CyMFEgATDK4FHgBpDEEMBABpDEEMBADMDCMFBgCSDXcNBADTDSMF
BAD8DSMFBAAIDiMFBAA1DiMFBABDDiMFBABuDiMFBACfDiMFBADDDiMFBAAIDyMFBgBUD0EPBACI
DyMFBACbDyMFBAC1DyMFBgDwD8gABAAEECMFBgCDEHcNBgCSEMgABgCeEMgABAC3ECMFBADuECMF
BAA1ESMFBABmESMFBACtEUEMBgC4E8gABADIEyMFBgAeFMgABAAoFCMFBgBhFEIUBgDeFEIUBgDs
FEIUBgAEFUIUBAAXFSMFBgAqFUIUBgByFUEPBgCVFX4CAAAAAAEAAAAAAAEAAQAAABAAMgA8AAUA
AQABAAABEAByADwACQADAAUAAQAQAHsAhgANAAQACAADAQAAsQAAABEABAAKAAMBEAD2BAAABQAH
AAoAoRAAAAkFIwUAAAgADAChEAAAxAojBQAACAAZAKEQAADNCiMFAAAIABkAoRAAAN0KIwUAAAgA
HAChEAAAIAsjBQAACAAfAKEQAABSCyMFAAAIADAAoRAAAHcLIwUAAAgAMAChEAAArQsjBQAACABB
AKEQAAD6CyMFAAAIAEQAoRAAAGkMQQwAAAgASQChEAAAzAwjBQAACABJAAAAAAAyDQAABQAIAE8A
oRAAANMNIwUAABgATwChEAAA/A0jBQAAGABRAKEQAAAIDiMFAAAYAFMAoRAAADUOIwUAABgAVACh
EAAAQw4jBQAAGABbAKEQAABuDiMFAAAYAFwAoRAAAJ8OIwUAABgAZgChEAAAww4jBQAAGABpAKEQ
AAAIDyMFAAAYAGsAoRAAAIgPIwUAABgAbwABAQAAmw8jBREAGAB3AAEBAAC1DyMFEQAcAHcAoRAA
AAQQIwUAAB8AdwChEAAAtxAjBQAAHwB7AKEQAADuECMFAAAfAH8AoRAAADURIwUAAB8AgwABAQAA
ZhEjBREAHwCZAAEBAACtEUEMEQAkAJkAoRAAAMgTIwUAAFsAmQChEAAAKBQjBQAAWwCbAKEQAAAX
FSMFAABbAJsAoRAAAOAdQQwAAFsAmwChEAAA8h1BDAAAWwCbABEAjQETABEAugEXABEABAI5AAYG
LQJHAFaANQJKAFaAPQJKAAYATAWNABMAnw3pARMAvw3pARMAbxDpARMA3xHpARMA8xHpARMADxLp
ARMAXRLpARMAoBLpARMAzBLpARMA4BLpARMA9RLpARMAKxPpARMAQBPpARMAZRPpARMAjhPpARMA
oxPpAQYGLQJHAFaAYhlIC1aAbhlIC1aAexlICwYGLQJHAFaAhhm3C1aAkBm3CwYGLQJHAFaAMRv0
DFaAPBv0DFaATRv0DFaAXBv0DAYGLQJHAFaAbRtjDVaAdhtjDVaAfhtjDVaAhBtjDVaAihtjDVaA
kBtjDVaAlhtjDVaAnBtjDVaApBtjDVaArBtjDVaAtxtjDVaAvRtjDVaAxBtjDVaAyxtjDVaA0htj
DVaA2BtjDVaA3xtjDVaA6xtjDVaA8xtjDVaA/BtjDVaAAxxjDVaACxxjDVaAFhxjDVaAIBxjDVaA
KhxjDVaAORxjDVaARBxjDVaAWRxjDVaAYhxjDVaAahxjDVaAcxxjDVaAgxxjDVaAjxxjDVaAmxxj
DVaApxxjDVaAsxxjDVaAvxxjDVaAzRxjDVaA2xxjDVaA7BxjDVaA+BxjDVaABR1jDVaAEh1jDVaA
Hx1jDVaAKx1jDVaAOB1jDVaASh1jDVaAWB1jDVaAaR1jDVaAeR1jDVaAiR1jDVaAnh1jDVaArx1j
DVaAyh1jDVAgAAAAAIMYygEbAAEAWCAAAAAAkwjQAR8AAQCRIAAAAACTCOQBJAABAJggAAAAAJMI
8AEpAAEAoCAAAAAAlggUAj0AAgCzIAAAAACGGMoBGwACAKcgAAAAAJEYzQSJAAIA2CAAAAAAhgAo
AhsAAgBIqgAAAACGGMoBGwACALsgAAAAAIYYygEbAAIAwyAAAAAAhgBUBZEAAgAAAAAAAAAGGDYU
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
AAAAAAAAxg0XE10AcQAAAAAAAAAGGBsaGwByAAAAAAAAAMYFthHXAnIAAAAAAAAAxg1VGrUMdwAA
AAAAAADGDXgRywJ3AAAAAAAAAMYNexq1DHgAAAAAAAAAxg2QEcsCeAAAAAAAAAAGGJgaGwB5AAAA
AAAAAMYNpBrJAXkAAAAAAAAAxg1JEV0AeQAAAAAAAADGDa0MyQF6AAAAAAAAAMYNYxhdAHoAAAAB
AEUCAAABAF8FACAAAAAAASABAHEUACAAAAAAACAAAAAAACAAAAAAASABAH4VACAAAAAAACAAAAAA
ASABALwVACAAAAAAASABAHEUACAAAAAAASABAOIVACAAAAAAACAAAAAAACAAAAAAACAAAAAAACAA
AAAAACAAAAAAASABABQWACAAAAAAAQABAKQWAQACAK4WASADAMEWASAEAMoWACAAAAAAAQABANoW
ASACAOMWAQADAPsWAQAEAAYXACAAAAAAASABABEXASACAB4XACAAAAAAAQABAKQWASACABEXASAD
AB4XACAAAAAAAQABANoWAQACADEXASADABEXASAEAB4XACAAAAAAAQABAKQWAQACAEAXASADABEX
ASAEAB4XACAAAAAAAQABAFAXAQACAKQWASABAG0XACAAAAAAAQABANoWAQACADEXAQADAIYXACAA
AAAAASABAH4VACAAAAAAASABAMoXACAAAAAAASABAPkXACAAAAAAASABAHEUACAAAAAAASABACUY
ACAAAAAAASABAEwYASACAFgYACAAAAAAASABAH4VAQABAGoYACAAAAAAAQABAJQYACAAAAAAASAB
AH4VAQABAGoYAQABAOEYACAAAAAAACAAAAAAACAAAAAAACAAAAAAAQABAPsWAQACAAYXACAAAAAA
ASABAH4VACAAAAAAACAAAAAAASABAH4VACAAAAAAACAAAAAAAQABAGoYACAAAAAAASABALwVACAA
AAAAASABAHEUACAAAAAAACAAAAAAASABAH4VAQABAKQZACAAAAAAACAAAAAAAQABAPsWACAAAAAA
ASABAH4VACAAAAAAAQABAGoYACAAAAAAASABAHEUACAAAAAAAQABAOwZAAABAAkaAQABACcaAQAC
ADEaAQADADkaAQAEAEQaAQAFAEsaAQABAG0aAQABAG0aAQABAMEaAQABAGoYBwCYAAgAJAAIAJwA
CQCcAAoAzQELAJgADAA0AA4AzQEPAJgAEQCYABMAzQEUAJgAFQDNARYAmAAXAM0BGACYABkAmAAa
AM0BGwDNARwAmAAfAM0BIADNASEAzQEiAJgAJQCYADkAygFYAEEAygFYAEkAygFYAFEAygFYAFkA
ygFYAGEAygFYAGkAygFYAHEAygFYAHkAygFYAIEAygFYAIkAygFdAJEAygEbAJkAygEbAAkAygEb
AKEARgRiAKEAYQRpACkAygFuALkAygF6AMkAygEbABEAygEbANEAygEbAGsAZwWWAOEAiAWaAPEA
ygEbAPEA4gWhAPkA/QWmABEBFwatABEBMAatABEBSAZYABEBUQZYABkBygEbABkAfwayACEBkQa4
ACkBqAa+ADEBsQbFAAkAuwaWAOEAxAaWAOEAyQbJAOEAiAWRADkBiAXOAOEA1wbTAPEA6gbZAEEB
/QXfAEkBSAZYAOEADAfmAEkBEwdYAAkB4gWhAFEBPwftAFkBqAbzAGEBWgf6AOEA1wYAARkBbgcH
AXEBygEbAHkBygEbAIEBEwdYAHEB0wcRAYkB+AcYAYkBCAhYAJkBygEfAaEBRAglAaEBWQgsAXEB
ewgzAbkB/QU5AcEBygEbAMkBygEbAIEBsQhCAYEBuwgbAMEBwAhIAXEB4AhPAeEBqAZVAeEA+wha
AeEAAwmWAOEACwmRAOEBFAlgAYEBGQkbAOEAHwlkAeEAJQlnAeEANgltAREBkQa4ACkB/QV0AVEB
PAnFAPEBugl+AfkB/QWEAQkC7gmKAfkB9gmQAQECAQpYAAECKQqXAQECQApdAAECTQqeAQECXwpd
AOEAcQpnAQkBlQqjARkC/QWpAdMAAAu1AfMAOQu6ATMBPQtYAEsBawu/AYMBkgsbABsBSAZYAAsB
UQZYAGMB0AvEARsC8AvJAQsCqAbNAWkCggzTAUMClwzcAUkBrQyWADMCtAxYAKsB4gziAesB9wye
AYsBCg0bAPMBHw0bAAwAygFdAAwA/QX6AQwAsw0CAuEA1wYLAtsA6Q0RAoMCOQsWAkMBIA4bApsC
qAYgAjsBWg4mAtsCqAYrApMCew4xAhMDsw45AjsD5w4+ArsCJg9DAlMDYA9IAtkCbg/FAEsDqAZO
AqsAeg/JAeMCrQzJAaMBqA9UAqMCrQzJAdsByA9fArsB1Q9nAtkC5w9gAfkC/A8bACsDLBBvAtMD
URCtAAMDXBCtABQAygEbABQA/QV7AhQAihCBAhwAygGOAhkDpBCUAuEAqRCoAhsD1BCtAuMDYA9I
ApsDZwWWAOEADAezApMDUQZYALMDDhG5AvsDqAa/AlsCSAZYAHMCKxGeAXMDOQvFAjsESAZYAMME
SRFdAJsEeBHLAqsEkBHLAksEDhG5AhMEOQvSAosEthHXAmMEzBFdAOEABxKWAJMBIxLiAoMAOBLs
AosARRLJAbsAUBLJAVMCZwWWAAsE8AvJAXsDrQzJAcMBcRLyAhsErQzJAcsBiBLyApMAtBLJAZsA
whLJAdMCChOtAFsDqAb7AnsEFxNdAOMAqAYCA3sBVRNYAMMAehPJAVMBDhG5AmsD8AvJATMEZwWW
AEkDwBMIA2MDYA9IArsDqAYNA0MDqA8UA/MD5hMbA8sErQzJAQMCABQhAyEBDxRdAOEA1wYqAxkA
ygEbAGkDygFdAHEDygFYAHkDygEbAIEDygEbAJEDygEzBqEDygFYAHkDygFRCwgAFABOAAgAGABT
AAgAZABOAAgAaABTAAgAbABMCwgAdABOAAgAeABTAAgAgABOAAgAhABTAAgAiABMCwgAjAD5DAgA
lABOAAgAmABTAAgAnABMCwgAoABoDQgApAD5DAgAqABtDQgArAByDQgAsAB3DQgAtAB8DQgAuACB
DQgAvACGDQgAwACLDQgAxACQDQgAyACVDQgAzACaDQgA0ACfDQgA1ACkDQgA2ACpDQgA3ACuDQgA
4ACzDQgA5AC4DQgA6AC9DQgA7ADCDQgA8ADHDQgA9ADMDQgA+ADRDQgA/ADWDQgAAAHbDQgABAHg
DQgACAHlDQgADAHqDQgAEAHvDQgAFAH0DQgAGAH5DQgAHAH+DQgAIAEDDggAJAEIDggAKAENDggA
LAESDggAMAEXDggANAEcDggAOAEhDggAPAEmDggAQAErDggARAEwDggASAE1DggATAE6DggAUAE/
DggAVAFEDggAWAFJDggAXAFODggAYAFTDggAZAFYDggAaAFdDikAkwCAAC4AOwAsEC4AWwBLEC4A
MwDoDy4AQwAYEC4AYwBUEC4AEwDoDy4ACwCgDy4AGwAYEC4AIwAYEC4AKwAeEEMAawBTAEkAkwCA
AGEAmwBTAIMAqwBTAMMAmwBTAOMAmwBTAOMAMwZTAOMAKwbfBQMBQwY5BgMBmwBTAAMBMwZTAAMB
KwYJBiMBmwBTACMBMwZTACMBKwYJBkMBmwBTAEMBMwZTAEMBKwbIBkMBSwbyBmMBKwYsB2MBMwZT
AGMBmwBTAIMBMwZTAIMBQwY5BoMBKwZWB4MBmwBTAKABIwaHBaMBmwBTAKMBKwZWB6MBMwZTAMAB
IwaHBcMBMwZTAMMBSwbyBsMBmwBTAMMBKwbiB+MBmwBTAOMBMwZTAOMBKwYWCAACIwaSBQMCKwZA
CAMCmwBTAAMCMwZTACACIwabBSMCMwZTACMCmwBTACMCKwZuCEACIwakBUMCmwBTAGACIwatBWMC
MwZTAGMCKwaYCGMCSwbyBmMCmwBTAIMCmwBTAIMCKwbCCIMCMwZTAKACIwa2BaMCKwbyCKMCSwby
BqMCMwZTAKMCmwBTAMMCmwBTAMMCMwZTAMMCKwY3CeACIwa/BeMCmwBTAOMCMwZTAOMCSwbyBuMC
KwZnCQADIwbIBQMDMwZTAAMDKwalCQMDmwBTACMDMwZTACMDKwbUCSMDmwBTAEADIwaZBkMDKwa6
CkMDSwbyBkMDMwZTAEMDmwBTAGADIwaHBWMDKwbrCmMDMwZTAGMDmwBTAGMDSwbyBoADIwauBoMD
MwZTAIMDKwYeC4MDmwBTAKMDmwBTAKMDUwZXC8ADIwa5BsMDUwa7C8MDmwBTAOMDKwYoDOMDSwby
BuMDMwZTAOMDmwBTAAAEIwaZBgMEMwZTAAMEKwZSDAMEmwBTAAMESwbyBiAEIwaZBiMEKwaCDCME
SwbyBiMEMwZTACMEmwBTAEAEIwaHBUMEmwBTAEMEMwZTAEMEKwbKDGAEIwaHBWMEmwBTAGMEUwb+
DIMEmwBTAIMEUwZiDqAEIwaSBaMEmwBTAKMEMwZTAKMEKwa9DsAEIwaSBcMEMwZTAMMEKwbnDsME
mwBTAOAEIwabBeMEMwZTAOMEmwBTAOMEKwYRDwAFIwakBQMFMwZTAAMFmwBTAAMFKwY7DyAFIwat
BSMFMwZTACMFKwZlDyMFmwBTACMFSwaPD0AFIwb8BoAFIwYFB8AFIwYOB+AFIwYOBwAGIwaAByAG
IwaZBkAGIwaHBYAGIwaJB6AGIwaSB+AGIwabBwAHIwakByAHIwatB2AHIwa2B6AHIwa/B8AHIwbK
BwAIIwbTByAIIwauBmAIIwaHBaAIIwaSBcAIIwaSBeAIIwabBQAJIwabBUAJIwaHBWAJIwaHBaAJ
IwaSBcAJIwaSBQAKIwa5BkAKIwatBWAKIwauBoAKIwaAB6AKIwaAB+AKIwYcCSALIwYlCUALIwYl
CWALIwauBoALIwaAB6ALIwaAB+ALIwaSBQAMIwaSBUAMIwb8BmAMIwYcCaAMIwaRCeAMIwaSBQAN
IwatBSANIwauBkANIwb+CWANIwauBoANIwb+CaANIwaHBcANIwa5BuANIwaABwAOIwaAByAOIwaZ
BkAOIwaZBmAOIwaHBYAOIwaHBcAOIwYVC+AOIwauBiAPIwaSBUAPIwaSBYAPIwb+CcAPIwaSBeAP
IwauBiAQIwaHBUAQIwa5BmAQIwaAB4AQIwaAB8AQIwaHBeAQIwaHBSARIwYcCWARIwa2BYARIwa2
BcARIwasDOARIwasDCASIwYFB0ASIwa/BWASIwa/BYASIwaRCaASIwaRCeASIwa7DAATIwa7DCAT
IwaAB0ATIwaABwcAkAUJAJAFCwCiBg0AogYPAKIGEQC3BhMAogYVAJAFFwCQBRkAkAUbAJAFHQCQ
BR8AkAUhAKIGIwCiBiUAogYnAKIGKQCiBisAkAUtAJAFLwCiBjUAkAU3AJAFOQCiBj0AogZDAKIG
RQCQBUcAtwZJAKIGTQCQBU8AtwZRAKIGVwCQBVkAtwZbAKIGYQCQBWMAtwZlAKIGawDIB20AogZ1
AKIGdwC3BnkAkAV7AJAFfQCiBn8AogaBAJAFgwCQBYUAtwaHALcGiQCiBosAogaNAKIGjwCiBpEA
twaVAKIGmQCiBpsAtwahAKIGowCiBqUAoganAKIGrQCiBq8AtwaxAAcKswCiBrUAtwa3AAcKuQCi
Br0AkAW/AJAFwQCQBcMAkAXFAKIGxwCiBskAtwbNAAcKzwCiBtMAogbVALcG1wCiBtsAkAXdAJAF
3wCiBnUAMAMCAAEAAwADAAcABAAJAAwACgAOAAsADwAOABcADwAZABEAGwAVAB0AFgAeABcAIQAY
ACIAGQAmABoAJwAbACgAHAAqAB8ALgAhADAAIgAyACUAOgAAAH0BLwAAAPwBNAAAACACQgAAAJ8U
0QUAAK0R1QUAAKQU2wUAAKsU2wUAALUU2wUAALsU2wUAAMUU2wUAAM4U2wUAAEcVpAYAAGMVqQYA
AJAVwgYAACUW0QUAAJ8U0QUAADEW0QUAAEIWFwcAAFIWHAcAAGMWIQcAAHwWJwcAAJgW0QUAAJAV
3AcAAKAX2wUAABEY0QUAAPoGEQgAAJ8U0QUAAC0YaggAAJAV7AgAAJ8Y2wUAAKIYLgkAALkYMwkA
AJAVYQkAAJ8Y2wUAAP8YMwkAAA4ZmgkAACQZoAkAAEUZzwkAAJAVtAoAAJAV5AoAAKAX2wUAAJ8Y
2wUAACUW0QUAAJ8U0QUAAGMWIQcAAJAVIQwAAK0ZMwkAAJAVfAwAAKAX2wUAAJ8Y2wUAAJ8U0QUA
AGMWIQcAANwa2wUAAM4U2wUAAOsaxAwAAP8axAwAABgb2wUAAJ8Y2wUCAAIAAwACAAMABQABAAQA
BQACAAUABwACAA0ACQABAA4ACQACABAACwACABEADQACABIADwACABMAEQACABUAEwACABcAFQAC
ABgAFwACABoAGQACABsAGwACABwAHQABACEAHwACACAAHwACACIAIQABACMAIQACACUAIwABACYA
IwACACcAJQACACgAJwACACoAKQACACwAKwACAC4ALQABAC8ALQACAEEALwACAEMAMQACAEUAMwAB
AEYAMwACAEcANQABAEgANQABAEsANwACAEoANwABAE4AOQACAE0AOQACAFMAOwACAFQAPQABAFUA
PQACAFcAPwACAFkAQQABAFoAQQACAFsAQwABAF0ARQACAFwARQABAGAARwACAF8ARwACAGMASQAC
AGUASwACAGcATQACAGkATwACAGsAUQACAG0AUwABAHAAVQACAG8AVQABAHIAVwACAHEAVwACAHMA
WQABAHQAWQACAHYAWwACAHcAXQACAHkAXwABAHoAXwACAH8AYQACAIEAYwACAIMAZQABAIQAZQAC
AIYAZwABAIcAZwACAIkAaQABAIwAawACAIsAawABAI8AbQACAI4AbQACAJIAbwABAJMAbwACAJQA
cQABAJUAcQABAJgAcwACAJcAcwACAJkAdQABAJoAdQDyAXQChwIEgAAAAQAAANkYxVAAAAAAAADb
AwAABAAAAAAAAAAAAAAAAQC/AAAAAAAEAAAAAAAAAAAAAAABAMgAAAAAAAwAAAAAAAAAAAAAAAoA
AwEAAAAADAAAAAAAAAAAAAAACgCPBQAAAAAEAAAAAAAAAAAAAAABAHgHAAAAAAwAAAAAAAAAAAAA
AAoATAkAAAAADAAAAAAAAAAAAAAACgAeDAAAAAAAAAAAAQAAAAQeAAAFAAQABgAEACEBpAIAAAAA
ADxNb2R1bGU+AFNUXzQ1YmMwZjkyZWE4ZTQ1MTdiZTE3NjJiODIwMWJlZDNjLmRsbABSZXNvdXJj
ZXMAU1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9qLlByb3BlcnRpZXMA
U2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9lOWM5Y2IzYTVhYzQ0OWQyOTNkZGViNTI0MmFkZWM3OC5j
c3Byb2oAU2NyaXB0UmVzdWx0cwBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1
cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0
VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlw
dE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJl
c291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVy
ZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1
cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQATWFpbgB2YWx1ZV9fAFN1Y2Nl
c3MARmFpbHVyZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29y
a0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2Vt
Ymx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFz
c2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlD
b3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0
dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21w
aWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBh
dGliaWxpdHlBdHRyaWJ1dGUAU1RfNDViYzBmOTJlYThlNDUxN2JlMTc2MmI4MjAxYmVkM2MAU3lz
dGVtLkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1l
VHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVt
LkNvbXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVT
dGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU1NJU1NjcmlwdFRhc2tFbnRy
eVBvaW50QXR0cmlidXRlADw+Y19fRGlzcGxheUNsYXNzMgBJRFRTVmlydHVhbElucHV0Q29sdW1u
MTAwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIAdkNvbHVtbgA8TWFp
bj5iX18wAGVsZW1lbnQAZ2V0X05hbWUAU3RyaW5nAFN0cmluZ0NvbXBhcmlzb24ARXF1YWxzAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50
aW1lAFBhY2thZ2UARXhlY3V0YWJsZXMAZ2V0X0V4ZWN1dGFibGVzAEV4ZWN1dGFibGUAQWRkAFNl
cXVlbmNlAER0c0NvbnRhaW5lcgBzZXRfRmFpbFBhY2thZ2VPbkZhaWx1cmUAc2V0X0ZhaWxQYXJl
bnRPbkZhaWx1cmUAc2V0X05hbWUAc2V0X0Rlc2NyaXB0aW9uAEFwcGxpY2F0aW9uAFNjcmlwdE9i
amVjdE1vZGVsAGdldF9EdHMAVmFyaWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0
ZW0AZ2V0X1ZhbHVlAFRvU3RyaW5nAFRyaW0ASW5kZXhPZgBJbnQzMgBDb25jYXQAQ29ubmVjdGlv
bnMAZ2V0X0Nvbm5lY3Rpb25zAENvbm5lY3Rpb25NYW5hZ2VyAEZvcm1hdABzZXRfQ29ubmVjdGlv
blN0cmluZwBUYXNrSG9zdABEdHNQcm9wZXJ0aWVzAGdldF9Qcm9wZXJ0aWVzAER0c1Byb3BlcnR5
AFNldFZhbHVlAElEVFNFdmVudHMAU2F2ZVRvWG1sAFN5c3RlbS5EYXRhAFN5c3RlbS5EYXRhLlNx
bENsaWVudABTcWxDb21tYW5kAFNxbENvbm5lY3Rpb24AU3lzdGVtLkRhdGEuQ29tbW9uAERiQ29u
bmVjdGlvbgBzZXRfQ29ubmVjdGlvbgBEYkNvbW1hbmQAQ29tbWFuZFR5cGUAc2V0X0NvbW1hbmRU
eXBlAHNldF9Db21tYW5kVGV4dABTcWxQYXJhbWV0ZXIARGJQYXJhbWV0ZXIAUGFyYW1ldGVyRGly
ZWN0aW9uAHNldF9EaXJlY3Rpb24ARGJUeXBlAHNldF9EYlR5cGUAU3FsUGFyYW1ldGVyQ29sbGVj
dGlvbgBnZXRfUGFyYW1ldGVycwBTcWxEYXRhQWRhcHRlcgBEYXRhU2V0AENvbm5lY3Rpb25TdGF0
ZQBnZXRfU3RhdGUAT3BlbgBzZXRfU2VsZWN0Q29tbWFuZABTcWxEYXRhUmVhZGVyAEV4ZWN1dGVS
ZWFkZXIARGJEYXRhUmVhZGVyAFJlcGxhY2UAVG9VcHBlcgBDb250YWlucwBSZWFkAENsb3NlAEVt
cHR5AG9wX0VxdWFsaXR5AENoYXIAU3BsaXQAZ2V0X0lubmVyT2JqZWN0AE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuU1FMVGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5FeGVjdXRlU1FMVGFz
awBFeGVjdXRlU1FMVGFzawBJRFRTUGFyYW1ldGVyQmluZGluZ3MAZ2V0X1BhcmFtZXRlckJpbmRp
bmdzAElEVFNQYXJhbWV0ZXJCaW5kaW5nAERhdGVUaW1lAGdldF9Ob3cAR2V0QmluZGluZwBzZXRf
RHRzVmFyaWFibGVOYW1lAFBhcmFtZXRlckRpcmVjdGlvbnMAc2V0X1BhcmFtZXRlckRpcmVjdGlv
bgBzZXRfRGF0YVR5cGUAc2V0X1BhcmFtZXRlck5hbWUAc2V0X1BhcmFtZXRlclNpemUAb3BfSW5l
cXVhbGl0eQBQcmVjZWRlbmNlQ29uc3RyYWludHMAZ2V0X1ByZWNlZGVuY2VDb25zdHJhaW50cwBQ
cmVjZWRlbmNlQ29uc3RyYWludABNYWluUGlwZQBJRFRTUGlwZWxpbmUxMDAASURUU0NvbXBvbmVu
dE1ldGFEYXRhQ29sbGVjdGlvbjEwMABnZXRfQ29tcG9uZW50TWV0YURhdGFDb2xsZWN0aW9uAElE
VFNDb21wb25lbnRNZXRhRGF0YTEwMABOZXcAc2V0X0NvbXBvbmVudENsYXNzSUQAQ01hbmFnZWRD
b21wb25lbnRXcmFwcGVyAEluc3RhbnRpYXRlAElEVFNEZXNpZ250aW1lQ29tcG9uZW50MTAwAFBy
b3ZpZGVDb21wb25lbnRQcm9wZXJ0aWVzAElEVFNSdW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rpb24x
MDAAZ2V0X1J1bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbgBnZXRfQ291bnQASURUU1J1bnRpbWVD
b25uZWN0aW9uMTAwAER0c0NvbnZlcnQATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNSdW50aW1lV3Jh
cABNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIASURUU0Nvbm5lY3Rpb25N
YW5hZ2VyMTAwAEdldEV4dGVuZGVkSW50ZXJmYWNlAHNldF9Db25uZWN0aW9uTWFuYWdlcgBnZXRf
SUQAc2V0X0Nvbm5lY3Rpb25NYW5hZ2VySUQASURUU0N1c3RvbVByb3BlcnR5MTAwAFNldENvbXBv
bmVudFByb3BlcnR5AEFjcXVpcmVDb25uZWN0aW9ucwBSZWluaXRpYWxpemVNZXRhRGF0YQBSZWxl
YXNlQ29ubmVjdGlvbnMAPFByaXZhdGVJbXBsZW1lbnRhdGlvbkRldGFpbHM+ezk1OUNFMkM0LTcz
RTEtNDJCRC04QjFBLTVGM0U3NkNFNzIyN30AU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMARGlj
dGlvbmFyeWAyACQkbWV0aG9kMHg2MDAwMDA3LTEAVHJ5R2V0VmFsdWUAJCRtZXRob2QweDYwMDAw
MDctMgBJRFRTUGF0aENvbGxlY3Rpb24xMDAAZ2V0X1BhdGhDb2xsZWN0aW9uAElEVFNQYXRoMTAw
AElEVFNPdXRwdXRDb2xsZWN0aW9uMTAwAGdldF9PdXRwdXRDb2xsZWN0aW9uAElEVFNPdXRwdXQx
MDAASURUU0lucHV0Q29sbGVjdGlvbjEwMABnZXRfSW5wdXRDb2xsZWN0aW9uAElEVFNJbnB1dDEw
MABBdHRhY2hQYXRoQW5kUHJvcGFnYXRlTm90aWZpY2F0aW9ucwBJRFRTVmlydHVhbElucHV0MTAw
AEdldFZpcnR1YWxJbnB1dABJRFRTVmlydHVhbElucHV0Q29sdW1uQ29sbGVjdGlvbjEwMABnZXRf
VmlydHVhbElucHV0Q29sdW1uQ29sbGVjdGlvbgBJRFRTT3V0cHV0Q29sdW1uQ29sbGVjdGlvbjEw
MABnZXRfT3V0cHV0Q29sdW1uQ29sbGVjdGlvbgBTeXN0ZW0uQ29sbGVjdGlvbnMASUVudW1lcmF0
b3IAR2V0RW51bWVyYXRvcgBnZXRfQ3VycmVudABnZXRfTGluZWFnZUlEAElEVFNJbnB1dENvbHVt
bjEwMABEVFNVc2FnZVR5cGUAU2V0VXNhZ2VUeXBlAERUU0luc2VydFBsYWNlbWVudABJbnNlcnRP
dXRwdXQAU2V0T3V0cHV0UHJvcGVydHkATW92ZU5leHQASURpc3Bvc2FibGUARGlzcG9zZQBJRFRT
RXh0ZXJuYWxNZXRhZGF0YUNvbHVtbkNvbGxlY3Rpb24xMDAAZ2V0X0V4dGVybmFsTWV0YWRhdGFD
b2x1bW5Db2xsZWN0aW9uAHNldF9Jc1VzZWQAc2V0X0hhc1NpZGVFZmZlY3RzACQkbWV0aG9kMHg2
MDAwMDA3LTMATGlzdGAxAFRvQXJyYXkAUHJlZGljYXRlYDEAQXJyYXkARmluZABJc051bGxPckVt
cHR5AElEVFNJbnB1dENvbHVtbkNvbGxlY3Rpb24xMDAAZ2V0X0lucHV0Q29sdW1uQ29sbGVjdGlv
bgBJRFRTQ3VzdG9tUHJvcGVydHlDb2xsZWN0aW9uMTAwAGdldF9DdXN0b21Qcm9wZXJ0eUNvbGxl
Y3Rpb24Ac2V0X1ZhbHVlAElEVFNPdXRwdXRDb2x1bW4xMDAAc2V0X0V4dGVybmFsTWV0YWRhdGFD
b2x1bW5JRABEVFNSb3dEaXNwb3NpdGlvbgBzZXRfRXJyb3JSb3dEaXNwb3NpdGlvbgBzZXRfVHJ1
bmNhdGlvblJvd0Rpc3Bvc2l0aW9uAERhdGFUeXBlAFNldERhdGFUeXBlUHJvcGVydGllcwBzZXRf
TWFwcGVkQ29sdW1uSUQAJCRtZXRob2QweDYwMDAwMDctNAAkJG1ldGhvZDB4NjAwMDAwNy01AFRv
TG93ZXIAJCRtZXRob2QweDYwMDAwMDctNgBJbnNlcnRPdXRwdXRDb2x1bW5BdABnZXRfRGF0YVR5
cGUAZ2V0X0xlbmd0aABnZXRfQ29kZVBhZ2UAJCRtZXRob2QweDYwMDAwMDctNwBTZXRJbnB1dENv
bHVtblByb3BlcnR5AFNldE91dHB1dENvbHVtblByb3BlcnR5ACQkbWV0aG9kMHg2MDAwMDA3LTgA
Z2V0X1ByZWNpc2lvbgBnZXRfU2NhbGUAJCRtZXRob2QweDYwMDAwMDctOQAkJG1ldGhvZDB4NjAw
MDAwNy0xMAAkJG1ldGhvZDB4NjAwMDAwNy0xMQBzZXRfSXNTb3J0ZWQAc2V0X1NvcnRLZXlQb3Np
dGlvbgAkJG1ldGhvZDB4NjAwMDAwNy0xMgAkJG1ldGhvZDB4NjAwMDAwNy0xMwBzZXRfQ29udGFj
dEluZm8AJCRtZXRob2QweDYwMDAwMDctMTQAZ2V0X1NvcnRLZXlQb3NpdGlvbgAkJG1ldGhvZDB4
NjAwMDAwNy0xNQAkJG1ldGhvZDB4NjAwMDAwNy0xNgBDb252ZXJ0AFRvSW50MzIASURUU0V4dGVy
bmFsTWV0YWRhdGFDb2x1bW4xMDAAR2V0SW5wdXRDb2x1bW5CeUxpbmVhZ2VJRABNYXBJbnB1dENv
bHVtbgBzZXRfVGFza1Jlc3VsdABFeGNlcHRpb24ASURUU09iamVjdDEwMABfVnRibEdhcDFfNABT
eXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMARGlzcElkQXR0cmlidXRlAHBic3RyTmFtZQBf
VnRibEdhcDJfMgBfVnRibEdhcDNfMQBfVnRibEdhcDRfNQBOYW1lAExlbmd0aABQcmVjaXNpb24A
U2NhbGUATGluZWFnZUlEAENvZGVQYWdlAFNvcnRLZXlQb3NpdGlvbgBHdWlkQXR0cmlidXRlAFR5
cGVJZGVudGlmaWVyQXR0cmlidXRlAENvbUltcG9ydEF0dHJpYnV0ZQBJRFRTT2JqZWN0TW9kZWwx
MDAAQ29DbGFzc0F0dHJpYnV0ZQBfVnRibEdhcDFfMQBDb21wb25lbnRNZXRhRGF0YUNvbGxlY3Rp
b24AUGF0aENvbGxlY3Rpb24ASUVudW1lcmFibGUASW5kZXgAX1Z0YmxHYXAxXzIASXRlbQBEZWZh
dWx0TWVtYmVyQXR0cmlidXRlAGdldF9EZXNjcmlwdGlvbgBwYnN0ckRlc2NyaXB0aW9uAGdldF9D
b21wb25lbnRDbGFzc0lEAGJzdHJDb21wb25lbnRDbGFzc0lEAF9WdGJsR2FwNF8yMQBnZXRfQ29u
dGFjdEluZm8AcGJzdHJDb250YWN0SW5mbwBEZXNjcmlwdGlvbgBDb21wb25lbnRDbGFzc0lEAElu
cHV0Q29sbGVjdGlvbgBPdXRwdXRDb2xsZWN0aW9uAEN1c3RvbVByb3BlcnR5Q29sbGVjdGlvbgBS
dW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rpb24AQ29udGFjdEluZm8AbE91dHB1dElEAGxPdXRwdXRD
b2x1bW5JbmRleABic3RyTmFtZQBic3RyRGVzY3JpcHRpb24AbElucHV0SUQAcElEVFNWaXJ0dWFs
SW5wdXRPYmplY3QAbExpbmVhZ2VJRABlVXNhZ2VUeXBlAFByb3BlcnR5TmFtZQB2VmFsdWUAX1Z0
YmxHYXAyXzEAbElucHV0Q29sdW1uSUQAbE91dHB1dENvbHVtbklEAGVJbnNlcnRQbGFjZW1lbnQA
X1Z0YmxHYXA0XzYAcFRyYW5zYWN0aW9uAF9WdGJsR2FwNV8xAGxFeHRlcm5hbE1ldGFkYXRhQ29s
dW1uSUQAQ291bnQAX1Z0YmxHYXAxXzgAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2VySUQAcGJzdHJDb25u
ZWN0aW9uTWFuYWdlcklEAGdldF9Db25uZWN0aW9uTWFuYWdlcgBwcElEVFNDb25uZWN0aW9uTWFu
YWdlcgBDb25uZWN0aW9uTWFuYWdlcklEAHB2VmFsdWUAVmFsdWUAX1Z0YmxHYXAxXzMAX1Z0YmxH
YXAxXzEyAHBJRFRTT3V0cHV0AHBJRFRTSW5wdXQAc2V0X0lEAHBJRABfVnRibEdhcDFfMTQAX1Z0
YmxHYXAyXzUAZ2V0X0lzU29ydGVkAHBiSXNTb3J0ZWQASUQAT3V0cHV0Q29sdW1uQ29sbGVjdGlv
bgBJc1NvcnRlZABfVnRibEdhcDFfNgBnZXRfSGFzU2lkZUVmZmVjdHMAcGJIYXNTaWRlRWZmZWN0
cwBfVnRibEdhcDNfMTEASGFzU2lkZUVmZmVjdHMASW5wdXRDb2x1bW5Db2xsZWN0aW9uAEV4dGVy
bmFsTWV0YWRhdGFDb2x1bW5Db2xsZWN0aW9uAFZpcnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24A
VVRfUkVBRE9OTFkAVVRfUkVBRFdSSVRFAFVUX0lHTk9SRUQASVBfQkVGT1JFAElQX0FGVEVSAGdl
dF9Jc1VzZWQAcGJJc1VzZWQASXNVc2VkAF9WdGJsR2FwMl8xMQBfVnRibEdhcDJfNgBfVnRibEdh
cDNfMgBnZXRfTWFwcGVkQ29sdW1uSUQAcGxNYXBwZWRDb2x1bW5JRABfVnRibEdhcDRfMQBwbFNv
cnRLZXlQb3NpdGlvbgBfVnRibEdhcDVfNABlRGF0YVR5cGUAbExlbmd0aABsUHJlY2lzaW9uAGxT
Y2FsZQBsQ29kZVBhZ2UAZ2V0X0Vycm9yUm93RGlzcG9zaXRpb24AcGVEaXNwb3NpdGlvbgBnZXRf
VHJ1bmNhdGlvblJvd0Rpc3Bvc2l0aW9uAF9WdGJsR2FwNl8yAGdldF9FeHRlcm5hbE1ldGFkYXRh
Q29sdW1uSUQAcGxFeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQATWFwcGVkQ29sdW1uSUQARXJyb3JS
b3dEaXNwb3NpdGlvbgBUcnVuY2F0aW9uUm93RGlzcG9zaXRpb24ARXh0ZXJuYWxNZXRhZGF0YUNv
bHVtbklEAFJEX05vdFVzZWQAUkRfSWdub3JlRmFpbHVyZQBSRF9SZWRpcmVjdFJvdwBSRF9GYWls
Q29tcG9uZW50AERUX0VNUFRZAERUX05VTEwARFRfSTIARFRfSTQARFRfUjQARFRfUjgARFRfQ1kA
RFRfREFURQBEVF9CT09MAERUX0RFQ0lNQUwARFRfSTEARFRfVUkxAERUX1VJMgBEVF9VSTQARFRf
STgARFRfVUk4AERUX0ZJTEVUSU1FAERUX0dVSUQARFRfQllURVMARFRfU1RSAERUX1dTVFIARFRf
TlVNRVJJQwBEVF9EQkRBVEUARFRfREJUSU1FAERUX0RCVElNRVNUQU1QAERUX0RCVElNRTIARFRf
REJUSU1FU1RBTVBPRkZTRVQARFRfSU1BR0UARFRfVEVYVABEVF9OVEVYVABEVF9EQlRJTUVTVEFN
UDIARFRfQllSRUZfSTIARFRfQllSRUZfSTQARFRfQllSRUZfUjQARFRfQllSRUZfUjgARFRfQllS
RUZfQ1kARFRfQllSRUZfREFURQBEVF9CWVJFRl9CT09MAERUX0JZUkVGX0RFQ0lNQUwARFRfQllS
RUZfSTEARFRfQllSRUZfVUkxAERUX0JZUkVGX1VJMgBEVF9CWVJFRl9VSTQARFRfQllSRUZfSTgA
RFRfQllSRUZfVUk4AERUX0JZUkVGX0ZJTEVUSU1FAERUX0JZUkVGX0dVSUQARFRfQllSRUZfTlVN
RVJJQwBEVF9CWVJFRl9EQkRBVEUARFRfQllSRUZfREJUSU1FAERUX0JZUkVGX0RCVElNRVNUQU1Q
AERUX0JZUkVGX0RCVElNRTIARFRfQllSRUZfREJUSU1FU1RBTVBPRkZTRVQARFRfQllSRUZfREJU
SU1FU1RBTVAyAElEVFNFeGVjdXRhYmxlMTAwAElEVFNJbmZvRXZlbnRzMTAwAFNUXzBjZWYyOWE5
MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNzcHJvai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNv
dXJjZXMAAAAAf1MAVABfADAAYwBlAGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAw
ADIAMwBkADkAMQAwADUAMgA2AGUANQAuAGMAcwBwAHIAbwBqAC4AUAByAG8AcABlAHIAdABpAGUA
cwAuAFIAZQBzAG8AdQByAGMAZQBzAAAdUwBUAE8AQwBLADoAUwBFAFEAVQBFAE4AQwBFAAAlUwBl
AHEAdQBlAG4AYwBlACAAQwBvAG4AdABhAGkAbgBlAHIAABNTAFEATABfAFEAdQBlAHIAeQAADVMA
RQBMAEUAQwBUAAABAAtFAHgAZQBjACAAAAtPAEwARQBEAEIAABlPAEwARQBEAEIAIABTAG8AdQBy
AGMAZQAAgOVEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAxADcAMgAuADIANQAuADEAMgA1AC4ANQA0
ADsASQBuAGkAdABpAGEAbAAgAEMAYQB0AGEAbABvAGcAPQBEAE0AXwBNAGUAdABhAGQAYQB0AGEA
OwBUAHIAdQBzAHQAZQBkAF8AQwBvAG4AbgBlAGMAdABpAG8AbgAgAD0AIABGAGEAbABzAGUAOwBV
AHMAZQByACAASQBEAD0AcwBhADsAUABhAHMAcwB3AG8AcgBkAD0AUABhAHMAcwB3AG8AcgBkADEA
MgAzACMAOwAAG1MAVABPAEMASwA6AFMAUQBMAFQAYQBzAGsAAAlOAGEAbQBlAAAjRQB4AGUAYwB1
AHQAZQAgAFAAcgBvAGMAZQBkAHUAcgBlAAAXRABlAHMAYwByAGkAcAB0AGkAbwBuAAAVQwBvAG4A
bgBlAGMAdABpAG8AbgAAJVMAcQBsAFMAdABhAHQAZQBtAGUAbgB0AFMAbwB1AHIAYwBlAAAnUABh
AGMAawBhAGcAZQBTAGEAdgBlAEwAbwBjAGEAdABpAG8AbgAACy4AZAB0AHMAeAAAGU0AZQB0AGEA
RABhAHQAYQBDAG8AbgBuAABPWwBkAGIAbwBdAC4AWwBBAFQATQBUAE4AXwBHAEUAVABfAEMATwBO
AE4ARQBDAFQASQBPAE4AXwBEAEUAVABBAEkATABTAF8AUwBQAF0AABNDAGwAaQBlAG4AdABfAEkA
RAAAFUAAQwBsAGkAZQBuAHQAXwBJAEQAABdAAFAAcgBvAGoAZQBjAHQAXwBJAEQAABVQAHIAbwBq
AGUAYwB0AF8ASQBEAAAZQABUAGUAbQBwAGwAYQB0AGUAXwBJAGQAABdUAGUAbQBwAGwAYQB0AGUA
XwBJAGQAACVAAFAASwBHAF8AUwBhAHYAZQBfAEwAbwBjAGEAdABpAG8AbgAAGUAAUwB0AGEAdAB1
AHMAXwBjAG8AZABlAAARQABNAGUAcwBzAGEAZwBlAAARQABUAG8AbwBsAF8ASQBEAAAPVABvAG8A
bABfAEkARAAAE1MAUgBDAF8AUQB1AGUAcgB5AAAVVAByAGEAbgBzAF8AdAB5AHAAZQAAAyAAABNN
AEUAUgBHAEUASgBPAEkATgAAFVMAUgBDAF8AUQB1AGUAcgB5ADIAAA1MAE8ATwBLAFUAUAAAE0wA
SwBQAF8AUQB1AGUAcgB5AAAXTABLAFAAXwBDAG8AbAB1AG0AbgBzAAAXRgBVAFoAWgBZAEwATwBP
AEsAVQBQAAATRABTAFQAXwBUAGEAYgBsAGUAABtUAGUAbQBwAGwAYQB0AGUAXwBOAGEAbQBlAAAT
VABhAHMAawBfAG4AYQBtAGUAABVUAHIAYQBuAHMAXwBSAHUAbABlAAArRABTAFQAXwBDAG8AbgBu
AGUAYwB0AGkAbwBuAF8AUwB0AHIAaQBuAGcAACVTAG8AdQByAGMAZQBfAEMAbwBuAG4AXwBTAHQA
cgBpAG4AZwAAa3MAZQBsAGUAYwB0ACAAVAB5AHAAZQAgAEYAUgBPAE0AIABFAFQATABfAFQARQBN
AFAATABBAFQARQBfAE0AUwAgAFcASABFAFIARQAgAFQAZQBtAHAAbABhAHQAZQBfAEkARAAgAD0A
IAAACVQAeQBwAGUAABFEAEEAVABBAFQAWQBQAEUAAClQAHIAbwB2AGkAZABlAHIAPQBTAFEATABP
AEwARQBEAEIALgAxADsAAANbAAADXQAAeXMAZQBsAGUAYwB0ACAAJwAxACcAIABmAHIAbwBtACAA
SQBuAGYAbwByAG0AYQB0AGkAbwBuAF8AUwBjAGgAZQBtAGEALgBUAGEAYgBsAGUAcwAgAHcAaABl
AHIAZQAgAFQAQQBCAEwARQBfAE4AQQBNAEUAPQAnAAEDJwABS1sAZABiAG8AXQAuAFsAQQBUAE0A
VABOAF8ARwBFAFQAXwBEAEEAVABBAFQAWQBQAEUAXwBEAEUAVABBAEkATABTAF8AUwBQAF0AABlA
AFQAYQBiAGwAZQBFAHgAaQBzAHQAcwAAI08ATABFAEQAQgAgAEQAZQBzAHQAaQBuAGEAdABpAG8A
bgAAJVMAVABPAEMASwA6AFAAaQBwAGUAbABpAG4AZQBUAGEAcwBrAAADTgAAJ1YAXwBTAG8AdQBy
AGMAZQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAlVAHMAZQByAAAPVABFAFMAVABJAE4ARwAAFVQA
YQBiAGwAZQBfAE4AYQBtAGUAABVFAFgARQBDAFUAVABFAFMAUQBMAAAHUABSAEUAAAMkAAANUwBU
AFIASQBOAEcAABFEAEEAVABFAFQASQBNAEUAAAlEAEEAVABFAAADMAAADVUAcwBlAHIAOgA6AAAN
UwBPAFUAUgBDAEUAAANZAAAHRABGAFQAADFEAFQAUwBBAGQAYQBwAHQAZQByAC4ATwBsAGUARABi
AFMAbwB1AHIAYwBlAC4ANAAAF08ATABFAEQAQgBTAG8AdQByAGMAZQAAFUEAYwBjAGUAcwBzAE0A
bwBkAGUAABVTAHEAbABDAG8AbQBtAGEAbgBkAAAXTwBsAGUARABCAFMAbwB1AHIAYwBlAAAhQwBP
AE4ARABJAFQASQBPAE4AQQBMAFMAUABMAEkAVAAAG0QARQBSAEkAVgBFAEQAQwBPAEwAVQBNAE4A
ABlDAEgAQQBSAEEAQwBUAEUAUgBNAEEAUAAAE0EARwBHAFIARQBHAEEAVABFAAARUgBPAFcAQwBP
AFUATgBUAAAJUwBPAFIAVAAAMVMATwBSAFQAJgBFAEwASQBNAEkATgBBAFQARQBEAFUAUABMAEkA
QwBBAFQARQBTAAARVQBOAEkATwBOAEEATABMAAALTQBFAFIARwBFAAAZTwBMAEUARABCAEMATwBN
AE0AQQBOAEQAABNNAFUATABUAEkAQwBBAFMAVAAAJUUAeABlAGMAdQB0AGUAIABQAHIAbwBjAGUA
ZAB1AHIAZQBfAAA/RABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBDAG8AbgBkAGkAdABpAG8AbgBh
AGwAUwBwAGwAaQB0AC4ANAAAHUYAaQBsAHQAZQByAF8AUgBvAHUAdABlAHIAXwAAb0UAdgBhAGwA
dQBhAHQAZQBzACAAYQBuAGQAIABkAGkAcgBlAGMAdABzACAAcgBvAHcAcwAgAGkAbgAgAGEAIABk
AGEAdABhAHMAZQB0ACAAYgBhAHMAZQBkACAAYQAgAGMAbwBsAHUAbQBuAC4AACFDAG8AbgBkAGkA
dABpAG8AbgBhAGwAUwBwAGwAaQB0AAAbRABlAHIAaQB2AGUAZABDAG8AbAB1AG0AbgAAGUMAaABh
AHIAYQBjAHQAZQByAE0AYQBwAAATQQBnAGcAcgBlAGcAYQB0AGUAAA1MAG8AbwBrAHUAcAAAF0YA
dQB6AHoAeQBMAG8AbwBrAHUAcAAAEVIAbwB3AEMAbwB1AG4AdAAACVMAbwByAHQAABFVAG4AaQBv
AG4AQQBsAGwAAAtNAGUAcgBnAGUAABNNAGUAcgBnAGUASgBvAGkAbgAAE00AdQBsAHQAaQBDAGEA
cwB0AAAfRQB2AGEAbAB1AGEAdABpAG8AbgBPAHIAZABlAHIAACVGAHIAaQBlAG4AZABsAHkARQB4
AHAAcgBlAHMAcwBpAG8AbgAAOUQAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4ARABlAHIAaQB2AGUA
ZABDAG8AbAB1AG0AbgAuADQAAClEAGUAcgBpAHYAZQBkAEMAbwBsAFQAcgBhAG4AcwBmAG8AcgBt
AF8AAICFTwB2AGUAcgByAGkAZABlACAAdABoAGUAIABvAHIAZwBpAG4AYQBsACAAYwBvAGwAdQBt
AG4AIAB7ADAAfQAgAHcAaQB0AGgAIABPAFQASABFAFIAUwAgAGkAZgAgAHQAaABlACAAcwB0AHIA
aQBuAGcAIABpAHMAIABOAFUATABMAC4AABVFAHgAcAByAGUAcwBzAGkAbwBuAAA3RABUAFMAVABy
AGEAbgBzAGYAbwByAG0ALgBDAGgAYQByAGEAYwB0AGUAcgBNAGEAcAAuADQAADFjAGEAcABpAHQA
YQBsAGkAcwBlACAAYQBsAGwAIABpAG4AaQB0AGkAYQBsAHMAXwAAL2MAYQBwAGkAdABhAGwAaQBz
AGUAIABhAGwAbAAgAGkAbgBpAHQAaQBhAGwAcwAAMUQAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4A
QQBnAGcAcgBlAGcAYQB0AGUALgA0AAAVQQBnAGcAcgBlAGcAYQB0AGUAXwAAC2MAbwB1AG4AdAAA
EWMAbwB1AG4AdABhAGwAbAAAG2MAbwB1AG4AdABkAGkAcwB0AGkAbgBjAHQAAAdzAHUAbQAAB2EA
dgBnAAAHbQBpAG4AAAdtAGEAeAAAJ0EAZwBnAHIAZQBnAGEAdABpAG8AbgBDAG8AbAB1AG0AbgBJ
AGQAAB9BAGcAZwByAGUAZwBhAHQAaQBvAG4AVAB5AHAAZQAAC0kAcwBCAGkAZwAANUEAZwBnAHIA
ZQBnAGEAdABpAG8AbgBDAG8AbQBwAGEAcgBpAHMAbwBuAEYAbABhAGcAcwAAK0QAVABTAFQAcgBh
AG4AcwBmAG8AcgBtAC4ATABvAG8AawB1AHAALgA0AAAPTgBPAE0AQQBUAEMASAAAAyMAAA8gAFcA
SABFAFIARQAgAAALIABhAG4AZAAgAAAPTABvAG8AawB1AHAAXwAAE0MAYQBjAGgAZQBUAHkAcABl
AAAfTgBvAE0AYQB0AGMAaABCAGUAaABhAHYAaQBvAHIAAAdJAE4AXwAAK0oAbwBpAG4AVABvAFIA
ZQBmAGUAcgBlAG4AYwBlAEMAbwBsAHUAbQBuAAAvQwBvAHAAeQBGAHIAbwBtAFIAZQBmAGUAcgBl
AG4AYwBlAEMAbwBsAHUAbQBuAAAxRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBCAGUAcwB0AE0A
YQB0AGMAaAAuADQAABlmAHUAegB6AHkAbABvAG8AawB1AHAAXwAACUYAUgBPAE0AAAN+AAALVwBI
AEUAUgBFAAAJZABiAG8ALgAAJVIAZQBmAGUAcgBlAG4AYwBlAFQAYQBiAGwAZQBOAGEAbQBlAAAj
TQBhAHQAYwBoAEkAbgBkAGUAeABPAHAAdABpAG8AbgBzAAAtRAByAG8AcABFAHgAaQBzAHQAaQBu
AGcATQBhAHQAYwBoAEkAbgBkAGUAeAAAJUMAbwBwAHkAUgBlAGYAZQByAGUAbgBjAGUAVABhAGIA
bABlAAAxTQBhAHgATwB1AHQAcAB1AHQATQBhAHQAYwBoAGUAcwBQAGUAcgBJAG4AcAB1AHQAABtN
AGkAbgBTAGkAbQBpAGwAYQByAGkAdAB5AAAVRQB4AGgAYQB1AHMAdABpAHYAZQAAC0YAYQBsAHMA
ZQAAFVcAYQByAG0AQwBhAGMAaABlAHMAAAlUAHIAdQBlAAAVQwBvAHAAeQBDAG8AbAB1AG0AbgAA
EUoAbwBpAG4AVAB5AHAAZQAABUEAUwAANVMAbwB1AHIAYwBlAEkAbgBwAHUAdABDAG8AbAB1AG0A
bgBMAGkAbgBlAGEAZwBlAEkARAAAL0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AUgBvAHcAQwBv
AHUAbgB0AC4ANAAAIWcAZQB0ACAAcgBvAHcAIABjAG8AdQBuAHQAZQByAF8AACFnAGUAdABzACAA
cgBvAHcAIABjAG8AdQBuAHQAZQByAAAZVgBhAHIAaQBhAGIAbABlAE4AYQBtAGUAACdEAFQAUwBU
AHIAYQBuAHMAZgBvAHIAbQAuAFMAbwByAHQALgA0AAAdUwBvAHIAdABUAHIAYQBuAHMAZgBvAHIA
bQBfAAAbUwBvAHIAdABjAG8AbQBwAG8AbgBlAG4AdAAACUQARQBTAEMAACVOAGUAdwBTAG8AcgB0
AEsAZQB5AFAAbwBzAGkAdABpAG8AbgAAJ0UAbABpAG0AaQBuAGEAdABlAEQAdQBwAGwAaQBjAGEA
dABlAHMAAC9EAFQAUwBUAHIAYQBuAHMAZgBvAHIAbQAuAFUAbgBpAG8AbgBBAGwAbAAuADQAACVV
AG4AaQBvAG4AIABBAGwAbAAgAGMAbwBsAHUAbQBuAHMAXwAAKUQAVABTAFQAcgBhAG4AcwBmAG8A
cgBtAC4ATQBlAHIAZwBlAC4ANAAAJU0AZQByAGcAZQAgAEEAbABsACAAYwBvAGwAdQBtAG4AcwBf
AAA3RABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBPAEwARQBEAEIAQwBvAG0AbQBhAG4AZAAuADQA
AB9PAEwARQAgAEQAQgAgAEMAbwBtAG0AYQBuAGQAXwAAGU8ATABFAEQAQgBTAG8AdQByAGMAZQAx
AAAbTwBMAEUARABCACAAUwBvAHUAcgBjAGUAMgAADXIAbwB3AF8AaQBkAAARTwBSAEQARQBSACAA
QgBZAAAVIABPAHIAZABlAHIAIABiAHkAIAAAJU0AZQByAGcAZQBTAG8AcgB0AFQAcgBhAG4AcwBm
AG8AcgBtAAALUwBvAHIAdAAxAAAxRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBNAGUAcgBnAGUA
SgBvAGkAbgAuADQAAAttAGUAcgBnAGUAADFEAFQAUwBUAHIAYQBuAHMAZgBvAHIAbQAuAE0AdQBs
AHQAaQBjAGEAcwB0AC4ANAAAFU0AdQBsAHQAaQBjAGEAcwB0AF8AABNNAHUAbAB0AGkAYwBhAHMA
dAAANUQAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4ARABhAHQAYQBDAG8AbgB2AGUAcgB0AC4ANAAA
M0QAYQB0AGEAIABDAG8AbgB2AGUAcgBzAGkAbwBuACAAQwBvAG0AcABvAG4AZQBuAHQAAC1EAGEA
dABhAEMAbwBuAHYAZQByAHQAIABDAG8AbQBwAG8AbgBlAG4AdABfAACB0VMAZQBsAGUAYwB0ACAA
QwBPAEwAVQBNAE4AXwBOAEEATQBFACwARABBAFQAQQBfAFQAWQBQAEUALABJAHMAbgB1AGwAbAAo
AEMASABBAFIAQQBDAFQARQBSAF8ATQBBAFgASQBNAFUATQBfAEwARQBOAEcAVABIACwAMAApACAA
QQBzACAAQwBIAEEAUgBBAEMAVABFAFIAXwBNAEEAWABJAE0AVQBNAF8ATABFAE4ARwBUAEgALABJ
AHMAbgB1AGwAbAAoAE4AVQBNAEUAUgBJAEMAXwBQAFIARQBDAEkAUwBJAE8ATgAsADAAKQAgAEEA
cwAgAE4AVQBNAEUAUgBJAEMAXwBQAFIARQBDAEkAUwBJAE8ATgAsAEkAcwBuAHUAbABsACgATgBV
AE0ARQBSAEkAQwBfAFMAQwBBAEwARQAsADAAKQAgAEEAcwAgAE4AVQBNAEUAUgBJAEMAXwBTAEMA
QQBMAEUAIABmAHIAbwBtACAASQBuAGYAbwByAG0AYQB0AGkAbwBuAF8AUwBjAGgAZQBtAGEALgBD
AE8ATABVAE0ATgBTACAAdwBoAGUAcgBlACAAVABBAEIATABFAF8ATgBBAE0ARQA9ACcAARdDAE8A
TABVAE0ATgBfAE4AQQBNAEUAABNEAEEAVABBAF8AVABZAFAARQAAMUMASABBAFIAQQBDAFQARQBS
AF8ATQBBAFgASQBNAFUATQBfAEwARQBOAEcAVABIAAAjTgBVAE0ARQBSAEkAQwBfAFAAUgBFAEMA
SQBTAEkATwBOAAAbTgBVAE0ARQBSAEkAQwBfAFMAQwBBAEwARQAAD3YAYQByAGMAaABhAHIAAAlj
AGgAYQByAAARbgB2AGEAcgBjAGgAYQByAAAPbgB1AG0AZQByAGkAYwAAC2YAbABvAGEAdAAAEWQA
YQB0AGUAdABpAG0AZQAACWQAYQB0AGUAAA9pAG4AdABlAGcAZQByAAAHaQBuAHQAAA1iAGkAZwBp
AG4AdAAAEXMAbQBhAGwAbABpAG4AdAAAD3QAaQBuAHkAaQBuAHQAAAdiAGkAdAAACXIAZQBhAGwA
ADtEAFQAUwBBAGQAYQBwAHQAZQByAC4ATwBsAGUARABiAEQAZQBzAHQAaQBuAGEAdABpAG8AbgAu
ADQAACFPAEwARQBEAEIARABlAHMAdABpAG4AYQB0AGkAbwBuAAAVTwBwAGUAbgBSAG8AdwBzAGUA
dAAAH0YAYQBzAHQATABvAGEAZABPAHAAdABpAG8AbgBzAAAzVABBAEIATABPAEMASwAsAEMASABF
AEMASwBfAEMATwBOAFMAVABSAEEASQBOAFQAUwAAQUQAYQB0AGEAQwBvAG4AdgBlAHIAdAAgAEMA
bwBtAHAAbwBuAGUAbgB0AF8ATQB1AGwAdABpAEMAYQBzAHQAXwAAI08ATABFAEQAQgBEAGUAcwB0
AGkAbgBhAHQAaQBvAG4AXwAAA18AACNFAHIAcgBvAHIAUABhAGMAawBhAGcAZQAuAGQAdABzAHgA
AMTinJXhc71CixpfPnbOcicACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAAS
GQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAIGCAMGERQEAAAAAAQBAAAABCABAQ4EIAEB
CAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMAAAEDBhIcBCABAg4DIAAO
BiACAg4RdQQgABJ9BiABEoCBDgQgAQECBSAAEoCRBSAAEoCVBiABEoCZHAMgABwEIAEIDgQgAQII
BQACDg4OBSAAEoChBiABEoClDgYAAg4OHRwFIAASgK0GIAESgLEcBSACARwcBgADDg4ODgkgAwEO
EnkSgLUGIAEBEoC9BiABARGAyQUgAgEOHAYgAQERgNUGIAEBEYDZBSAAEoDdCCABEoDNEoDNBSAA
EYDpBiABARKAuQUgABKA7QQgARwOBSACDg4OAyAAAgIGDgUAAgIODgYgAR0OHQMJIAQSgJkOAg4c
BSAAEoD9BSAAEoEBBQAAEYEFBiABEoEBCAYgAQERgQkEIAEBHAUgABKBDQsgAhKBERKAgRKAgQQg
ABIoBCAAEiwEIAASMAQgABI4AyAACAUgARI8HAgAARKBORKApQUgAQESQAYgAhJEDhwIBhUSgUUC
DggHFRKBRQIOCAcgAgETABMBCCACAhMAEBMBBQACDhwcBCAAEkwEIAASUAQgABJUBSABElgcBCAA
ElwFIAESYBwHIAIBElgSYAQgABJkBCAAEmgEIAASbAUgABKBbQUgARIcHAogBBJwCBJkCBF0ByAC
ElgReAgHIAMSRAgOHAQgABJ8BhUSgYUBDgUgAQETAAUgAB0TAAYVEoGJAQ4FIAIBHBgPEAECHgAd
HgAVEoGJAR4AAwoBDgQAAQIOBSAAEoCABQACDg4cBSAAEoCEBSABEkQcBSAAEoCIBiABARGAjAQg
ABJECiAFARGAkAgICAgJIAQSgIgICA4OBSAAEYCQCCAEEkQICA4cBiABEoCIHAUgARIsHAQAAQgc
BiABEoCUHAYgAggIEXQFIAEScAgIIAMSgJQICAgFAAEOHRyCVQeBNBJ5EoCFEoCNDggSgIESgKUS
gKkSgLkSgL0SgM0SgM0SgM0SgM0SgM0SgM0SgM0SgOESgO0ODg4ODg4ODg4ODggIEoC5EoC9EoDt
EoDhDhKAuRKAvRKA7RKA4Q4IEoC5EoC9EoDNEoDNEoDNEoDNEoDNEoDNEoDhEoClEoClEoCBDggd
Dg4IDhKAqQ4SgPkOEoEBEoCpEiASLBI0EiwSLBIsEiwSLBIsEiwSLBIsEiwSLBIsEiwSLBIsEiwd
Dh0ODh0ODg4ICBKAgRKAqRKA+Q4ODg4SgQESMBJgEmQSaBJYCAgOHQ4OEhwSWBIwEmASZBJoEkQd
DhUSgYUBDg4ODg4OEhwIDhUSgYkBDhIYEnASgIgSRBIwEmASZBJoElgSHBIwEmASZBJYEmgSHA4O
CBKAiAgSRBKAiAgSRBIwEmASZBJoDg4SHBJwHQ4SWA4ODg4SgIgSMA4OEmASZBJoHQ4OEhwScBJY
Dh0ODg4ODhKAiA4SgIgSHBKAiBIwDg4SMB0OEnASZAgOEhwIEhwSMBIwEjASNBIsDh0OHQ4SMBJk
EnASHBIcEjASYBJkCBIcEmASZBIcEkQSRBJYCBIwEmASZAgOHQ4OEiwSMBKAuRKAvRKA4RKA7QgO
DggICBJkElgIEoCIEiwSMBJgEmQSYBJkEoCAEnwSbBKAiBKAlBJwDggdDg4SLBIwEoC5EoC9EoDh
EoDtCA4OCAgIEmQSWAgSgIgSLBIwEmASZBJgEmQSgIASfBJsEoCIEoCUEnAOHQMdDggOCBKBbRKB
fRwdDggdHAgBAA0AAAAAAAETCAEAZQAAAAAACAEAZgAAAAAACAEAZwAAAAAACAEAaAAAAAAACAEA
bAAAAAAACAEAcwAAAAAACAEAegAAAAAAAygADgUoABGAkAMoAAgpAQAkNzc3MjhDNzUtNEI0My00
M0I4LUI4N0UtNEFEQ0E2MkZCRjVDAAApAQAkNkQzOTMxQUMtODIyRC00MTRDLThGMTAtNzQ0N0E1
NEJBNTVDAAAFIAEBElFfAQBaU3lzdGVtLk9iamVjdCwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAu
MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5AAAIAQAM
AAAAAAABHAQoABIoBCgAEkwIAQAAAAAAAAABGwgBAA4AAAAAAAUoARIsHCkBACQ5NDFDRDBFMi1B
QzAwLTQzN0QtQUFFRS1DODg3QUE3MzlBNjAAAAkBAARJdGVtAAAIAQBpAAAAAAAIAQByAAAAAAAI
AQCFAAAAAAAEKAASXAQoABJUBSgAEoCEBCgAEjgpAQAkQkU4QzQ4QTMtMTU1Qi00ODEwLUJBNUMt
QkRGNjhBNjU5RTlFAAApAQAkMDA1ODg3NEUtRTAzNy00QkE5LTkyMEMtMzQ5NzczQjUzNTFBAAAI
AQALAAAAAAAIAQAQAAAAAAAIAQARAAAAAAAIAQATAAAAAAAIAQAUAAAAAAAIAQAVAAAAAAAIAQAX
AAAAAAAIAQAeAAAAAAABGQgBAB8AAAAAAAgBACEAAAAAAAUoARI8HCkBACQwMTQ1OUU5Ri00ODdC
LTQ5QzktQTA0OS02QzY3OTk4NDVFRTIAAAQgABJABCgAEkApAQAkNUYwNDIyRTEtOUFGMC00QTky
LTg4NzQtRTU0QTA2NTQ1NkE5AAApAQAkQUZERkMxQzUtQTQ0OC00NUIyLTk2QTEtMTI2OUNDQTBG
NjUyAAADKAAcKQEAJDA1NzgxRjk0LUY1NzctNDlCQS05ODZELTAxNzYyNUE1NTQ1MgAAKQEAJEE5
MjNCMTBGLTFENEMtNEFEMC04MkVFLTIxMjI2MkJFRTBBQwAAKQEAJDdCRDk5MTA1LUY0MzUtNDI2
NS04M0RBLUJDMDAyM0NDMjkzQwAABSgBElgcKQEAJDY4QkNBM0I3LTQwNkUtNDI2MS1BQjMwLTNE
QjFFMDkwQzc2MAAACAEAagAAAAAACAEAbwAAAAAABCgAEmwDKAACKQEAJDQ4MDA5QjVGLTRFQ0Yt
NDg1NS05NUIyLTY5RjZFNENGMzJGMQAABSgBEmAcKQEAJDJENTY0MDIxLTg3QzEtNDdCRi1CQzU1
LTkzMDNFQ0NCNUMyMAAACAEAdAAAAAAABSgAEoCABCgAEnwpAQAkQTgzNUVEMTQtNzUzNS00MkY3
LUExNjUtQTExRTdDNDA5ODE3AAAEKAASaCkBACRERDlFN0YxRi1BMTEyLTRFQkQtOTE3OC1FRTdE
QjBGMkVERUMAAAgBAPz///8AAICrLAAAgKVTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMu
Q3VzdG9tTWFyc2hhbGVycy5FbnVtZXJhdG9yVG9FbnVtVmFyaWFudE1hcnNoYWxlciwgQ3VzdG9t
TWFyc2hhbGVycywgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRv
a2VuPWIwM2Y1ZjdmMTFkNTBhM2EABSgBEhwcKQEAJDk5RjZGNjRFLUEzMkQtNDgxOS05MjMwLUNC
RjgzNzA5MkY2OQAABigBEoCIHCkBACRCQ0Q2NUNENi0yQ0E5LTQyOEEtOTgyQS1ENDQwNUY1MUJF
MUQAAAgBAGsAAAAAACkBACRFQTFCQTJBNS1EMDlBLTQ2RUQtQkYzMS00RDhBQjE4NDkxMDAAAAMG
EXQEAgAAAAUgAgEODl8BACRBNkMxMzc2My1GOTc1LTRDQUQtQUFFMi01MEM2OTFBMjcwMTg1TWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlci5EVFNVc2FnZVR5cGUAAAMGEXhl
AQAkQTZDMTM3NjMtRjk3NS00Q0FELUFBRTItNTBDNjkxQTI3MDE4O01pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIuRFRTSW5zZXJ0UGxhY2VtZW50AAAGKAESgJQcKQEAJEVB
MUQ1NEIzLTgwMEQtNDI5QS1CQjY1LUU1OTIxQTAyRjg4NgAAKQEAJEMyRTNBN0Y3LUQ1QzItNDQw
Ri1BQzNELTAwRThBQkZCN0JDRAAABSgBEkQcKQEAJDg5MzlDRUM4LUNFQTYtNDE4MC05RUUwLTUw
NEE0RTQ1OTNDRgAACAEAbgAAAAAABSAAEYCMCAEAdgAAAAAABSgAEYCMKQEAJDI3NDQ4MzlDLTk5
OTQtNDgzMi1CMTBBLUFDQUYxRkFDMDNCRAAABAYRgIwEBAAAAGQBACRBNkMxMzc2My1GOTc1LTRD
QUQtQUFFMi01MEM2OTFBMjcwMTg6TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3Jh
cHBlci5EVFNSb3dEaXNwb3NpdGlvbgAABAYRgJAEAwAAAAQFAAAABAYAAAAEBwAAAAQLAAAABA4A
AAAEEAAAAAQRAAAABBIAAAAEEwAAAAQUAAAABBUAAAAEQAAAAARIAAAABIAAAAAEgQAAAASCAAAA
BIMAAAAEhQAAAASGAAAABIcAAAAEkQAAAASSAAAABC0BAAAELgEAAAQvAQAABDABAAAEAkAAAAQD
QAAABARAAAAEBUAAAAQGQAAABAdAAAAEC0AAAAQOQAAABBBAAAAEEUAAAAQSQAAABBNAAAAEFEAA
AAQVQAAABEBAAAAESEAAAASDQAAABIVAAAAEhkAAAASHQAAABIhAAAAEiUAAAASKQAAAWgEAJDY0
N0E5OTQ2LTI0RTYtNEYxMi04MTAwLTQ2ODBGODE0NTQwMjBNaWNyb3NvZnQuU3FsU2VydmVyLkR0
cy5SdW50aW1lLldyYXBwZXIuRGF0YVR5cGUAACkBACRGQ0IxRERGOS1GOUIzLTQ5NTgtOEU5OC1F
NDIxMDlGNDE4QTQAACkBACRENEU1QUY0Mi03OTk5LTQ3M0MtODA4Mi02RUZDNjc2OTUzQzQAACkB
ACRDNTIxNjIxMi0zNjFELTQzNkItOTg0MC1BNDRCMzQwNUNCRkIAACkBACQ4Qjg5QkUxMS0zOTVB
LTQ5MTQtQTExMy05MjI0RTZGMUEzQzUAACkBACQzM0Y1NEVCRi0wREIwLTQxQjItQTk5OC04RjQx
MkZCNzJBMDEAABABAAtGaXJlV2FybmluZwAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4w
AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0LwEAKlNUXzBjZWYyOWE5
MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNzcHJvagAABQEAAAAADQEACEhleGF3YXJlAAAeAQAZ
Q29weXJpZ2h0IEAgSGV4YXdhcmUgMjAxNQAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQCUGQEAAAAAAAAAAACuGQEAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoBkBAAAA
AAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWCABABQEAAAAAAAAAAAAABQENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQDFUNkYAAABAMVQ2Rg/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAR0AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABQAwAAAQAwADAAMAAw
ADAANABiADAAAAA0AAkAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAEgAZQB4AGEAdwBhAHIA
ZQAAAAAAgAArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADAAYwBl
AGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAwADUAMgA2AGUA
NQAuAGMAcwBwAHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAw
AC4ANgAzADYAMQAuADIAMAA2ADcANwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUA
AABTAFQAXwA0ADUAYgBjADAAZgA5ADIAZQBhADgAZQA0ADUAMQA3AGIAZQAxADcANgAyAGIAOAAy
ADAAMQBiAGUAZAAzAGMALgBkAGwAbAAAAFgAGgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgA
dAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgAEgAZQB4AGEAdwBhAHIAZQAgADIAMAAxADUAAAB4
ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8ANAA1AGIAYwAwAGYA
OQAyAGUAYQA4AGUANAA1ADEANwBiAGUAMQA3ADYAMgBiADgAMgAwADEAYgBlAGQAMwBjAC4AZABs
AGwAAAB4ACsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfADAAYwBlAGYAMgA5AGEA
OQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAwADUAMgA2AGUANQAuAGMAcwBw
AHIAbwBqAAAAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYA
MwA2ADEALgAyADAANgA3ADcAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBv
AG4AAAAxAC4AMAAuADYAMwA2ADEALgAyADAANgA3ADcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAwAAADAOQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="49"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="2347"
            Column="25" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="2251"
            Column="25" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="131,42"
          Id="Package\Script Task"
          TopLeft="5.5,5.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>