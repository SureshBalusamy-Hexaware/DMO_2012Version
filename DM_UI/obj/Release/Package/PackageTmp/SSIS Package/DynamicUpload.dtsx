<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/20/2015 4:24:32 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="EBII433F1"
  DTS:CreatorName="CORP\30655"
  DTS:DTSID="{DC309DD4-FBD0-425E-9FB1-DE3EA1525FC8}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.2100.60"
  DTS:LocaleID="1033"
  DTS:ObjectName="Automaton_DynamicFileUpload"
  DTS:PackageType="5"
  DTS:VersionBuild="1135"
  DTS:VersionGUID="{BA7FFBFA-BAAA-4597-8ADD-2F770431443A}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E92560C7-30D7-4D2C-BB03-D989A16B9834}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Generated_SSIS_PkgLocation">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\31967\Desktop\TestMultipleUpload\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{304CEA5C-62C4-4EFA-A748-5B1BE6EDB94B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MetaDataConn">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{276360AB-16F2-4F96-AAA0-4A90AE68BC24}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Template_ID">
      <DTS:VariableValue
        DTS:DataType="3">40454</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Script Task"
      DTS:DTSID="{3421FBD2-7F9E-4C95-ABE4-E6C6725B883F}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Script Task.EventHandlers[OnError]"
          DTS:CreationName="OnError"
          DTS:DTSID="{00EE5626-3514-4595-9DFE-91026F68B0A4}"
          DTS:EventID="153018280"
          DTS:EventName="OnError"
          DTS:LocaleID="-1">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:Description="The propagate property of the event"
              DTS:DTSID="{671E090E-F1C5-4CE0-8AFE-6D4144C49050}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="System"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_0cef29a9393f4e4c8dda023d910526e5"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="System::CancelEvent,User::Generated_SSIS_PkgLocation,User::MetaDataConn,User::Template_ID">
          <ProjectItem
            Name="PropertyExpression.cs"
            Encoding="UTF8"><![CDATA[]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Settings.get_Default():ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Sett" +
    "ings")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="st_0cef29a9393f4e4c8dda023d910526e5.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</RootNamespace>
    <AssemblyName>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</AssemblyName>
    <ProjectGuid>{C0FCFF17-7581-4520-BCC1-8ED2A17FE389}</ProjectGuid>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>AnyCPU</PlatformTarget>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="Microsoft.SqlServer.Dts.Design, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.IntegrationServices.VSTA, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.SqlServer.IntegrationServices.VSTA\v4.0_11.0.0.0__89845dcd8080cc91\Microsoft.SqlServer.IntegrationServices.VSTA.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SqlServer.VSTAScriptingLib, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.SqlServer.VSTAScriptingLib\v4.0_11.0.0.0__89845dcd8080cc91\Microsoft.SqlServer.VSTAScriptingLib.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.XmlTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="PropertyExpression.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug8689bd6a-da98-42c5-90b6-2ebe210deb10/09281b64-d4d0-4679-8a0f-f75ce41c4722&quot;" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <PropertyGroup>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Text;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

using System.Data.SqlClient;
using System.IO;
using System.Data.OleDb;
using RuntimeWrapper = Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Xml;
using Enum1 = Microsoft.SqlServer.Dts.Runtime.Enumerators;
using ForEachLoop = Microsoft.SqlServer.Dts.Runtime.ForEachLoop;
using Microsoft.SqlServer.Dts.Tasks.ScriptTask;
using Microsoft.SqlServer.VSTAHosting;




namespace ST_5990c2c3777b441e91dac6c26abbd044.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        

        public void Main()
        {

            try
            {

//Execute ETL_GET_FILE_UPLOAD_TEMPLATE_SP  and Extract details  START
                SqlCommand Sqlcmd2 = new SqlCommand();
                SqlConnection SqlConn2 = new SqlConnection();

                SqlConn2.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                Sqlcmd2.Connection = SqlConn2;
                Sqlcmd2.CommandType = CommandType.StoredProcedure;
                Sqlcmd2.CommandText = "[dbo].[ETL_GET_FILE_UPLOAD_TEMPLATE_SP]";

                SqlParameter param;
                param = new SqlParameter("@Template_Id", Dts.Variables["Template_ID"].Value.ToString().Trim());
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.Int32;
                Sqlcmd2.Parameters.Add(param);

                SqlParameter param1;
                param1 = new SqlParameter("@Status_code", "");
                param1.Direction = ParameterDirection.Output;
                param1.DbType = DbType.String;
                Sqlcmd2.Parameters.Add(param1);

                SqlParameter param2;
                param2 = new SqlParameter("@Message", "");
                param2.Direction = ParameterDirection.Output;
                param2.DbType = DbType.String;
                Sqlcmd2.Parameters.Add(param2);

                SqlDataAdapter sqlAdp2 = new SqlDataAdapter();
                DataSet dcol = new DataSet();
                if (SqlConn2.State == ConnectionState.Closed)
                    SqlConn2.Open();
                sqlAdp2.SelectCommand = Sqlcmd2;


                SqlDataReader rdr2 = null;
                rdr2 = Sqlcmd2.ExecuteReader();
                
                string Source_Name = null;
                string File_Location = null;
                string File_Name = null;
                string Prefix_Filename = null;
                string Batch_Portion = null;
                string Batch_Name_Values = null;
                string File_Type = null;
                string File_Delimiter = null;
                string Data_Starting_Line = null;
                string Target_Table1 = null;
                string Tgt_connection = null;

                while (rdr2.Read())
                {

                    
                    Source_Name = (string)rdr2["Source_Name"];
                    File_Location = (string)rdr2["File_Location"];
                    File_Name = (string)rdr2["File_Name"];
                    Prefix_Filename = (string)rdr2["Prefix_Filename"];
                    Batch_Portion = (string)rdr2["Batch_Portion"];
                    Batch_Name_Values = (string)rdr2["Batch_Name_Values"];
                    File_Type = (string)rdr2["File_Type"];
                 
                        File_Delimiter = (string)rdr2["File_Delimiter"];
                    
                    Data_Starting_Line = (string)rdr2["Data_Starting_Line"];
                    Target_Table1 = (string)rdr2["Target_Table"];

                    Tgt_connection = (string)rdr2["Target_Connection"];

                }


                SqlConn2.Close();




//Execute ETL_GET_FILE_UPLOAD_TEMPLATE_SP  and Extract details  START

//File Properties START
              
	         string fileName=string.Empty;
                string varfileName = File_Name;
                string FullPath = File_Location + varfileName + File_Type;
                if (File_Type.Contains("xlsx"))
                {
                    fileName = varfileName.Replace(".xlsx", "");
                }
                else if (File_Type.Contains(".xls"))
                {
                    fileName = varfileName.Replace(".xls", "");
                }
                else if (File_Type.Contains(".txt"))
                {
                    fileName = varfileName.Replace(".txt", "");
                }
                else if (File_Type.Contains(".csv"))
                {
                    fileName = varfileName.Replace(".csv", "");
                }
                else if (File_Type.Contains(".xml"))
                {
                    fileName = varfileName.Replace(".xml", "");
                }
                if (File_Type.Contains(".txt") || File_Type.Contains(".csv"))
                {
                    FlatFileLoad(Target_Table1, File_Location, FullPath, varfileName, Batch_Name_Values, Tgt_connection, File_Type); 
                }
                else
                {

                    string fileSheet = File_Delimiter;
                   
                    

                    string[] fileSheets = fileSheet.Split(',');

                    foreach (string varSheet in fileSheets)
                    {

                       if (varSheet.Substring(0, 1) != "$")
                        {
                            fnAddTasks(varSheet, Target_Table1, File_Location, FullPath, varfileName, Batch_Name_Values, Tgt_connection, fileSheet);

                        }
                    }
                }
                


                Dts.TaskResult = (int)ScriptResults.Success;

            }
            catch (Exception ex)
            {


                Dts.TaskResult = (int)ScriptResults.Failure;

            }


        }

        private void FlatFileLoad( string TargetTbl, string SrcConn, string varfilePaths, string varfileName, string Batch_Name_Values, string Tgt_connection, string type)
                
        {

            Application app = new Application();
            Package package = new Package();
            package.Name = varfileName;
            Variable Key = package.Variables.Add("Key", false, "User", "");
            Executables executables = package.Executables;
            Variable Batch_ID_var = package.Variables.Add("Batch_ID_var", false, "User", Batch_Name_Values);
            Variable File_Name = package.Variables.Add("File_Name", false, "User", varfileName);
            Variable FolderPath = package.Variables.Add("FolderPath", false, "User", SrcConn);
            Variable TargetTable = package.Variables.Add("TargetTable", false, "User", TargetTbl);
            Variable SheetNames = package.Variables.Add("SheetNames", false, "User","fileSheet");
            Variable MetaDataConnection = package.Variables.Add("MetaDataConnection", false, "User", Dts.Variables["MetaDataConn"].Value.ToString());
//FOR EACH CONTAINER START           

     ForEachLoop exec_foreachloop = executables.Add("STOCK:FOREACHLOOP") as ForEachLoop;

            exec_foreachloop.Name = "For Each Loop";
            exec_foreachloop.FailPackageOnFailure = true;
            exec_foreachloop.FailParentOnFailure = true;
            exec_foreachloop.Name = varfileName;
            exec_foreachloop.Description = @"Tester";

            ///Set the properties of the ForEachLoop container:
            string type1 = "*" + type;
            ForEachEnumeratorInfo f_enum = app.ForEachEnumeratorInfos["Foreach File Enumerator"];
            ForEachEnumeratorHost f_enum_host = f_enum.CreateNew();
            f_enum_host.CollectionEnumerator = false;
            f_enum_host.Properties["Directory"].SetValue(f_enum_host, SrcConn);
            f_enum_host.Properties["FileSpec"].SetValue(f_enum_host, type1);
            f_enum_host.Properties["FileNameRetrieval"].SetValue(f_enum_host, 0);
            f_enum_host.Properties["Recurse"].SetValue(f_enum_host, "False");
            exec_foreachloop.ForEachEnumerator = f_enum_host;
            exec_foreachloop.VariableMappings.Add();
            exec_foreachloop.VariableMappings[0].VariableName = "User::Key";
            exec_foreachloop.VariableMappings[0].ValueIndex = "0";
//FOR EACH CONTAINER END           

            try
            {

//ADD Script Task START
                Executable Scrptask = exec_foreachloop.Executables.Add("STOCK:ScriptTask");
                TaskHost scrptaskhost = Scrptask as TaskHost;
                scrptaskhost.Name = "ScriptTask4FileValidation";
                ScriptTask st = (ScriptTask)scrptaskhost.InnerObject;


                st.ScriptLanguage = VSTAScriptLanguages.GetDisplayName("CSharp");

                //// Set any variables used by the script
   Variable ExcelCount = package.Variables.Add("ExcelCount", false, "User", 0);
   st.ReadOnlyVariables = "User::Key,User::MetaDataConnection,User::TargetTable,User::SheetNames";
                st.ReadWriteVariables = "User::ExcelCount";

                // Create a new project from the template located in the default path
                st.ScriptingEngine.VstaHelper.LoadNewProject(st.ProjectTemplatePath, null, "MyScriptProject");

                // Persist the VSTA project + binary to the task
                if (!st.ScriptingEngine.SaveProjectToStorage())
                {
                    throw new Exception("Save failed");
                }

                // Use the following code to replace the ScriptMain contents
		// NOTE: Script task c# code should be available in below path
                var contents = File.ReadAllText("C:\\Users\\31967\\Desktop\\TestMultipleUpload\\ScriptCode.txt");
                var scriptFile =
                    st.ScriptStorage.ScriptFiles["ScriptMain.cs"] =
                    new VSTAScriptProjectStorage.VSTAScriptFile(VSTAScriptProjectStorage.Encoding.UTF8, contents);


                // Reload the script project, build and save
                st.ScriptingEngine.LoadProjectFromStorage();
                st.ScriptingEngine.VstaHelper.Build("");

                // Persist the VSTA project + binary to the task
                if (!st.ScriptingEngine.SaveProjectToStorage())
                {
                    throw new Exception("Save failed");
                }

                // Cleanup
                st.ScriptingEngine.DisposeVstaHelper();

//ADD Script Task END


//ADD Data Flow Task
                Executable dataFlowTask = exec_foreachloop.Executables.Add("STOCK:PipelineTask");

                // Set the name (otherwise it will be a random GUID value)

                TaskHost taskHost = dataFlowTask as TaskHost;
                taskHost.Name = TargetTbl ;
                taskHost.DelayValidation = true;
                MainPipe pipeline = taskHost.InnerObject as MainPipe;
                exec_foreachloop.PrecedenceConstraints.Add(Scrptask, dataFlowTask);
                
//
// Add SQL connection manager
//
                ConnectionManager connection = package.Connections.Add("OLEDB");
                connection.Name = TargetTbl ;
                string conString = Tgt_connection;
                connection.ConnectionString = conString;
// Add SQL connection manager end

          
//
// Add FLAT file connection manager START
//

			ConnectionManager connectionManagerFlatFile = package.Connections.Add("FLATFILE");
            connectionManagerFlatFile.ConnectionString = varfilePaths;
            connectionManagerFlatFile.DelayValidation = true;
            connectionManagerFlatFile.Name = "FlatFile";
            RuntimeWrapper.IDTSConnectionManagerFlatFile100 connectionFlatFile
       = (RuntimeWrapper.IDTSConnectionManagerFlatFile100)connectionManagerFlatFile.InnerObject;
             connectionFlatFile.RowDelimiter = "\n";
       connectionFlatFile.Format = "Delimited";
connectionFlatFile.ColumnNamesInFirstDataRow = true;
       connectionFlatFile.LocaleID = 1033;
       connectionFlatFile.CodePage = 1252;
 



// Add FLAT file connection manager end


//
// Add FLAT file Source
//
                IDTSComponentMetaData100 FFSource = pipeline.ComponentMetaDataCollection.New();
                FFSource.ComponentClassID = "DTSAdapter.FlatFileSource";
                
                FFSource.Name = TargetTbl;
                FFSource.Description = "Source data in the DataFlow";
                IDTSDesigntimeComponent100 instance = FFSource.Instantiate();
                instance.ProvideComponentProperties();
                //instance.SetComponentProperty("AccessMode", 0);
                //instance.SetComponentProperty("OpenRowset", firstSheet);
                FFSource.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(connectionManagerFlatFile);
                FFSource.RuntimeConnectionCollection[0].ConnectionManagerID = connectionManagerFlatFile.ID;
                //RuntimeWrapper.IDTSConnectionManagerFlatFile100 connectionFlatFile = connectionManagerFlatFile.InnerObject as RuntimeWrapper.IDTSConnectionManagerFlatFile100;
                string line;
                int k = 0;
                char[] delimiters = new char[] { '|', ',' };

                char ColDelimiter;
                if (varfilePaths.Contains(".csv"))
                {
                    ColDelimiter = ',';
                }
                else
                {
                    ColDelimiter = '|';
                }
                using (StreamReader file = new StreamReader(varfilePaths))
                {

                    try
                    {

                        line = file.ReadLine();
                        string[] parts = line.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);

                        for (int n = 0; n < parts.Length; n++)
                        {
                            RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100 flatFileCol = connectionFlatFile.Columns.Add() as
                                RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100;
                            sS_AssignColumnProperties(flatFileCol, parts[n], ColDelimiter.ToString());
                        }

                    }
                    catch (Exception ex)
                    { throw ex; }
                    finally
                    {

                        file.Close();
                    }
                }
                
                // Acquire Connections and reinitialize the component
                instance.AcquireConnections(null);
                instance.ReinitializeMetaData();
                instance.ReleaseConnections();
// Add FLAT file Source END

//check IF Target table already exists else Create               

  
                string sqlStatement = "SELECT CASE WHEN EXISTS(SELECT 1 FROM information_schema.tables where table_name = '" + TargetTbl + "') THEN 1 ELSE 0 END TableExists";

                string dataColumns = null;


                SqlCommand Sqlcmd1 = new SqlCommand();
                SqlConnection SqlConn1 = new SqlConnection();

                SqlConn1.ConnectionString = Tgt_connection.Replace("Provider=SQLOLEDB.1;", "").Replace("Provider=SQLNCLI10.1;", "").Replace("Provider=SQLNCLI11.1;", "");
                Sqlcmd1.Connection = SqlConn1;
                Sqlcmd1.CommandType = CommandType.Text;
                Sqlcmd1.CommandText = sqlStatement;
                SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
                DataSet dsCols1 = new DataSet();
                
  if (SqlConn1.State == ConnectionState.Closed)
                    SqlConn1.Open();
                sqlAdp1.SelectCommand = Sqlcmd1;
                SqlDataReader rdr1 = null;
  int exists = 0;
                rdr1 = Sqlcmd1.ExecuteReader();
                while (rdr1.Read())
                {
                    exists = (int)rdr1["TableExists"];
                }
                SqlConn1.Close();


                if (exists == 0)
                {
                    IDTSOutputColumnCollection100 ffsourceColumns = FFSource.OutputCollection[0].OutputColumnCollection;
                    dataColumns = "CREATE TABLE " + TargetTbl + " (";
                    int colCount = 0;

                    foreach (IDTSOutputColumn100 outcol in ffsourceColumns)
                    {
                        if (colCount > 0 && outcol.Name.ToUpper() != "ROW_ID" && outcol.Name.ToUpper() != "BATCH_ID" && outcol.Name.ToUpper() != "ZZ_STATUS_CODE")
                        {
                            dataColumns = dataColumns + " nvarchar(255)," + "[" + outcol.Name + "]";
                            colCount++;
                        }
                        else
                        {
                            dataColumns = dataColumns + "[" + outcol.Name + "]";
                            colCount++;
                        }
                    }
                    dataColumns = dataColumns + " nvarchar(255),Batch_ID int, ZZ_STATUS_CODE nvarchar(1), ROW_ID int identity(1,1))";
                    Sqlcmd1.CommandText = dataColumns;
                    SqlConn1.Open();
                    Sqlcmd1.ExecuteNonQuery();
                    SqlConn1.Close();

                }
//check IF Target table already exists else Create               

//////DERIVED COLUMN START/////////

                IDTSComponentMetaData100 data_DerivedColumn = pipeline.ComponentMetaDataCollection.New();
                data_DerivedColumn.ComponentClassID = "DTSTransform.DerivedColumn";
                CManagedComponentWrapper DesignDerivedTransformColumns = data_DerivedColumn.Instantiate();
                DesignDerivedTransformColumns.ProvideComponentProperties();
                data_DerivedColumn.Name = "DerivedColTransform_Batch_Id";

                data_DerivedColumn.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                data_DerivedColumn.InputCollection[0].HasSideEffects = false;

                pipeline.PathCollection.New().AttachPathAndPropagateNotifications(FFSource.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                IDTSInput100 DerivedColumnInput = data_DerivedColumn.InputCollection[0];
                IDTSVirtualInput100 DerivedColumnVirtualInput = DerivedColumnInput.GetVirtualInput();
                IDTSVirtualInputColumnCollection100 DerivedColumnVirtualInputColumns = DerivedColumnVirtualInput.VirtualInputColumnCollection;
                IDTSCustomProperty100 ConcatProperty = null;


                string[] DerColumns = new string[1]; //create 1 empty index in array terms



                IDTSOutputColumn100 ConCatCol = data_DerivedColumn.OutputCollection[0].OutputColumnCollection.New();
                ConCatCol.Name = "Batch_ID";
                ConCatCol.ExternalMetadataColumnID = 0;
                ConCatCol.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
                ConCatCol.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;
                IDTSCustomProperty100 ConCatProp = ConCatCol.CustomPropertyCollection.New();
                ConCatCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                ConCatProp.Name = "Expression";
                ConCatProp.Value = "1";
                ConCatProp = ConCatCol.CustomPropertyCollection.New();
                ConCatProp.Name = "FriendlyExpression";
                ConCatProp.Value = "1";
                ConCatCol.MappedColumnID = 0;


//////DERIVED COLUMN END/////////                          

//////DATA CONVERT START///////// 
                IDTSComponentMetaData100 dataConvertComponent = pipeline.ComponentMetaDataCollection.New();
                dataConvertComponent.ComponentClassID = "DTSTransform.DataConvert";
                dataConvertComponent.Name = TargetTbl;
                dataConvertComponent.Description = "Data Conversion Component";
                CManagedComponentWrapper dataConvertWrapper = dataConvertComponent.Instantiate();
                dataConvertWrapper.ProvideComponentProperties();

                // Connect the source and the transform
                pipeline.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent.InputCollection[0]);

                //
                // Configure the transform
                //

                SqlCommand Sqlcmd = new SqlCommand();
                SqlConnection SqlConn = new SqlConnection();

                SqlConn.ConnectionString = conString.Replace("Provider=SQLOLEDB.1;", "").Replace("Provider=SQLNCLI10.1;", "").Replace("Provider=SQLNCLI11.1;", ""); ;
                Sqlcmd.Connection = SqlConn;
                Sqlcmd.CommandType = CommandType.Text;
                Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + TargetTbl + "'";
                SqlDataAdapter sqlAdp = new SqlDataAdapter();
                DataSet dsCols = new DataSet();
                if (SqlConn.State == ConnectionState.Closed)
                    SqlConn.Open();
                sqlAdp.SelectCommand = Sqlcmd;
                SqlDataReader rdr = null;
                rdr = Sqlcmd.ExecuteReader();
                int i = 0;
                while (rdr.Read())
                {
                    try
                    {
                        string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                        string DATA_TYPE = (string)rdr["DATA_TYPE"];
                        int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                        int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                        int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                        IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
                        IDTSOutput100 dataConvertOutput = dataConvertComponent.OutputCollection[0];
                        IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;
                        int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                        dataConvertWrapper.SetUsageType(
                                dataConvertComponent.InputCollection[0].ID,
                                dataConvertVirtualInput,
                                sourceColumnLineageId,
                                DTSUsageType.UT_READONLY);

                        IDTSOutputColumn100 ConvCol1 = dataConvertWrapper.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);
                        if (COLUMN_NAME.ToUpper() != "ROW_ID")
                        {

                            if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                            }
                            if (DATA_TYPE.ToLower() == "nvarchar")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                            }
                            else if (DATA_TYPE.ToLower() == "numeric")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                            }
                            else if (DATA_TYPE.ToLower() == "float")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                            }
                            else if (DATA_TYPE.ToLower() == "date")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                            }
                            else if (DATA_TYPE.ToLower() == "datetime")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBTIME, 0, 0, 0, 0);
                            }

                            else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                            }

                            else if (DATA_TYPE.ToLower() == "decimal")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DECIMAL, 0, 0, 0, 0);
                            }

                            ConvCol1.MappedColumnID = i;
                            dataConvertWrapper.SetOutputColumnProperty(
                                    dataConvertOutput.ID,
                                    ConvCol1.ID,
                                    "SourceInputColumnLineageID",
                                    sourceColumnLineageId);
                            dataConvertWrapper.SetOutputColumnProperty(
                               dataConvertOutput.ID,
                                   ConvCol1.ID,
                                   "ContainsID",
                                   true);
                            i = i + 1;
                        }
                    }
                    catch (Exception ex)
                    {

                    }

                }
//
// Add OLEDB Destination
//

                if (SqlConn.State == ConnectionState.Open)
                    SqlConn.Close();


                IDTSComponentMetaData100 destComponent = pipeline.ComponentMetaDataCollection.New();
                destComponent.ComponentClassID = "DTSAdapter.OleDbDestination";
                destComponent.ValidateExternalMetadata = true;

                IDTSDesigntimeComponent100 destDesignTimeComponent = destComponent.Instantiate();
                destDesignTimeComponent.ProvideComponentProperties();
                destComponent.Name = TargetTbl + "OleDb Destination";

                destDesignTimeComponent.SetComponentProperty("AccessMode", 3);
                destDesignTimeComponent.SetComponentProperty("OpenRowset", TargetTbl);

                // set connection
                destComponent.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(connection);
                destComponent.RuntimeConnectionCollection[0].ConnectionManagerID = connection.ID;

                // get metadata
                destDesignTimeComponent.AcquireConnections(null);
                destDesignTimeComponent.ReinitializeMetaData();
                destDesignTimeComponent.ReleaseConnections();

                //
                // Connect source (data conversion) and destination
                //

                IDTSPath100 path = pipeline.PathCollection.New();
                path.AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], destComponent.InputCollection[0]);

                //
                // Configure the destination
                //

                IDTSInput100 destInput = destComponent.InputCollection[0];
                IDTSVirtualInput100 destVirInput = destInput.GetVirtualInput();
                IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent.OutputCollection[0].OutputColumnCollection;
                foreach (IDTSInputColumn100 DestInputColumn in destInputCols)
                {
                    DestInputColumn.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                    DestInputColumn.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
                }


                // IDTSOutputColumnCollection100 excsourceColumns = ExcelSource.OutputCollection[0].OutputColumnCollection;



                // The OLEDB destination requires you to hook up the external data conversion columns
                foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                {
                    // Get the external column id
                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                    if (extCol != null)
                    {
                        // Create an input column from an output col of previous component.
                        destVirInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                        IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                        if (inputCol != null)
                        {
                            // map the input column with an external metadata column
                            destDesignTimeComponent.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                        }
                    }
                }

                IDTSOutputColumnCollection100 DestColumn = destComponent.OutputCollection[0].OutputColumnCollection;

                destComponent.InputCollection[0].ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;


                foreach (IDTSOutputColumn100 DestOutputCol in DestColumn)
                {
                    DestOutputCol.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                    DestOutputCol.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
                }
                connectionManagerFlatFile.SetExpression("ConnectionString", "@[User::Key]");
                string TgtFolder = Dts.Variables["Generated_SSIS_PkgLocation"].Value.ToString();
                app.SaveToXml(TgtFolder + TargetTbl + "_FF"  + ".dtsx", package, null);
                //package.Execute();

            }
            catch (Exception ex)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                string TgtFolder = Dts.Variables["Generated_SSIS_PkgLocation"].Value.ToString();
                app.SaveToXml(TgtFolder + "Excel_OLEDB.dtsx", package, null);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void fnAddTasks(string SheetName, string TargetTbl, string SrcConn, string varfilePaths, string varfileName, string Batch_Name_Values, string Tgt_connection, string fileSheet)
        {

            Application app = new Application();
            Package package = new Package();
            package.Name = varfileName;
            Variable Key = package.Variables.Add("Key", false, "User", "");
            Executables executables = package.Executables;
            Variable Batch_ID_var = package.Variables.Add("Batch_ID_var", false, "User", Batch_Name_Values);
           
            Variable File_Name = package.Variables.Add("File_Name", false, "User", varfileName);
            Variable FolderPath = package.Variables.Add("FolderPath", false, "User", SrcConn);
            Variable TargetTable = package.Variables.Add("TargetTable", false, "User", TargetTbl);
            Variable SheetNames = package.Variables.Add("SheetNames", false, "User", fileSheet);
            
            Variable MetaDataConnection = package.Variables.Add("MetaDataConnection", false, "User", Dts.Variables["MetaDataConn"].Value.ToString());
//FOR EACH CONTAINER START           

     ForEachLoop exec_foreachloop = executables.Add("STOCK:FOREACHLOOP") as ForEachLoop;

            exec_foreachloop.Name = "For Each Loop";
            exec_foreachloop.FailPackageOnFailure = true;
            exec_foreachloop.FailParentOnFailure = true;
            exec_foreachloop.Name = varfileName;
            exec_foreachloop.Description = @"Tester";

            ///Set the properties of the ForEachLoop container:

            ForEachEnumeratorInfo f_enum = app.ForEachEnumeratorInfos["Foreach File Enumerator"];
            ForEachEnumeratorHost f_enum_host = f_enum.CreateNew();
            f_enum_host.CollectionEnumerator = false;
            f_enum_host.Properties["Directory"].SetValue(f_enum_host, SrcConn);
            f_enum_host.Properties["FileSpec"].SetValue(f_enum_host, "*.xls");
            f_enum_host.Properties["FileNameRetrieval"].SetValue(f_enum_host, 0);
            f_enum_host.Properties["Recurse"].SetValue(f_enum_host, "False");
            exec_foreachloop.ForEachEnumerator = f_enum_host;
            exec_foreachloop.VariableMappings.Add();
            exec_foreachloop.VariableMappings[0].VariableName = "User::Key";
            exec_foreachloop.VariableMappings[0].ValueIndex = "0";
//FOR EACH CONTAINER END           

            try
            {

//ADD Script Task START
                Executable Scrptask = exec_foreachloop.Executables.Add("STOCK:ScriptTask");
                TaskHost scrptaskhost = Scrptask as TaskHost;
                scrptaskhost.Name = "ScriptTask4FileValidation";
                ScriptTask st = (ScriptTask)scrptaskhost.InnerObject;


                st.ScriptLanguage = VSTAScriptLanguages.GetDisplayName("CSharp");

                //// Set any variables used by the script
   Variable ExcelCount = package.Variables.Add("ExcelCount", false, "User", 0);
   st.ReadOnlyVariables = "User::Key,User::MetaDataConnection,User::TargetTable,User::SheetNames";
                st.ReadWriteVariables = "User::ExcelCount";

                // Create a new project from the template located in the default path
                st.ScriptingEngine.VstaHelper.LoadNewProject(st.ProjectTemplatePath, null, "MyScriptProject");

                // Persist the VSTA project + binary to the task
                if (!st.ScriptingEngine.SaveProjectToStorage())
                {
                    throw new Exception("Save failed");
                }

                // Use the following code to replace the ScriptMain contents
		// NOTE: Script task c# code should be available in below path
                var contents = File.ReadAllText("C:\\Users\\31967\\Desktop\\TestMultipleUpload\\ScriptCode.txt");
                var scriptFile =
                    st.ScriptStorage.ScriptFiles["ScriptMain.cs"] =
                    new VSTAScriptProjectStorage.VSTAScriptFile(VSTAScriptProjectStorage.Encoding.UTF8, contents);


                // Reload the script project, build and save
                st.ScriptingEngine.LoadProjectFromStorage();
                st.ScriptingEngine.VstaHelper.Build("");

                // Persist the VSTA project + binary to the task
                if (!st.ScriptingEngine.SaveProjectToStorage())
                {
                    throw new Exception("Save failed");
                }

                // Cleanup
                st.ScriptingEngine.DisposeVstaHelper();

//ADD Script Task END


//ADD Data Flow Task
                Executable dataFlowTask = exec_foreachloop.Executables.Add("STOCK:PipelineTask");

                // Set the name (otherwise it will be a random GUID value)

                TaskHost taskHost = dataFlowTask as TaskHost;
                taskHost.Name = TargetTbl + "_" + SheetName;
                taskHost.DelayValidation = true;
                MainPipe pipeline = taskHost.InnerObject as MainPipe;
                exec_foreachloop.PrecedenceConstraints.Add(Scrptask, dataFlowTask);
                
//
// Add SQL connection manager
//
                ConnectionManager connection = package.Connections.Add("OLEDB");
                connection.Name = TargetTbl + SheetName;
                string conString = Tgt_connection;
                connection.ConnectionString = conString;
// Add SQL connection manager end

          
//
// Add Excel connection manager START
//
//For ACE type file connection string to be replaced with excelconnection.ConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + varfilePaths + @";Extended Properties =""Excel 12.0 Xml;HDR=YES""";

                
                ConnectionManager excelconnection = package.Connections.Add("Excel");
excelconnection.ConnectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + varfilePaths + @";Extended Properties=""EXCEL 8.0;HDR=YES""";
                     excelconnection.DelayValidation = true;
                	DataTable tablesInFile;
string connectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + varfilePaths + @";Extended Properties=""EXCEL 8.0;HDR=YES""";
                	OleDbConnection excelConnectionSheet;
                	excelConnectionSheet = new OleDbConnection(connectionString);
                	
excelConnectionSheet.Open();
                	tablesInFile = excelConnectionSheet.GetSchema("Tables");
                	string firstSheet = SheetName;
                	excelConnectionSheet.Close();

                	excelconnection.Name = "Excel " + TargetTbl + SheetName;

// Add Excel connection manager end


//
// Add Excel Source
//
                IDTSComponentMetaData100 ExcelSource = pipeline.ComponentMetaDataCollection.New();
                ExcelSource.ComponentClassID = "DTSAdapter.EXCELSource";
                ExcelSource.ValidateExternalMetadata = true;
                ExcelSource.Name = TargetTbl;
                ExcelSource.Description = "Source data in the DataFlow";
                IDTSDesigntimeComponent100 instance = ExcelSource.Instantiate();
                instance.ProvideComponentProperties();
                instance.SetComponentProperty("AccessMode", 0);
                instance.SetComponentProperty("OpenRowset", firstSheet);
                ExcelSource.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(excelconnection);
                ExcelSource.RuntimeConnectionCollection[0].ConnectionManagerID = excelconnection.ID;

                
                // Acquire Connections and reinitialize the component
                instance.AcquireConnections(null);
                instance.ReinitializeMetaData();
                instance.ReleaseConnections();
// Add Excel Source END

//check IF Target table already exists else Create               

  
                string sqlStatement = "SELECT CASE WHEN EXISTS(SELECT 1 FROM information_schema.tables where table_name = '" + TargetTbl + "') THEN 1 ELSE 0 END TableExists";

                string dataColumns = null;


                SqlCommand Sqlcmd1 = new SqlCommand();
                SqlConnection SqlConn1 = new SqlConnection();

                SqlConn1.ConnectionString = Tgt_connection.Replace("Provider=SQLOLEDB.1;", "").Replace("Provider=SQLNCLI10.1;", "").Replace("Provider=SQLNCLI11.1;", "");
                Sqlcmd1.Connection = SqlConn1;
                Sqlcmd1.CommandType = CommandType.Text;
                Sqlcmd1.CommandText = sqlStatement;
                SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
                DataSet dsCols1 = new DataSet();
                
  if (SqlConn1.State == ConnectionState.Closed)
                    SqlConn1.Open();
                sqlAdp1.SelectCommand = Sqlcmd1;
                SqlDataReader rdr1 = null;
  int exists = 0;
                rdr1 = Sqlcmd1.ExecuteReader();
                while (rdr1.Read())
                {
                    exists = (int)rdr1["TableExists"];
                }
                SqlConn1.Close();


                if (exists == 0)
                {
                    IDTSOutputColumnCollection100 excsourceColumns = ExcelSource.OutputCollection[0].OutputColumnCollection;
                    dataColumns = "CREATE TABLE " + TargetTbl + " (";
                    int colCount = 0;

                    foreach (IDTSOutputColumn100 outcol in excsourceColumns)
                    {
                        if (colCount > 0 && outcol.Name.ToUpper() != "ROW_ID" && outcol.Name.ToUpper() != "BATCH_ID" && outcol.Name.ToUpper() != "ZZ_STATUS_CODE")
                        {
                            dataColumns = dataColumns + " nvarchar(255)," + "[" + outcol.Name + "]";
                            colCount++;
                        }
                        else
                        {
                            dataColumns = dataColumns + "[" + outcol.Name + "]";
                            colCount++;
                        }
                    }
                    dataColumns = dataColumns + " nvarchar(255),Batch_ID int, ZZ_STATUS_CODE nvarchar(1), ROW_ID int identity(1,1))";
                    Sqlcmd1.CommandText = dataColumns;
                    SqlConn1.Open();
                    Sqlcmd1.ExecuteNonQuery();
                    SqlConn1.Close();

                }
//check IF Target table already exists else Create               

//////DERIVED COLUMN START/////////

                IDTSComponentMetaData100 data_DerivedColumn = pipeline.ComponentMetaDataCollection.New();
                data_DerivedColumn.ComponentClassID = "DTSTransform.DerivedColumn";
                CManagedComponentWrapper DesignDerivedTransformColumns = data_DerivedColumn.Instantiate();
                DesignDerivedTransformColumns.ProvideComponentProperties();
                data_DerivedColumn.Name = "DerivedColTransform_Batch_Id";

                data_DerivedColumn.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                data_DerivedColumn.InputCollection[0].HasSideEffects = false;

                pipeline.PathCollection.New().AttachPathAndPropagateNotifications(ExcelSource.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                IDTSInput100 DerivedColumnInput = data_DerivedColumn.InputCollection[0];
                IDTSVirtualInput100 DerivedColumnVirtualInput = DerivedColumnInput.GetVirtualInput();
                IDTSVirtualInputColumnCollection100 DerivedColumnVirtualInputColumns = DerivedColumnVirtualInput.VirtualInputColumnCollection;
                IDTSCustomProperty100 ConcatProperty = null;


                string[] DerColumns = new string[1]; //create 1 empty index in array terms



                IDTSOutputColumn100 ConCatCol = data_DerivedColumn.OutputCollection[0].OutputColumnCollection.New();
                ConCatCol.Name = "Batch_ID";
                ConCatCol.ExternalMetadataColumnID = 0;
                ConCatCol.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
                ConCatCol.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;
                IDTSCustomProperty100 ConCatProp = ConCatCol.CustomPropertyCollection.New();
                ConCatCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                ConCatProp.Name = "Expression";
                ConCatProp.Value = "1";
                ConCatProp = ConCatCol.CustomPropertyCollection.New();
                ConCatProp.Name = "FriendlyExpression";
                ConCatProp.Value = "1";
                ConCatCol.MappedColumnID = 0;


//////DERIVED COLUMN END/////////                          

//////DATA CONVERT START///////// 
                IDTSComponentMetaData100 dataConvertComponent = pipeline.ComponentMetaDataCollection.New();
                dataConvertComponent.ComponentClassID = "DTSTransform.DataConvert";
                dataConvertComponent.Name = TargetTbl;
                dataConvertComponent.Description = "Data Conversion Component";
                CManagedComponentWrapper dataConvertWrapper = dataConvertComponent.Instantiate();
                dataConvertWrapper.ProvideComponentProperties();

                // Connect the source and the transform
                pipeline.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent.InputCollection[0]);

                //
                // Configure the transform
                //

                SqlCommand Sqlcmd = new SqlCommand();
                SqlConnection SqlConn = new SqlConnection();

                SqlConn.ConnectionString = conString.Replace("Provider=SQLOLEDB.1;", "").Replace("Provider=SQLNCLI10.1;", "").Replace("Provider=SQLNCLI11.1;", ""); ;
                Sqlcmd.Connection = SqlConn;
                Sqlcmd.CommandType = CommandType.Text;
                Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + TargetTbl + "'";
                SqlDataAdapter sqlAdp = new SqlDataAdapter();
                DataSet dsCols = new DataSet();
                if (SqlConn.State == ConnectionState.Closed)
                    SqlConn.Open();
                sqlAdp.SelectCommand = Sqlcmd;
                SqlDataReader rdr = null;
                rdr = Sqlcmd.ExecuteReader();
                int i = 0;
                while (rdr.Read())
                {
                    try
                    {
                        string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                        string DATA_TYPE = (string)rdr["DATA_TYPE"];
                        int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                        int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                        int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                        IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
                        IDTSOutput100 dataConvertOutput = dataConvertComponent.OutputCollection[0];
                        IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;
                        int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                        dataConvertWrapper.SetUsageType(
                                dataConvertComponent.InputCollection[0].ID,
                                dataConvertVirtualInput,
                                sourceColumnLineageId,
                                DTSUsageType.UT_READONLY);

                        IDTSOutputColumn100 ConvCol1 = dataConvertWrapper.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);
                        if (COLUMN_NAME.ToUpper() != "ROW_ID")
                        {

                            if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                            }
                            if (DATA_TYPE.ToLower() == "nvarchar")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                            }
                            else if (DATA_TYPE.ToLower() == "numeric")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                            }
                            else if (DATA_TYPE.ToLower() == "float")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                            }
                            else if (DATA_TYPE.ToLower() == "date")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                            }
                            else if (DATA_TYPE.ToLower() == "datetime")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBTIME, 0, 0, 0, 0);
                            }

                            else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                            }

                            else if (DATA_TYPE.ToLower() == "decimal")
                            {
                                ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DECIMAL, 0, 0, 0, 0);
                            }

                            ConvCol1.MappedColumnID = i;
                            dataConvertWrapper.SetOutputColumnProperty(
                                    dataConvertOutput.ID,
                                    ConvCol1.ID,
                                    "SourceInputColumnLineageID",
                                    sourceColumnLineageId);
                            dataConvertWrapper.SetOutputColumnProperty(
                               dataConvertOutput.ID,
                                   ConvCol1.ID,
                                   "ContainsID",
                                   true);
                            i = i + 1;
                        }
                    }
                    catch (Exception ex)
                    {

                    }

                }
//
// Add OLEDB Destination
//

                if (SqlConn.State == ConnectionState.Open)
                    SqlConn.Close();


                IDTSComponentMetaData100 destComponent = pipeline.ComponentMetaDataCollection.New();
                destComponent.ComponentClassID = "DTSAdapter.OleDbDestination";
                destComponent.ValidateExternalMetadata = true;

                IDTSDesigntimeComponent100 destDesignTimeComponent = destComponent.Instantiate();
                destDesignTimeComponent.ProvideComponentProperties();
                destComponent.Name = TargetTbl + "OleDb Destination";

                destDesignTimeComponent.SetComponentProperty("AccessMode", 3);
                destDesignTimeComponent.SetComponentProperty("OpenRowset", TargetTbl);

                // set connection
                destComponent.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(connection);
                destComponent.RuntimeConnectionCollection[0].ConnectionManagerID = connection.ID;

                // get metadata
                destDesignTimeComponent.AcquireConnections(null);
                destDesignTimeComponent.ReinitializeMetaData();
                destDesignTimeComponent.ReleaseConnections();

                //
                // Connect source (data conversion) and destination
                //

                IDTSPath100 path = pipeline.PathCollection.New();
                path.AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], destComponent.InputCollection[0]);

                //
                // Configure the destination
                //

                IDTSInput100 destInput = destComponent.InputCollection[0];
                IDTSVirtualInput100 destVirInput = destInput.GetVirtualInput();
                IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent.OutputCollection[0].OutputColumnCollection;
                foreach (IDTSInputColumn100 DestInputColumn in destInputCols)
                {
                    DestInputColumn.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                    DestInputColumn.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
                }


                // IDTSOutputColumnCollection100 excsourceColumns = ExcelSource.OutputCollection[0].OutputColumnCollection;



                // The OLEDB destination requires you to hook up the external data conversion columns
                foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                {
                    // Get the external column id
                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                    if (extCol != null)
                    {
                        // Create an input column from an output col of previous component.
                        destVirInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                        IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                        if (inputCol != null)
                        {
                            // map the input column with an external metadata column
                            destDesignTimeComponent.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                        }
                    }
                }

                IDTSOutputColumnCollection100 DestColumn = destComponent.OutputCollection[0].OutputColumnCollection;

                destComponent.InputCollection[0].ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;


                foreach (IDTSOutputColumn100 DestOutputCol in DestColumn)
                {
                    DestOutputCol.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                    DestOutputCol.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
                }
              //  excelconnection.SetExpression("ExcelFilePath", "@[User::Key]");
                string TgtFolder = Dts.Variables["Generated_SSIS_PkgLocation"].Value.ToString();
                app.SaveToXml(TgtFolder + TargetTbl + "_" + SheetName.Replace("$", "") + ".dtsx", package, null);
                //package.Execute();

            }
            catch (Exception ex)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                string TgtFolder = Dts.Variables["Generated_SSIS_PkgLocation"].Value.ToString();
                app.SaveToXml(TgtFolder + "Excel_OLEDB.dtsx", package, null);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }
        private static void sS_AssignColumnProperties(RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100 flatFileCol, string getColName, string getDelim)
        {


            flatFileCol.ColumnType = "Delimited";
            flatFileCol.ColumnDelimiter = getDelim;


            flatFileCol.DataType = RuntimeWrapper.DataType.DT_STR;


            flatFileCol.ColumnWidth = 255;


            RuntimeWrapper.IDTSName100 columnName = flatFileCol as RuntimeWrapper.IDTSName100;
            columnName.Name = getColName.ToString();
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:NoContent>Reference;Import;Folder</msb:NoContent>
		<msb:ProjectId>{BCC422BA-10FD-488F-8FE6-8AF6FD310273}</msb:ProjectId>
		<msb:DisplayName>st_0cef29a9393f4e4c8dda023d910526e5</msb:DisplayName>
		<msb:CodeName>st_0cef29a9393f4e4c8dda023d910526e5</msb:CodeName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Folder Include="Service References\"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="PropertyExpression.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Project Include="st_0cef29a9393f4e4c8dda023d910526e5.csproj"/>
		<msb:Breakpoint Include="5aa2485d4eea47f69a7fa5e59e8e8d44">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:LineNumber>944</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="28186929acc0400fa865b037c3396516">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:LineNumber>906</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="29a67388e3294669b909c726ffe91c89">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:LineNumber>1057</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="a12a71ed4f304c6baa42d1ea205e5234">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>38</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>1</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hexaware")]
[assembly: AssemblyProduct("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyCopyright("Copyright @ Hexaware 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_0cef29a9393f4e4c8dda023d910526e5.csproj.dll">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
BQAAEQJyvgYAcG8NAAAGAgRvDwAABgIggQAAAG8UAAAGAiD/AAAAbxEAAAYCdSYAAAIKBgNvHAAA
Cm+cAAAGKh4CKMsAAAoqtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNl
UmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1Ymxp
Y0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3Vy
Y2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAA
AAUAbAAAAOwkAAAjfgAAWCUAAMwgAAAjU3RyaW5ncwAAAAAkRgAAvBAAACNVUwDgVgAAEAAAACNH
VUlEAAAA8FYAAMAPAAAjQmxvYgAAAAAAAAACAAABVz+iAQkDAAAA+iUzABYAAAEAAACCAAAAKgAA
AEYAAACcAAAAgQAAABoAAADSAAAAPwAAAPIAAABIAAAABQAAABUAAAA1AAAAVwAAAAEAAAAHAAAA
AQAAAAEAAAAAAAoAAQAAAAAABgDWAM8ACgDyAN0ADgBSASkBBgBuAc8ABgCEAXMBBgC1AaABBABM
AnMCBgByA1gDBgCdA4sDBgC0A4sDBgDRA4sDBgDwA4sDBgAJBIsDBgAiBIsDBgA9BIsDBgBYBIsD
BgBxBIsDBgCqBIoEBgDKBIoEBgAmBRMFBgBDBc8ABgBIBc8ABgBsBYsDCgCYBYIFCgCxBYIFBgDG
BYoEDgDoBSkBEgAsBhYGEgA3BhYGDgBFBikBFgCeBn4GFgC2Bn4GBgDbBs8AEgD6BucGEgArB+cG
EgA1BwoGEgBhBxYGEgBuB+cGEgB6BwoGEgCbBwoGEgCtBxYGEgDXBxYGEgDmBwoGEgDuBwoGEgAf
CBYGEgA7COcGBgBxCM8ABgCjCM8AFgCtCH4GFgC5CH4GFgDBCH4GFgDXCH4GFgDzCH4GFgD+CH4G
FgBLCX4GFgB9CX4GFgCTCX4GFgDMCX4GFgDpCX4GBgD+Cc8AFgAaCn4GFgBHCn4GFgB+Cn4GDgCX
CikBGgDnCscKDgBKCykBGgB2C8cKGgCKC8cKBgDrC+ELGgD8C8cKBgA6DCcMGwFUDAAAGwFjDAAA
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
ASABALgVACAAAAAAASABANcVACAAAAAAAQABAAAWAQABACQWASABAMAWACAAAAAAAQABANcWAQAB
APsWASABADYXACAAAAAAAQABAGIXACAAAAAAACAAAAAAACAAAAAAACAAAAAAACAAAAAAASABAEYY
ACAAAAAAASABAFcYACAAAAAAASABAIIYACAAAAAAACAAAAAAACAAAAAAACAAAAAAAQABAM0YACAA
AAAAAQABAFAZAQACAFoZASADAG0ZASAEAHYZACAAAAAAAQABAIYZASACAI8ZAQADAKcZAQAEALIZ
ACAAAAAAASABAL0ZASACAMoZACAAAAAAAQABAFAZAQACAN0ZASADAL0ZASAEAMoZASABAPkZACAA
AAAAAQABAIYZAQACABIaAQADACEaACAAAAAAASABADsaACAAAAAAASABAGoaACAAAAAAASABAJka
ACAAAAAAACAAAAAAASABADsaAQABAMwaACAAAAAAACAAAAAAACAAAAAAAQABAMwaACAAAAAAASAB
AFcYACAAAAAAAQABACIbAQABAD8bAQACAEkbAQADAFEbAQAEAFwbAQAFAGMbAQABAIUbAQABAIUb
AQABANkbACAAAAAAASABADsaAQABAMwaAQABAHUcACAAAAAAACAAAAAAAQABAIUbACAAAAAAACAA
AAAAASABADsaAQABAPwcACAAAAAAASABAAwdASACABgdACAAAAAAAQABAKcZAQACALIZACAAAAAA
ASABADsaACAAAAAAACAAAAAAASABAFcYACAAAAAAASABAIgdAQABAMwaAQABAIUbAQABAIUbACAA
AAAAACAAAAAAAQABAKcZAQABAMwaACAAAAAAASABAFcYBwAkAAcAnAAJAJwACgABAgsAoAAMADQA
DgABAg8AoAARAAECEgABAhMAoAAUAAECFQCgABYAAQIXAKAAGAABAhkAAQIaAKAAGwCgABwAAQIe
AAECHwCgACEAoAAiAKAAJAABAiUAoABBANEBdwBJANEBdwBRANEBdwBZANEBdwBhANEBdwBpANEB
dwBxANEBdwB5ANEBdwCBANEBdwCJANEBdwCRANEBfACZANEBGwChANEBGwAJANEBGwCpAFoFgQCp
AHUFiAApANEBjQDBANEBmQDRANEBGwARANEBGwDZANEBGwDhANEBGwDpANEBGwAZAFcGrADxAKgG
sQD5AL8GtgABAcgGvQAJANIGwQAJAeIGwQARAQcHdwDhABwHxQAZAUEHywAZAVEHdwApAdEB0gAx
AY0H2AAxAaIH3wDhAMQH5gBJAdMH7ABRAdEBGwBZAdEBGwARAf4H9QARAQgIGwBRAQ0I+wDhAC0I
AQFxAb8GBwFxAUgIDAERAU0IGwAJAVMIEAEJAVkIEwEJAWAIGgEJAWkIHwEJAXYIJQEJAXwILAEJ
AYYIMgHxAJQIfACJAdEBGwCRAdEBGwCZAc4IdwCZAagGsQD5ANMHYAGRAeMIagGhAdMHcAGZAQoJ
dwGZASMJdwGZATsJdwAJAVkIfAGJAWIJggG5Ab8GiAHBAakJjwHJAbMJdwHJAdoJlQHRAb8GmwHZ
AfUJogGxAQQKqAGxATIKrwHpAdMHtQHpAb8GuwHxAV4KdwDxAW8KwgGxAeMIagH5AYcKvQAJAvsK
xwEBAgoLdwABAh0LdwABAjMLdwABAmILzAEZApYL0gEBAqULwQAhAr0L2AEZAswLDAGBAdEBdwAp
AvALxwEBAhUM3wExAkQM5QFBAtEB6wE5AmwMogEZAnUMDAEhAowM8wEZApIMGwCZAaQMdwGxAQAN
+QFZAtMH/wGRATsNCwJpAtMHEQJxAs4IdwBxAgcHdwBxAqQMdwFxAocKvQDrAH4NdwCzAI8NdwDb
AJoNdwHDALgNfAADAcUNfAAjAQUOGAI7AT4OHQJ7AUIOdwBjAc4IdwBTATsJdwCTAXAOIgLDAZcO
GwCjAdUOJwIrAr8GLAK5AlUPMgJTAmoPOwJxAoAPwQBDAocPdwDRAtEBdwDZArcPwQAJAXYIQQIT
AfsPSwJjAtMHUAJ5AdIGwQDZAk0IGwDxAhMQGwALAhsQwgHLAS4QGwATAkMQGwCLAW4QVQJrAr8G
WgKLAq8QYAKbAtYQZQIRA+QQvQDLAgQRwQAJAQ0RwQAJAVkIawIRAxURDAEZAR4RcwKDAUURdwJL
A78GfAKzA44RggLTA7MRdwFzA74RdwErAecRhwLjAz4OjALzAwYSkQKDAz4SmQIDBHISngKrAj4O
owLTAs4IdwBDA5MSfAAbA8ISqAIrA9oSqALjAhcTrgIjBD4OswILA1MTuAI7BM4IdwBTBGkTwgH7
AnMTfAB5A44TwwITBL8GyAJjBLATcwJTA4APcwLjAd4TzwJzAoAPcwLTAesT3AIJAQAUwQAJAQgU
MgGzAoAPcwL7ARQU5QK7ATQUdwHrAVEU7gKLA4MU9QKrBNYQZQKLBMISqAKbBNoSqAK7A78G+wIL
BN4TAgO7BLsUCgNrBIAPcwLDBIAPcwIjAtUUEQOjA8ISqAJxAuQUGgOJAf0UIAO5A9EBdwARATMV
0wMJAVkI2gNrAD0VdwB7AEwVdwCjAGAVewSLAG0VfADjBM4IdwAZANEBGwDRA9EBfADZA9EBdwDh
A9EBGwDpA9EBGwD5A9EBDQUJBNEBdwDhA9EBGgMIABQAbQAIABgAcgAIACAAbQAIACQAcgAIACgA
vgoIACwAwwoIADQAbQAIADgAcgAIADwAvgoIAEAAigsIAEQAwwoIAEgAjwsIAEwAlAsIAFAAmQsI
AFQAngsIAFgAowsIAFwAqAsIAGAArQsIAGQAsgsIAGgAtwsIAGwAvAsIAHAAwQsIAHQAxgsIAHgA
ywsIAHwA0AsIAIAA1QsIAIQA2gsIAIgA3wsIAIwA5AsIAJAA6QsIAJQA7gsIAJgA8wsIAJwA+AsI
AKAA/QsIAKQAAgwIAKgABwwIAKwADAwIALAAEQwIALQAFgwIALgAGwwIALwAIAwIAMAAJQwIAMQA
KgwIAMgALwwIAMwANAwIANAAOQwIANQAPgwIANgAQwwIANwASAwIAOAATQwIAOQAUgwIAOgAVwwI
AOwAXAwIAPAAYQwIAPQAZgwIAPgAawwIAPwAcAwIAAABdQwIAAQBegwIAAgBfwwIABABbQAIABQB
cgAIABgBvgopAJMAnwAuACsAaA8uADsAdg8uAEMAYg8uACMAYg8uADMAMg8uABsAYg8uAFsAlQ8u
AGMAng8uAAsA6g4uABMAMg9DAGsAcgBJAJMAnwBhAJsAcgCDAKsAcgDDAHMGcgDDAGsGuQTDAJsA
cgDjAHMGcgDjAGsG4wTjAIMGEwXjAJsAcgADAWsGogUDAZsAcgADAXMGcgAjAWsG4wQjAZsAcgAj
AXMGcgBDAYsGGwZDAXMGcgBDAWsG8QVDAZsAcgBjAXMGcgBjAWsGagZjAZsAcgCDAWsGlAaDAZsA
cgCDAXMGcgCDAYMGEwWgAWMGnwCjAXMGcgCjAWsGlAajAZsAcgDAAWMGnwDDAYsGGwbDAXMGcgDD
AZsAcgDDAWsGBwfgAWMGigTjAWsGOwfjAZsAcgDjAXMGcgAAAmMGigQDAnMGcgADApsAcgADAmsG
ZQcgAmMGkwQjAmsGjwcjAosGGwYjAnMGcgAjApsAcgBAAmMGkwRDAnMGcgBDAosGGwZDAmsGvwdD
ApsAcgBjAnMGcgBjAmsG9wdjApsAcgCAAmMGnASDAnMGcgCDAosGGwaDAmsG1wiDApsAcgCgAmMG
nASjAnMGcgCjAmsGNAmjApsAcgDAAmMGcwXDAmsGZAnDAosGGwbDAnMGcgDDApsAcgDgAmMGcwXj
AmsGqwnjApsAcgDjAnMGcgAAA2MGnwADA2sG3AkDA3MGcgADA5sAcgADA4sGGwYgA2MGnwAjA2sG
BgojA4sGGwYjA3MGcgAjA5sAcgBDA3MGcgBDA2sGMApDA5sAcgBgA2MGnARjA3MGcgBjA2sGXwpj
A5sAcgCAA2MGnASDA3MGcgCDA2sGkAqDA5sAcgCDA4sGGwagA2MGfAWjA5MGyAqjA5sAcgDAA2MG
fAXDA2sGLQvDA3MGcgDDA5sAcgDDA4sGGwbjA2sGWwvjA5sAcgDjA3MGcgAABGMGhQUDBJsAcgAD
BJMGhAwgBGMGhQUjBGsG3wwjBHMGcgAjBJsAcgBABGMGjgVDBJsAcgBDBGsGGw1DBHMGcgBjBJsA
cgBjBJMGSg2ABGMGzAWDBIsGGwaDBJsAcgCDBHMGcgCDBGsGqg2gBGMG1QWjBHMGcgCjBJsAcgCj
BGsG1A3DBHMGcgDDBGsGBw7DBJsAcgDgBGMG6AXjBGsGMQ7jBHMGcgDjBJsAcgADBWsGWw4DBZsA
cgADBXMGcgAgBWMGzAUjBZsAcgAjBWsGhQ4jBXMGcgBABWMGzAVDBWsGrw5DBYsG2Q5DBXMGcgBD
BZsAcgBgBWMG1QWABWMG1QXABWMGJQbgBWMGJQYABmMGLgYgBmMGNwZABmMGQAaABmMGSQbABmMG
UgbgBmMGUgYAB2MGjgUgB2MGzAVAB2MG1QWAB2MGvgagB2MGxwbgB2MG0gYgCGMG2wZACGMG5gaA
CGMG7wagCGMG+AbgCGMGJQYACWMGJQYgCWMGLgZACWMGLgaACWMGnwCgCWMG+AbACWMGjgXgCWMG
jgUgCmMG6QdgCmMGIQigCmMG6AXACmMGjgXgCmMGjgUgC2MG1QVAC2MG1QWAC2MG6QfAC2MGAQng
C2MGAQkgDGMGSQZADGMGDwlgDGMGDwmADGMGGAmgDGMGGAngDGMGIQkADWMGIQkgDWMG+AZADWMG
jgVgDWMGjgWgDWMGJQbADWMGJQYADmMGjgkgDmMG6QdgDmMGlwmADmMGlwnADmMGGAngDmMG+AYg
D2MGJQZAD2MGJQaAD2MG6AXAD2MGQAYAEGMGJQYgEGMGQAZAEGMG+AaAEGMG6AXAEGMG1QXgEGMG
1QUgEWMGJQZAEWMGJQaAEWMGAQmgEWMGjgXAEWMGjgUAEmMGCQ0gEmMGCQ1AEmMGEg1gEmMGEg2g
EmMGIQjgEmMGJQYAE2MGjgUgE2MGjgVgE2MG/g2AE2MG/g0pAIgEKwCIBC0AiAQvAIgENQCIBDcA
iAQ9AIgEPwCIBEMAlwVFAJcFRwCXBUkAlwVLAIgETQCIBE8AiARRAIgEUwCIBFUAiARXAJcFWQCX
BVsAlwVdAJcFYQCXBWcAiARpAIgEawCXBW8AlwV1AJcFdwCIBHkA0AZ7AJcFgQCIBIMA0AaFAOQG
hwCXBY8AlwWRANAGkwCIBJUAiASXAJcFmQCXBZsAlwWdAJcFnwDQBqMAlwWlACoIpwCXBasAiASt
AIgErwCXBcMAlwXFANAGywCXBc0AlwXRAJcF0wCXBdUA0AbZAJcF2wCXBd0AlwXfAJcF5QCXBecA
0AbpAJcF6wCIBO0AiATvANAG8QDQBvkAKgj7AJcFAQGIBAMBiASUADgBKwPgA4IEAgABAAMAAwAG
AAQACAAIAAkADgALABAADgAXAA8AGAASABoAEwAbABUAHQAWACQAFwAlABgAKgAbACwAHAAtAB8A
LgAhADAAIgAxACUANAAmADUAAACEAS8AAAADAjQAAAAnAkIAAAA8FqsEAABHFqsEAABXFq8EAABK
E7MEAAB6F6sEAACBF68EAACKF5kFAACkF6sEAACxF68EAAC6F50FAADOF94FAADqF+MFAADYGKsE
AADkGKsEAADpGKsEAAD6GFsGAAAKGWAGAAAbGWUGAAA3GZkFAABBGgEHAACxGqsEAABLDTYHAABB
GrkHAADdGq8EAADgGvIHAADdGq8EAADkGKsEAAD0GyoJAAANHK8EAAAcHC8JAAAwHC8JAABJHK8E
AABBGl4JAADdGq8EAACeHJkFAACtHKAJAAAcHC8JAADDHKYJAABBGtUJAAAFHZkFAAAjHVoKAABB
GokKAADkGKsEAACQHVcLAAAWIK8EAADdGq8EAAAcHC8JAAAwHC8JAADdGq8EAADkGKsEAgACAAMA
AgADAAUAAQAEAAUAAgAFAAcAAgAOAAkAAQANAAkAAgAQAAsAAQAPAAsAAQARAA0AAgASAA0AAQAU
AA8AAgAVAA8AAgAXABEAAQAWABEAAgAZABMAAQAYABMAAQAbABUAAgAcABUAAgAeABcAAQAdABcA
AgAhABkAAQAgABkAAgAiABsAAgAkAB0AAgAlAB8AAgApACEAAQAqACEAAQAsACMAAgArACMAAgAu
ACUAAQAvACUAAgAwACcAAgAxACkAAgA0ACsAAgA2AC0AAQA3AC0AAgBFAC8AAgBHADEAAQBIADEA
AgBJADMAAQBKADMAAgBNADUAAQBPADcAAgBOADcAAgBRADkAAgBWADsAAQBXADsAAgBZAD0AAQBa
AD0AAgBcAD8AAgBeAEEAAQBfAEEAAQBjAEMAAgBiAEMAAQBlAEUAAgBkAEUAAgBnAEcAAQBoAEcA
AgBpAEkAAgBqAEsAAQBrAEsAAgBtAE0AAQBuAE0AAgBxAE8AAgBzAFEAAQB0AFEAAgB2AFMAAgB3
AFUAAQB6AFcAAgB5AFcAAgCAAFkAAgCCAFsAAgCGAF0AAQCHAF0AAQCKAF8AAgCJAF8AAgCMAGEA
AgCNAGMAAQCOAGMAAQCRAGUAAgCQAGUAAgCSAGcAAQCTAGcAAgCYAGkAAQCZAGkAAgCbAGsAAQCc
AGsABIAAAAEAAAC3GDFjAAAAAAAA6AQAAAQAAAAAAAAAAAAAAAEAxgAAAAAABAAAAAAAAAAAAAAA
AQDPAAAAAAALAAAAAAAAAAAAAAAKAAoBAAAAAAQAAAAAAAAAAAAAAAEACgYAAAAACwAAAAAAAAAA
AAAACgBfBgAAAAALAAAAAAAAAAAAAAAKAKIKAAAAAAsAAAAAAAAAAAAAAAoAGQ8AAAAAAAAAAAEA
AACCIAAABQAEAAAAADxNb2R1bGU+AFNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1
LmNzcHJvai5kbGwAUmVzb3VyY2VzAFNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1
LmNzcHJvai5Qcm9wZXJ0aWVzAFNldHRpbmdzAFNjcmlwdE1haW4AU1RfNTk5MGMyYzM3NzdiNDQx
ZTkxZGFjNmMyNmFiYmQwNDQuY3Nwcm9qAFNjcmlwdFJlc3VsdHMAbXNjb3JsaWIAU3lzdGVtAE9i
amVjdABTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBNaWNyb3Nv
ZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2Ny
aXB0VGFzawBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uUmVzb3VyY2Vz
AFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJl
SW5mbwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVy
ZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0
AE1haW4ARmxhdEZpbGVMb2FkAGZuQWRkVGFza3MASURUU0Nvbm5lY3Rpb25NYW5hZ2VyRmxhdEZp
bGVDb2x1bW4xMDAATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVyAHNTX0Fz
c2lnbkNvbHVtblByb3BlcnRpZXMAdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAdmFsdWUAVGFyZ2V0
VGJsAFNyY0Nvbm4AdmFyZmlsZVBhdGhzAHZhcmZpbGVOYW1lAEJhdGNoX05hbWVfVmFsdWVzAFRn
dF9jb25uZWN0aW9uAHR5cGUAU2hlZXROYW1lAGZpbGVTaGVldABmbGF0RmlsZUNvbABnZXRDb2xO
YW1lAGdldERlbGltAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0
cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlE
ZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHly
aWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVB
dHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVy
U2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBTVF8wY2VmMjlhOTM5M2Y0ZTRjOGRkYTAyM2Q5MTA1MjZlNS5jc3Byb2oA
U3lzdGVtLkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50
aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lz
dGVtLkNvbXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2Fi
bGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU1NJU1NjcmlwdFRhc2tF
bnRyeVBvaW50QXR0cmlidXRlAFN5c3RlbS5EYXRhAFN5c3RlbS5EYXRhLlNxbENsaWVudABTcWxD
b21tYW5kAFNxbENvbm5lY3Rpb24AU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQu
U3FsU2VydmVyLk1hbmFnZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJp
YWJsZXMAZ2V0X1ZhcmlhYmxlcwBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUAVG9TdHJpbmcA
U3RyaW5nAFRyaW0AU3lzdGVtLkRhdGEuQ29tbW9uAERiQ29ubmVjdGlvbgBzZXRfQ29ubmVjdGlv
blN0cmluZwBzZXRfQ29ubmVjdGlvbgBEYkNvbW1hbmQAQ29tbWFuZFR5cGUAc2V0X0NvbW1hbmRU
eXBlAHNldF9Db21tYW5kVGV4dABTcWxQYXJhbWV0ZXIARGJQYXJhbWV0ZXIAUGFyYW1ldGVyRGly
ZWN0aW9uAHNldF9EaXJlY3Rpb24ARGJUeXBlAHNldF9EYlR5cGUAU3FsUGFyYW1ldGVyQ29sbGVj
dGlvbgBnZXRfUGFyYW1ldGVycwBBZGQAU3FsRGF0YUFkYXB0ZXIARGF0YVNldABDb25uZWN0aW9u
U3RhdGUAZ2V0X1N0YXRlAE9wZW4Ac2V0X1NlbGVjdENvbW1hbmQAU3FsRGF0YVJlYWRlcgBFeGVj
dXRlUmVhZGVyAERiRGF0YVJlYWRlcgBSZWFkAENsb3NlAEVtcHR5AENvbmNhdABDb250YWlucwBS
ZXBsYWNlAENoYXIAU3BsaXQAU3Vic3RyaW5nAG9wX0luZXF1YWxpdHkAc2V0X1Rhc2tSZXN1bHQA
RXhjZXB0aW9uAEFwcGxpY2F0aW9uAFBhY2thZ2UARHRzQ29udGFpbmVyAHNldF9OYW1lAEV4ZWN1
dGFibGVzAGdldF9FeGVjdXRhYmxlcwBFeGVjdXRhYmxlAEZvckVhY2hMb29wAHNldF9GYWlsUGFj
a2FnZU9uRmFpbHVyZQBzZXRfRmFpbFBhcmVudE9uRmFpbHVyZQBzZXRfRGVzY3JpcHRpb24ARm9y
RWFjaEVudW1lcmF0b3JJbmZvcwBnZXRfRm9yRWFjaEVudW1lcmF0b3JJbmZvcwBGb3JFYWNoRW51
bWVyYXRvckluZm8ARm9yRWFjaEVudW1lcmF0b3JIb3N0AENyZWF0ZU5ldwBzZXRfQ29sbGVjdGlv
bkVudW1lcmF0b3IARHRzUHJvcGVydGllcwBnZXRfUHJvcGVydGllcwBEdHNQcm9wZXJ0eQBTZXRW
YWx1ZQBJbnQzMgBzZXRfRm9yRWFjaEVudW1lcmF0b3IARm9yRWFjaFZhcmlhYmxlTWFwcGluZ3MA
Z2V0X1ZhcmlhYmxlTWFwcGluZ3MARm9yRWFjaFZhcmlhYmxlTWFwcGluZwBzZXRfVmFyaWFibGVO
YW1lAHNldF9WYWx1ZUluZGV4AFRhc2tIb3N0AGdldF9Jbm5lck9iamVjdABTY3JpcHRUYXNrAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuVlNUQVNjcmlwdGluZ0xpYgBNaWNyb3NvZnQuU3FsU2VydmVyLlZT
VEFIb3N0aW5nAFZTVEFTY3JpcHRMYW5ndWFnZXMAR2V0RGlzcGxheU5hbWUAc2V0X1NjcmlwdExh
bmd1YWdlAHNldF9SZWFkT25seVZhcmlhYmxlcwBzZXRfUmVhZFdyaXRlVmFyaWFibGVzAFZTVEFU
YXNrU2NyaXB0aW5nRW5naW5lAGdldF9TY3JpcHRpbmdFbmdpbmUAVlNUQVNjcmlwdGluZ0VuZ2lu
ZQBJVnN0YUhlbHBlcgBnZXRfVnN0YUhlbHBlcgBnZXRfUHJvamVjdFRlbXBsYXRlUGF0aABMb2Fk
TmV3UHJvamVjdABTYXZlUHJvamVjdFRvU3RvcmFnZQBTeXN0ZW0uSU8ARmlsZQBSZWFkQWxsVGV4
dABWU1RBU2NyaXB0UHJvamVjdFN0b3JhZ2UAZ2V0X1NjcmlwdFN0b3JhZ2UAU3lzdGVtLkNvbGxl
Y3Rpb25zAEhhc2h0YWJsZQBnZXRfU2NyaXB0RmlsZXMAVlNUQVNjcmlwdEZpbGUARW5jb2RpbmcA
c2V0X0l0ZW0ATG9hZFByb2plY3RGcm9tU3RvcmFnZQBCdWlsZABEaXNwb3NlVnN0YUhlbHBlcgBz
ZXRfRGVsYXlWYWxpZGF0aW9uAE1haW5QaXBlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVs
aW5lLldyYXBwZXIAUHJlY2VkZW5jZUNvbnN0cmFpbnRzAGdldF9QcmVjZWRlbmNlQ29uc3RyYWlu
dHMAUHJlY2VkZW5jZUNvbnN0cmFpbnQAQ29ubmVjdGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAENvbm5l
Y3Rpb25NYW5hZ2VyAElEVFNDb25uZWN0aW9uTWFuYWdlckZsYXRGaWxlMTAwAHNldF9Sb3dEZWxp
bWl0ZXIAc2V0X0Zvcm1hdABzZXRfQ29sdW1uTmFtZXNJbkZpcnN0RGF0YVJvdwBzZXRfTG9jYWxl
SUQAc2V0X0NvZGVQYWdlAElEVFNQaXBlbGluZTEwMABJRFRTQ29tcG9uZW50TWV0YURhdGFDb2xs
ZWN0aW9uMTAwAGdldF9Db21wb25lbnRNZXRhRGF0YUNvbGxlY3Rpb24ASURUU0NvbXBvbmVudE1l
dGFEYXRhMTAwAE5ldwBzZXRfQ29tcG9uZW50Q2xhc3NJRABDTWFuYWdlZENvbXBvbmVudFdyYXBw
ZXIASW5zdGFudGlhdGUASURUU0Rlc2lnbnRpbWVDb21wb25lbnQxMDAAUHJvdmlkZUNvbXBvbmVu
dFByb3BlcnRpZXMASURUU1J1bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbjEwMABnZXRfUnVudGlt
ZUNvbm5lY3Rpb25Db2xsZWN0aW9uAElEVFNSdW50aW1lQ29ubmVjdGlvbjEwMABEdHNDb252ZXJ0
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVudGltZVdyYXAASURUU0Nvbm5lY3Rpb25NYW5hZ2Vy
MTAwAEdldEV4dGVuZGVkSW50ZXJmYWNlAHNldF9Db25uZWN0aW9uTWFuYWdlcgBnZXRfSUQAc2V0
X0Nvbm5lY3Rpb25NYW5hZ2VySUQAU3RyZWFtUmVhZGVyAFRleHRSZWFkZXIAUmVhZExpbmUAU3Ry
aW5nU3BsaXRPcHRpb25zAElEVFNDb25uZWN0aW9uTWFuYWdlckZsYXRGaWxlQ29sdW1uczEwMABn
ZXRfQ29sdW1ucwBJRGlzcG9zYWJsZQBEaXNwb3NlAEFjcXVpcmVDb25uZWN0aW9ucwBSZWluaXRp
YWxpemVNZXRhRGF0YQBSZWxlYXNlQ29ubmVjdGlvbnMASURUU091dHB1dENvbGxlY3Rpb24xMDAA
Z2V0X091dHB1dENvbGxlY3Rpb24ASURUU091dHB1dDEwMABJRFRTT3V0cHV0Q29sdW1uQ29sbGVj
dGlvbjEwMABnZXRfT3V0cHV0Q29sdW1uQ29sbGVjdGlvbgBJRW51bWVyYXRvcgBHZXRFbnVtZXJh
dG9yAGdldF9DdXJyZW50AElEVFNPdXRwdXRDb2x1bW4xMDAAZ2V0X05hbWUAVG9VcHBlcgBNb3Zl
TmV4dABFeGVjdXRlTm9uUXVlcnkASURUU0lucHV0Q29sbGVjdGlvbjEwMABnZXRfSW5wdXRDb2xs
ZWN0aW9uAElEVFNJbnB1dDEwMABJRFRTRXh0ZXJuYWxNZXRhZGF0YUNvbHVtbkNvbGxlY3Rpb24x
MDAAZ2V0X0V4dGVybmFsTWV0YWRhdGFDb2x1bW5Db2xsZWN0aW9uAHNldF9Jc1VzZWQAc2V0X0hh
c1NpZGVFZmZlY3RzAElEVFNQYXRoQ29sbGVjdGlvbjEwMABnZXRfUGF0aENvbGxlY3Rpb24ASURU
U1BhdGgxMDAAQXR0YWNoUGF0aEFuZFByb3BhZ2F0ZU5vdGlmaWNhdGlvbnMASURUU1ZpcnR1YWxJ
bnB1dDEwMABHZXRWaXJ0dWFsSW5wdXQASURUU1ZpcnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24x
MDAAZ2V0X1ZpcnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24Ac2V0X0V4dGVybmFsTWV0YWRhdGFD
b2x1bW5JRABEVFNSb3dEaXNwb3NpdGlvbgBzZXRfRXJyb3JSb3dEaXNwb3NpdGlvbgBzZXRfVHJ1
bmNhdGlvblJvd0Rpc3Bvc2l0aW9uAElEVFNDdXN0b21Qcm9wZXJ0eUNvbGxlY3Rpb24xMDAAZ2V0
X0N1c3RvbVByb3BlcnR5Q29sbGVjdGlvbgBJRFRTQ3VzdG9tUHJvcGVydHkxMDAARGF0YVR5cGUA
U2V0RGF0YVR5cGVQcm9wZXJ0aWVzAHNldF9WYWx1ZQBzZXRfTWFwcGVkQ29sdW1uSUQAQ29udmVy
dABUb0ludDMyAElEVFNWaXJ0dWFsSW5wdXRDb2x1bW4xMDAAZ2V0X0xpbmVhZ2VJRABJRFRTSW5w
dXRDb2x1bW4xMDAARFRTVXNhZ2VUeXBlAFNldFVzYWdlVHlwZQBJbnNlcnRPdXRwdXRDb2x1bW5B
dABUb0xvd2VyAG9wX0VxdWFsaXR5AFNldE91dHB1dENvbHVtblByb3BlcnR5AEJvb2xlYW4Ac2V0
X1ZhbGlkYXRlRXh0ZXJuYWxNZXRhZGF0YQBTZXRDb21wb25lbnRQcm9wZXJ0eQBJRFRTSW5wdXRD
b2x1bW5Db2xsZWN0aW9uMTAwAGdldF9JbnB1dENvbHVtbkNvbGxlY3Rpb24ASURUU0V4dGVybmFs
TWV0YWRhdGFDb2x1bW4xMDAAR2V0SW5wdXRDb2x1bW5CeUxpbmVhZ2VJRABNYXBJbnB1dENvbHVt
bgBTZXRFeHByZXNzaW9uAElEVFNFdmVudHMAU2F2ZVRvWG1sAFN5c3RlbS5EYXRhLk9sZURiAE9s
ZURiQ29ubmVjdGlvbgBEYXRhVGFibGUAR2V0U2NoZW1hAHNldF9Db2x1bW5UeXBlAHNldF9Db2x1
bW5EZWxpbWl0ZXIAc2V0X0RhdGFUeXBlAHNldF9Db2x1bW5XaWR0aABJRFRTTmFtZTEwMABTeXN0
ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMARGlzcElkQXR0cmlidXRlAHBic3RyQ29sdW1uVHlw
ZQBnZXRfQ29sdW1uVHlwZQBwYnN0ckNvbHVtbkRlbGltaXRlcgBnZXRfQ29sdW1uRGVsaW1pdGVy
AHBsV2lkdGgAZ2V0X0NvbHVtbldpZHRoAF9WdGJsR2FwMV8yAHBlRGF0YVR5cGUAZ2V0X0RhdGFU
eXBlAENvbHVtblR5cGUAQ29sdW1uRGVsaW1pdGVyAENvbHVtbldpZHRoAEd1aWRBdHRyaWJ1dGUA
VHlwZUlkZW50aWZpZXJBdHRyaWJ1dGUAQ29tSW1wb3J0QXR0cmlidXRlAElEVFNPYmplY3RNb2Rl
bDEwMABDb0NsYXNzQXR0cmlidXRlAHBic3RyRm9ybWF0AGdldF9Gb3JtYXQAcGxMb2NhbGVJRABn
ZXRfTG9jYWxlSUQAX1Z0YmxHYXAxXzYAcHZiQ29sdW1uTmFtZXNJbkZpcnN0RGF0YVJvdwBnZXRf
Q29sdW1uTmFtZXNJbkZpcnN0RGF0YVJvdwBwYnN0ckRlbGltaXRlcgBnZXRfUm93RGVsaW1pdGVy
AF9WdGJsR2FwMl80AHBsQ09kZVBhZ2UAZ2V0X0NvZGVQYWdlAEZvcm1hdABMb2NhbGVJRABDb2x1
bW5OYW1lc0luRmlyc3REYXRhUm93AFJvd0RlbGltaXRlcgBDb2RlUGFnZQBDb2x1bW5zAF9WdGJs
R2FwMV8xAENvbXBvbmVudE1ldGFEYXRhQ29sbGVjdGlvbgBQYXRoQ29sbGVjdGlvbgBJRW51bWVy
YWJsZQBfVnRibEdhcDFfMwBEZWZhdWx0TWVtYmVyQXR0cmlidXRlAElEVFNPYmplY3QxMDAAZ2V0
X0Rlc2NyaXB0aW9uAHBic3RyRGVzY3JpcHRpb24AcGJzdHJOYW1lAF9WdGJsR2FwMl8yAGdldF9D
b21wb25lbnRDbGFzc0lEAGJzdHJDb21wb25lbnRDbGFzc0lEAF9WdGJsR2FwM18yAF9WdGJsR2Fw
NF8xMQBnZXRfVmFsaWRhdGVFeHRlcm5hbE1ldGFkYXRhAHBiVmFsaWRhdGUARGVzY3JpcHRpb24A
TmFtZQBDb21wb25lbnRDbGFzc0lEAElucHV0Q29sbGVjdGlvbgBPdXRwdXRDb2xsZWN0aW9uAFJ1
bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbgBWYWxpZGF0ZUV4dGVybmFsTWV0YWRhdGEAbE91dHB1
dElEAGxPdXRwdXRDb2x1bW5JbmRleABic3RyTmFtZQBic3RyRGVzY3JpcHRpb24AbElucHV0SUQA
cElEVFNWaXJ0dWFsSW5wdXRPYmplY3QAbExpbmVhZ2VJRABlVXNhZ2VUeXBlAFByb3BlcnR5TmFt
ZQB2VmFsdWUAX1Z0YmxHYXAyXzMAbE91dHB1dENvbHVtbklEAF9WdGJsR2FwM184AHBUcmFuc2Fj
dGlvbgBfVnRibEdhcDRfMQBsSW5wdXRDb2x1bW5JRABsRXh0ZXJuYWxNZXRhZGF0YUNvbHVtbklE
AEluZGV4AEl0ZW0AX1Z0YmxHYXAxXzgAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2VySUQAcGJzdHJDb25u
ZWN0aW9uTWFuYWdlcklEAGdldF9Db25uZWN0aW9uTWFuYWdlcgBwcElEVFNDb25uZWN0aW9uTWFu
YWdlcgBDb25uZWN0aW9uTWFuYWdlcklEAHNldF9JRABwSUQAX1Z0YmxHYXAxXzE0AElEAE91dHB1
dENvbHVtbkNvbGxlY3Rpb24AX1Z0YmxHYXAyXzEAX1Z0YmxHYXAyXzYAZ2V0X01hcHBlZENvbHVt
bklEAHBsTWFwcGVkQ29sdW1uSUQAX1Z0YmxHYXA0XzcAZURhdGFUeXBlAGxMZW5ndGgAbFByZWNp
c2lvbgBsU2NhbGUAbENvZGVQYWdlAGdldF9FcnJvclJvd0Rpc3Bvc2l0aW9uAHBlRGlzcG9zaXRp
b24AZ2V0X1RydW5jYXRpb25Sb3dEaXNwb3NpdGlvbgBfVnRibEdhcDVfMgBnZXRfRXh0ZXJuYWxN
ZXRhZGF0YUNvbHVtbklEAHBsRXh0ZXJuYWxNZXRhZGF0YUNvbHVtbklEAEN1c3RvbVByb3BlcnR5
Q29sbGVjdGlvbgBNYXBwZWRDb2x1bW5JRABFcnJvclJvd0Rpc3Bvc2l0aW9uAFRydW5jYXRpb25S
b3dEaXNwb3NpdGlvbgBFeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQAZ2V0X0hhc1NpZGVFZmZlY3Rz
AHBiSGFzU2lkZUVmZmVjdHMAX1Z0YmxHYXAzXzUAX1Z0YmxHYXA0XzQASGFzU2lkZUVmZmVjdHMA
SW5wdXRDb2x1bW5Db2xsZWN0aW9uAEV4dGVybmFsTWV0YWRhdGFDb2x1bW5Db2xsZWN0aW9uAF9W
dGJsR2FwMV8xMgBnZXRfSXNVc2VkAHBiSXNVc2VkAElzVXNlZABwSURUU091dHB1dABwSURUU0lu
cHV0AFZpcnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24AUkRfTm90VXNlZABSRF9JZ25vcmVGYWls
dXJlAFJEX1JlZGlyZWN0Um93AFJEX0ZhaWxDb21wb25lbnQAX1Z0YmxHYXAxXzQAcHZWYWx1ZQBW
YWx1ZQBEVF9FTVBUWQBEVF9OVUxMAERUX0kyAERUX0k0AERUX1I0AERUX1I4AERUX0NZAERUX0RB
VEUARFRfQk9PTABEVF9ERUNJTUFMAERUX0kxAERUX1VJMQBEVF9VSTIARFRfVUk0AERUX0k4AERU
X1VJOABEVF9GSUxFVElNRQBEVF9HVUlEAERUX0JZVEVTAERUX1NUUgBEVF9XU1RSAERUX05VTUVS
SUMARFRfREJEQVRFAERUX0RCVElNRQBEVF9EQlRJTUVTVEFNUABEVF9EQlRJTUUyAERUX0RCVElN
RVNUQU1QT0ZGU0VUAERUX0lNQUdFAERUX1RFWFQARFRfTlRFWFQARFRfREJUSU1FU1RBTVAyAERU
X0JZUkVGX0kyAERUX0JZUkVGX0k0AERUX0JZUkVGX1I0AERUX0JZUkVGX1I4AERUX0JZUkVGX0NZ
AERUX0JZUkVGX0RBVEUARFRfQllSRUZfQk9PTABEVF9CWVJFRl9ERUNJTUFMAERUX0JZUkVGX0kx
AERUX0JZUkVGX1VJMQBEVF9CWVJFRl9VSTIARFRfQllSRUZfVUk0AERUX0JZUkVGX0k4AERUX0JZ
UkVGX1VJOABEVF9CWVJFRl9GSUxFVElNRQBEVF9CWVJFRl9HVUlEAERUX0JZUkVGX05VTUVSSUMA
RFRfQllSRUZfREJEQVRFAERUX0JZUkVGX0RCVElNRQBEVF9CWVJFRl9EQlRJTUVTVEFNUABEVF9C
WVJFRl9EQlRJTUUyAERUX0JZUkVGX0RCVElNRVNUQU1QT0ZGU0VUAERUX0JZUkVGX0RCVElNRVNU
QU1QMgBfVnRibEdhcDFfMTMATGluZWFnZUlEAF9WdGJsR2FwMV8yMgBVVF9SRUFET05MWQBVVF9S
RUFEV1JJVEUAVVRfSUdOT1JFRABfVnRibEdhcDJfMTEASURUU0V4ZWN1dGFibGUxMDAASURUU0lu
Zm9FdmVudHMxMDAAU1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9qLlBy
b3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAf1MAVABfADAAYwBlAGYAMgA5AGEAOQAzADkA
MwBmADQAZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAwADUAMgA2AGUANQAuAGMAcwBwAHIAbwBq
AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAZTQBlAHQAYQBEAGEA
dABhAEMAbwBuAG4AAE9bAGQAYgBvAF0ALgBbAEUAVABMAF8ARwBFAFQAXwBGAEkATABFAF8AVQBQ
AEwATwBBAEQAXwBUAEUATQBQAEwAQQBUAEUAXwBTAFAAXQAAGUAAVABlAG0AcABsAGEAdABlAF8A
SQBkAAAXVABlAG0AcABsAGEAdABlAF8ASQBEAAAZQABTAHQAYQB0AHUAcwBfAGMAbwBkAGUAAAEA
EUAATQBlAHMAcwBhAGcAZQAAF1MAbwB1AHIAYwBlAF8ATgBhAG0AZQAAG0YAaQBsAGUAXwBMAG8A
YwBhAHQAaQBvAG4AABNGAGkAbABlAF8ATgBhAG0AZQAAH1AAcgBlAGYAaQB4AF8ARgBpAGwAZQBu
AGEAbQBlAAAbQgBhAHQAYwBoAF8AUABvAHIAdABpAG8AbgAAI0IAYQB0AGMAaABfAE4AYQBtAGUA
XwBWAGEAbAB1AGUAcwAAE0YAaQBsAGUAXwBUAHkAcABlAAAdRgBpAGwAZQBfAEQAZQBsAGkAbQBp
AHQAZQByAAAlRABhAHQAYQBfAFMAdABhAHIAdABpAG4AZwBfAEwAaQBuAGUAABlUAGEAcgBnAGUA
dABfAFQAYQBiAGwAZQAAI1QAYQByAGcAZQB0AF8AQwBvAG4AbgBlAGMAdABpAG8AbgAACXgAbABz
AHgAAAsuAHgAbABzAHgAAAkuAHgAbABzAAAJLgB0AHgAdAAACS4AYwBzAHYAAAkuAHgAbQBsAAAD
JAAAB0sAZQB5AAAJVQBzAGUAcgAAGUIAYQB0AGMAaABfAEkARABfAHYAYQByAAAVRgBvAGwAZABl
AHIAUABhAHQAaAAAF1QAYQByAGcAZQB0AFQAYQBiAGwAZQAAFVMAaABlAGUAdABOAGEAbQBlAHMA
ABNmAGkAbABlAFMAaABlAGUAdAAAJU0AZQB0AGEARABhAHQAYQBDAG8AbgBuAGUAYwB0AGkAbwBu
AAAjUwBUAE8AQwBLADoARgBPAFIARQBBAEMASABMAE8ATwBQAAAbRgBvAHIAIABFAGEAYwBoACAA
TABvAG8AcAAADVQAZQBzAHQAZQByAAADKgAAL0YAbwByAGUAYQBjAGgAIABGAGkAbABlACAARQBu
AHUAbQBlAHIAYQB0AG8AcgAAE0QAaQByAGUAYwB0AG8AcgB5AAARRgBpAGwAZQBTAHAAZQBjAAAj
RgBpAGwAZQBOAGEAbQBlAFIAZQB0AHIAaQBlAHYAYQBsAAAPUgBlAGMAdQByAHMAZQAAC0YAYQBs
AHMAZQAAE1UAcwBlAHIAOgA6AEsAZQB5AAADMAAAIVMAVABPAEMASwA6AFMAYwByAGkAcAB0AFQA
YQBzAGsAADNTAGMAcgBpAHAAdABUAGEAcwBrADQARgBpAGwAZQBWAGEAbABpAGQAYQB0AGkAbwBu
AAANQwBTAGgAYQByAHAAABVFAHgAYwBlAGwAQwBvAHUAbgB0AACAi1UAcwBlAHIAOgA6AEsAZQB5
ACwAVQBzAGUAcgA6ADoATQBlAHQAYQBEAGEAdABhAEMAbwBuAG4AZQBjAHQAaQBvAG4ALABVAHMA
ZQByADoAOgBUAGEAcgBnAGUAdABUAGEAYgBsAGUALABVAHMAZQByADoAOgBTAGgAZQBlAHQATgBh
AG0AZQBzAAAhVQBzAGUAcgA6ADoARQB4AGMAZQBsAEMAbwB1AG4AdAAAH00AeQBTAGMAcgBpAHAA
dABQAHIAbwBqAGUAYwB0AAAXUwBhAHYAZQAgAGYAYQBpAGwAZQBkAABxQwA6AFwAVQBzAGUAcgBz
AFwAMwAxADkANgA3AFwARABlAHMAawB0AG8AcABcAFQAZQBzAHQATQB1AGwAdABpAHAAbABlAFUA
cABsAG8AYQBkAFwAUwBjAHIAaQBwAHQAQwBvAGQAZQAuAHQAeAB0AAAbUwBjAHIAaQBwAHQATQBh
AGkAbgAuAGMAcwAAJVMAVABPAEMASwA6AFAAaQBwAGUAbABpAG4AZQBUAGEAcwBrAAALTwBMAEUA
RABCAAARRgBMAEEAVABGAEkATABFAAARRgBsAGEAdABGAGkAbABlAAADCgAAE0QAZQBsAGkAbQBp
AHQAZQBkAAAzRABUAFMAQQBkAGEAcAB0AGUAcgAuAEYAbABhAHQARgBpAGwAZQBTAG8AdQByAGMA
ZQAAN1MAbwB1AHIAYwBlACAAZABhAHQAYQAgAGkAbgAgAHQAaABlACAARABhAHQAYQBGAGwAbwB3
AACAqVMARQBMAEUAQwBUACAAQwBBAFMARQAgAFcASABFAE4AIABFAFgASQBTAFQAUwAoAFMARQBM
AEUAQwBUACAAMQAgAEYAUgBPAE0AIABpAG4AZgBvAHIAbQBhAHQAaQBvAG4AXwBzAGMAaABlAG0A
YQAuAHQAYQBiAGwAZQBzACAAdwBoAGUAcgBlACAAdABhAGIAbABlAF8AbgBhAG0AZQAgAD0AIAAn
AAFBJwApACAAVABIAEUATgAgADEAIABFAEwAUwBFACAAMAAgAEUATgBEACAAVABhAGIAbABlAEUA
eABpAHMAdABzAAEpUAByAG8AdgBpAGQAZQByAD0AUwBRAEwATwBMAEUARABCAC4AMQA7AAArUABy
AG8AdgBpAGQAZQByAD0AUwBRAEwATgBDAEwASQAxADAALgAxADsAACtQAHIAbwB2AGkAZABlAHIA
PQBTAFEATABOAEMATABJADEAMQAuADEAOwAAF1QAYQBiAGwAZQBFAHgAaQBzAHQAcwAAG0MAUgBF
AEEAVABFACAAVABBAEIATABFACAAAAUgACgAAA1SAE8AVwBfAEkARAAAEUIAQQBUAEMASABfAEkA
RAAAHVoAWgBfAFMAVABBAFQAVQBTAF8AQwBPAEQARQAAISAAbgB2AGEAcgBjAGgAYQByACgAMgA1
ADUAKQAsAFsAAANdAAADWwAAgKUgAG4AdgBhAHIAYwBoAGEAcgAoADIANQA1ACkALABCAGEAdABj
AGgAXwBJAEQAIABpAG4AdAAsACAAWgBaAF8AUwBUAEEAVABVAFMAXwBDAE8ARABFACAAbgB2AGEA
cgBjAGgAYQByACgAMQApACwAIABSAE8AVwBfAEkARAAgAGkAbgB0ACAAaQBkAGUAbgB0AGkAdAB5
ACgAMQAsADEAKQApAAA1RABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBEAGUAcgBpAHYAZQBkAEMA
bwBsAHUAbQBuAAA5RABlAHIAaQB2AGUAZABDAG8AbABUAHIAYQBuAHMAZgBvAHIAbQBfAEIAYQB0
AGMAaABfAEkAZAAAEUIAYQB0AGMAaABfAEkARAAAFUUAeABwAHIAZQBzAHMAaQBvAG4AAAMxAAAl
RgByAGkAZQBuAGQAbAB5AEUAeABwAHIAZQBzAHMAaQBvAG4AADFEAFQAUwBUAHIAYQBuAHMAZgBv
AHIAbQAuAEQAYQB0AGEAQwBvAG4AdgBlAHIAdAAAM0QAYQB0AGEAIABDAG8AbgB2AGUAcgBzAGkA
bwBuACAAQwBvAG0AcABvAG4AZQBuAHQAAIHRUwBlAGwAZQBjAHQAIABDAE8ATABVAE0ATgBfAE4A
QQBNAEUALABEAEEAVABBAF8AVABZAFAARQAsAEkAcwBuAHUAbABsACgAQwBIAEEAUgBBAEMAVABF
AFIAXwBNAEEAWABJAE0AVQBNAF8ATABFAE4ARwBUAEgALAAwACkAIABBAHMAIABDAEgAQQBSAEEA
QwBUAEUAUgBfAE0AQQBYAEkATQBVAE0AXwBMAEUATgBHAFQASAAsAEkAcwBuAHUAbABsACgATgBV
AE0ARQBSAEkAQwBfAFAAUgBFAEMASQBTAEkATwBOACwAMAApACAAQQBzACAATgBVAE0ARQBSAEkA
QwBfAFAAUgBFAEMASQBTAEkATwBOACwASQBzAG4AdQBsAGwAKABOAFUATQBFAFIASQBDAF8AUwBD
AEEATABFACwAMAApACAAQQBzACAATgBVAE0ARQBSAEkAQwBfAFMAQwBBAEwARQAgAGYAcgBvAG0A
IABJAG4AZgBvAHIAbQBhAHQAaQBvAG4AXwBTAGMAaABlAG0AYQAuAEMATwBMAFUATQBOAFMAIAB3
AGgAZQByAGUAIABUAEEAQgBMAEUAXwBOAEEATQBFAD0AJwABAycAARdDAE8ATABVAE0ATgBfAE4A
QQBNAEUAABNEAEEAVABBAF8AVABZAFAARQAAMUMASABBAFIAQQBDAFQARQBSAF8ATQBBAFgASQBN
AFUATQBfAEwARQBOAEcAVABIAAAjTgBVAE0ARQBSAEkAQwBfAFAAUgBFAEMASQBTAEkATwBOAAAb
TgBVAE0ARQBSAEkAQwBfAFMAQwBBAEwARQAAD3YAYQByAGMAaABhAHIAAAljAGgAYQByAAARbgB2
AGEAcgBjAGgAYQByAAAPbgB1AG0AZQByAGkAYwAAC2YAbABvAGEAdAAACWQAYQB0AGUAABFkAGEA
dABlAHQAaQBtAGUAAA9pAG4AdABlAGcAZQByAAAHaQBuAHQAAA9kAGUAYwBpAG0AYQBsAAA1UwBv
AHUAcgBjAGUASQBuAHAAdQB0AEMAbwBsAHUAbQBuAEwAaQBuAGUAYQBnAGUASQBEAAAVQwBvAG4A
dABhAGkAbgBzAEkARAAAN0QAVABTAEEAZABhAHAAdABlAHIALgBPAGwAZQBEAGIARABlAHMAdABp
AG4AYQB0AGkAbwBuAAAjTwBsAGUARABiACAARABlAHMAdABpAG4AYQB0AGkAbwBuAAAVQQBjAGMA
ZQBzAHMATQBvAGQAZQAAFU8AcABlAG4AUgBvAHcAcwBlAHQAACFDAG8AbgBuAGUAYwB0AGkAbwBu
AFMAdAByAGkAbgBnAAAZQABbAFUAcwBlAHIAOgA6AEsAZQB5AF0AADVHAGUAbgBlAHIAYQB0AGUA
ZABfAFMAUwBJAFMAXwBQAGsAZwBMAG8AYwBhAHQAaQBvAG4AABFfAEYARgAuAGQAdABzAHgAACFF
AHgAYwBlAGwAXwBPAEwARQBEAEIALgBkAHQAcwB4AAALKgAuAHgAbABzAAADXwAAC0UAeABjAGUA
bAAAW1AAcgBvAHYAaQBkAGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4ASgBlAHQALgBPAEwARQBE
AEIALgA0AC4AMAA7AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AABROwBFAHgAdABlAG4AZABlAGQA
IABQAHIAbwBwAGUAcgB0AGkAZQBzAD0AIgBFAFgAQwBFAEwAIAA4AC4AMAA7AEgARABSAD0AWQBF
AFMAIgAADVQAYQBiAGwAZQBzAAANRQB4AGMAZQBsACAAAC1EAFQAUwBBAGQAYQBwAHQAZQByAC4A
RQBYAEMARQBMAFMAbwB1AHIAYwBlAAALLgBkAHQAcwB4AAAAAADgweZ5IdDbSbP5OU0yz8VTAAi3
elxWGTTgiQiJhF3NgIDMkQMGEhUDBhIZAyAAAQQAABIVBAAAEhkFAAEBEhkECAASFQQIABIZAwYS
DAQAABIMBAgAEgwKIAcBDg4ODg4ODgsgCAEODg4ODg4ODgcAAwESGA4OAgYIAwYRFAQAAAAABAEA
AAAEIAEBDgQgAQEIBgABElURWQQgABJdBiACAQ4SXQQHARIVBSABARFlCAEAAgAAAAAAAwAAAQQg
ABJ5BCAAEn0GIAESgIEcAyAAHAMgAA4FIAEBEnUGIAEBEYCRBSACAQ4cBiABARGAnQYgAQERgKEF
IAASgKUIIAESgJUSgJUFIAARgLEFIAEBEnEFIAASgLUEIAEcDgMgAAICBg4GAAMODg4OBCABAg4F
IAIODg4GIAEdDh0DBSACDggIBQACAg4OJwcWEnESdRKAlRKAlRKAlRKAqRKAtQ4ODg4ODg4ODg4d
Dg4dAx0OCAkgBBKAgQ4CDhwFIAASgNEGIAESgNUOBCABAQIFAAIODg4FIAASgN0GIAESgOEcBSAA
EoDlBSAAEoDpBiABEoDtHAUgAgEcHAYgAQESgOUFIAASgPUFIAASgPkGIAESgPkcBCABARwEAAEO
DgUgABKBCQUgABKBEQYgAwIODg4FIAASgRkFIAASgR0HIAIBEYElDgUgARJdDgUgABKBLQsgAhKB
MRKA1RKA1QUgABKBNQYgARKBOQ4EIAASKAQgABIsBCAAEjAEIAASOAUgARI8HAgAARKBYRKBOQUg
AQESQAkgAh0OHQMRgXEEIAASRAQgABIYBCAAEkgFIAESTBwEIAASUAUgABKBiQcABA4ODg4OAyAA
CAQgABJYBSABElwcBCAAEmAEIAASZAQgABJoByACARJMElwEIAASbAQgABJwBCAAElQFIAEBEXQE
IAASeAQgABJ8CiAFARGAgAgICAgEAAEIHAYgARKAhBwMIAQSgIgIEmwIEYCMCCAEElQICA4OCCAE
EnwICA4cBiACEnwOHAUgABKAkAYgARKAlBwHIAIICBGAjAYgARKAiAgIIAMSgJQICAgFIAIBDg4K
IAMBDhKAyRKB2YCmB08SgMUSgMkSgNESgNkOEoDhEoDlEoDVEoD9EoEBDhKA1RKA/RIcEoE5DhKB
ORIgEiwSNA4dAwMSgWkdDggSGBKAwQ4OEnESdRKAqRKAtQgSUAgSVBIsEjASXBJsElQSfBIsEjAS
cRJ1EoCpEoC1CA4OCAgIEmwSTAgSVBIsEjQSaBJcEmwSgJASYBJQEoCIElQSgJQSgIgSUBJUDg4d
AxKBiRKBeQYgARKB4Q4FAAEOHQ6AmQdIEoDFEoDJEoDREoDZEoDhEoDlEoDVEoD9EoEBDhKA1RKA
/RIcEoE5DhKBOQ4Sgd0OEiwSNA4OEnESdRKAqRKAtQgSUAgSVBIsEjASXBJsElQSfBIsEjAScRJ1
EoCpEoC1CA4OCAgIEmwSTAgSVBIsEjQSaBJcEmwSgJASYBJQEoCIElQSgJQSgIgSUBJUDg4SgYkS
gXkdDgYgAQERgIAFBwESgJgBEwgBAAMAAAAAAAgBAAQAAAAAAAgBAAYAAAAAAAUgABGAgAMoAA4D
KAAIBSgAEYCAKQEAJDhBMkEzN0JBLTkxREEtNEFBQy05RjE5LTczRkFBNkM5Nzk4QQAAKQEAJDQx
MEU5MUU5LTJDNDUtNDg3QS04NTFBLTVCM0RGRTc0NzMyOQAABSABARJVXwEAWlN5c3RlbS5PYmpl
Y3QsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5
VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OQAACAEAAQAAAAAACAEABwAAAAAACAEACgAAAAAACAEACwAA
AAAAARwDKAACBCgAEkQpAQAkMjAwRUM5MzMtMTdCQS00NzlBLUE4NUItNzExQTU2RTJDMDU0AAAI
AQAMAAAAAAAIAQANAAAAAAAEKAASKAQoABJkCAEADgAAAAAAKQEAJDA3MDc1MEYyLTYzMUQtNEUz
RS04RkU1LUJFNkIxQ0RGMjYzMgAACQEABEl0ZW0AAAgBAGUAAAAAAAgBAGYAAAAAAAgBAGcAAAAA
AAgBAGgAAAAAAAgBAHIAAAAAAAgBAH4AAAAAAAQoABJYBCgAEkgEKAASOCkBACQ4ODdCRDA2MS04
MkQ0LTRGMDYtQTIyMi0zMzdENDJFN0Y4OTYAACkBACRGRjVERDNGMS05OUMxLTRGRkItQjA5Ny0x
QjFCMkI5RTlCMkQAAAgBABAAAAAAAAgBABEAAAAAAAEbCAEAFQAAAAAACAEAHgAAAAAAARkIAQAf
AAAAAAAIAQAhAAAAAAAIAQAAAAAAAAAFKAESPBwpAQAkRDk0Mjg4OTMtOEE5NS00REZELTgyNkMt
NDAzNUU1NzI4QzYwAAAEIAASQAQoABJAKQEAJEQ3RkQxREZDLTM2NEUtNDdCMy05NTlBLUM2NkMx
RERCM0RBNQAAKQEAJEU0Njk4QTdGLTlFNDAtNDdBRC1BNkM2LTc4NEJGQUNBMENBOQAAKQEAJDhD
QTIxQTBELTdCREQtNERBRC1BNDMxLTAxOUEwMzFBOTQ1NQAABSgBEkwcKQEAJEU3MDA3MDZDLUYy
M0MtNDAwQS1CRDYyLUFDNzYwQjExQjk4NQAACAEAagAAAAAABCgAElApAQAkODlCOEUzMDYtN0My
QS00NzJGLTg4NTAtNzIwMkI0REFGMTdCAAAIAQD8////AACAqywAAIClU3lzdGVtLlJ1bnRpbWUu
SW50ZXJvcFNlcnZpY2VzLkN1c3RvbU1hcnNoYWxlcnMuRW51bWVyYXRvclRvRW51bVZhcmlhbnRN
YXJzaGFsZXIsIEN1c3RvbU1hcnNoYWxlcnMsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0
cmFsLCBQdWJsaWNLZXlUb2tlbj1iMDNmNWY3ZjExZDUwYTNhACkBACRCQzk0MkZFQy0yQ0VBLTQ2
NjUtQTI5MS0zODIwMEEwQzk1OUYAAAgBAGwAAAAAAAQgABF0CAEAcwAAAAAACAEAdAAAAAAACAEA
dgAAAAAABCgAEngEKAARdCkBACQzQzdGQ0JFMC04Mjg3LTRCOTctQjYzMi03QzYwQzYzREFBRjQA
AAUoARJcHCkBACQ2QUY0MTU4NC03MUYyLTQwMUUtQjEzRS1DNjc4QjkyRDNBNUEAAAgBAGkAAAAA
AAgBAHEAAAAAAAUoABKAkAQoABJgKQEAJDczMEQ3MjJDLTJFMDAtNEM3QS04NjQxLTBEMzc4MzUz
QTk0NAAABigBEoCUHCkBACQyOTBDODhFOS0xQTk2LTRBMkEtOEY0MS00NTRCNDhBQzkwQUUAACkB
ACQ2QTMzMUVCRC1BOTUwLTQzQjUtODNBMi0wMzM1ODVGNDE3RjcAACkBACRFMjVFMjM0Qy0wRjlB
LTRBMkQtOTNBOC0xQUEwOTdFNjM1NUMAAAQoABJwKQEAJDk5NDRGNjg0LTQ5QzQtNDM1NC1BQjdG
LUVFNDIyQTY1MEUwRQAABigBEoCEHCkBACQ3N0Y4NDAwMi1DODc4LTRCMzgtODQyRC1CMUUyNUE5
RkJDQzgAAAMGEXQEAgAAAAQEAAAAZAEAJDBCNEFGMThCLTM2OTktNDI4NC05QkY3LUMyOURCRTNE
NzhCRjpNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyLkRUU1Jvd0Rpc3Bv
c2l0aW9uAAApAQAkMkQ5MUQ2RjUtMzQ5RS00NTJGLTgwRTQtRTc3OTNGMDhDODQzAAADKAAcKQEA
JEEwODM2RTVFLTUwQ0YtNEIyOC05NTc3LUUyNTE3MzcyNUYwQgAABAYRgIAEAwAAAAQFAAAABAYA
AAAEBwAAAAQLAAAABA4AAAAEEAAAAAQRAAAABBIAAAAEEwAAAAQUAAAABBUAAAAEQAAAAARIAAAA
BIAAAAAEgQAAAASCAAAABIMAAAAEhQAAAASGAAAABIcAAAAEkQAAAASSAAAABC0BAAAELgEAAAQv
AQAABDABAAAEAkAAAAQDQAAABARAAAAEBUAAAAQGQAAABAdAAAAEC0AAAAQOQAAABBBAAAAEEUAA
AAQSQAAABBNAAAAEFEAAAAQVQAAABEBAAAAESEAAAASDQAAABIVAAAAEhkAAAASHQAAABIhAAAAE
iUAAAASKQAAAWgEAJEI0NTJEQTVBLTU0RTItNEY2My04RDYxLTFCMTkzNzQ0OTA0RDBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIuRGF0YVR5cGUAACkBACRENUREQjYyQy1C
QkNGLTQ3OUYtQkFDMi00MzgyQTk1MEIzNTYAAAgBAIEAAAAAAAgBAIIAAAAAACkBACQxQzE5RDRG
OC0xMDc1LTQyOUEtOUFEOS01N0IyQzNGNzE4ODQAAAQGEYCMXwEAJDBCNEFGMThCLTM2OTktNDI4
NC05QkY3LUMyOURCRTNENzhCRjVNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFw
cGVyLkRUU1VzYWdlVHlwZQAAKQEAJDI0MjQ0RDQ4LTI3NjQtNEY3OS04RTMzLTRDOUE3QjhENEUy
RAAAKQEAJDVDQ0QxNDRFLTUxQUQtNDExRi1BOUQ0LUU5QUU1MDE2NTBGNAAACAEAVgAAAAAAKQEA
JDgxQUM4QTk0LUQ4OTctNEMzRS1BMjkwLTY2RTU3NUU0RDQyOAAAKQEAJDRFODUzNTc0LUMyRTMt
NENBRS1CNzkxLTJENEE1RDFEMEM5OAAAKQEAJDIwM0UyNEJELTUyMDMtNEM3Ni1BRkM3LTdDODU0
NUVCQTFBMAAAKQEAJDQ5MDUwNzI3LTFGMzQtNDRCQi04MDYzLTE1MkZFRkVFNEQwMAAAKQEAJDJD
NjRGODNCLThFN0YtNEFDNi05MTM4LTc1QkYzNjMwMDJFRQAAEAEAC0ZpcmVXYXJuaW5nAABHAQAa
Lk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQg
RnJhbWV3b3JrIDQvAQAqU1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9q
AAAFAQAAAAANAQAISGV4YXdhcmUAAB4BABlDb3B5cmlnaHQgQCBIZXhhd2FyZSAyMDE1AAAIAQAI
AAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBAAAACK0AAAAAAAAAAAAAHq0AAAAg
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABCtAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAA
AAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WMAAADQEAAAAAAAAAAAAADQENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQAxY7cYAAABADFjtxg/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsASUAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABwAwAAAQAwADAAMAAwADAA
NABiADAAAAA0AAkAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAEgAZQB4AGEAdwBhAHIAZQAA
AAAAgAArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADAAYwBlAGYA
MgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAwADUAMgA2AGUANQAu
AGMAcwBwAHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4A
NgAzADIANwAuADIANQAzADkAMwAAAAAAgAAvAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABT
AFQAXwAwAGMAZQBmADIAOQBhADkAMwA5ADMAZgA0AGUANABjADgAZABkAGEAMAAyADMAZAA5ADEA
MAA1ADIANgBlADUALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAABYABoAAQBMAGUAZwBhAGwAQwBv
AHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABIAGUAeABhAHcAYQByAGUA
IAAyADAAMQA1AAAAiAAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABf
ADAAYwBlAGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAwADUA
MgA2AGUANQAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAHgAKwABAFAAcgBvAGQAdQBjAHQATgBh
AG0AZQAAAAAAUwBUAF8AMABjAGUAZgAyADkAYQA5ADMAOQAzAGYANABlADQAYwA4AGQAZABhADAA
MgAzAGQAOQAxADAANQAyADYAZQA1AC4AYwBzAHAAcgBvAGoAAAAAAEQADwABAFAAcgBvAGQAdQBj
AHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAzADIANwAuADIANQAzADkAMwAAAAAASAAPAAEA
QQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAzADIANwAuADIANQAz
ADkAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAwAAAAwPQAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="944"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="906"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="1057"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="38"
            Column="1" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="133,42"
          Id="Package\Script Task"
          TopLeft="134.5,136.084905660377" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>