<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/20/2015 4:24:32 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="EBII433F1"
  DTS:CreatorName="CORP\30655"
  DTS:DTSID="{09A9A157-0A6A-48BA-B583-21F958EA5F9C}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.2100.60"
  DTS:LocaleID="1033"
  DTS:ObjectName="Automaton FlatFile - old"
  DTS:PackageType="5"
  DTS:VersionBuild="903"
  DTS:VersionGUID="{C35B2AC7-1685-4176-8653-365CB9EB2033}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{625600D9-76B6-468F-ACF7-50B7BA640D08}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Batch_ID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A5903ADF-37A8-4365-BA20-4972A3A0035D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Client_ID">
      <DTS:VariableValue
        DTS:DataType="8">0001</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{73607738-EB82-48C9-9E6F-B9847606E269}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Config_ID">
      <DTS:VariableValue
        DTS:DataType="3">89</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A18FA96A-B033-4CA5-8E5B-5A90FEF0624A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Conn_String">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=172.25.164.63;User ID=sa;pwd=Password123;Initial Catalog=POC_Data;Provider=SQLNCLI11.1;Persist Security Info=True;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{62CCC0A3-5887-4A4B-8AA2-B9F12AD86119}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelFile">
      <DTS:VariableValue
        DTS:DataType="8">CNLVM1.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{50B09460-9144-4D48-8FD0-C2A44174FDC8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelFileLocation">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\28544\Desktop\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{746384EE-DFFB-4D4A-9868-0F8AD9587B7B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelSheets">
      <DTS:VariableValue
        DTS:DataType="8">List_AEMA-1887BH7_0001</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DA7A0518-46E7-4FD6-A073-60A61BDBBA1E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Generated_SSIS_PkgLocation">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\28544\Desktop\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C0791EE4-A8BD-4A73-B04F-29FBD0529F48}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MetaDataConnString">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=172.25.164.63;User ID=sa;pwd=Password123;Initial Catalog=DM_Metadata;Provider=SQLNCLI11.1;Persist Security Info=True;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{43247E6D-5807-4657-9289-2D34C7FDC711}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Project_ID">
      <DTS:VariableValue
        DTS:DataType="8">HX_PRJ01</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Script Task"
      DTS:DTSID="{4C5577D7-BB5F-42DE-856B-389A919A01BD}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Script Task.EventHandlers[OnError]"
          DTS:CreationName="OnError"
          DTS:DTSID="{6DB3AF0D-EE3F-434B-99B3-59978211FA07}"
          DTS:EventID="153018280"
          DTS:EventName="OnError"
          DTS:LocaleID="-1">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:Description="The propagate property of the event"
              DTS:DTSID="{D5500B1D-90C7-49C6-8A84-7BA188DD1C1C}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="System"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_0cef29a9393f4e4c8dda023d910526e5"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="System::CancelEvent,User::Client_ID,User::Config_ID,User::Conn_String,User::ExcelFile,User::ExcelFileLocation,User::ExcelSheets,User::Generated_SSIS_PkgLocation,User::MetaDataConnString,User::Project_ID"
          ReadWriteVariables="User::Batch_ID">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="st_0cef29a9393f4e4c8dda023d910526e5.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</RootNamespace>
    <AssemblyName>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</AssemblyName>
    <ProjectGuid>{C0FCFF17-7581-4520-BCC1-8ED2A17FE389}</ProjectGuid>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>AnyCPU</PlatformTarget>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="Microsoft.SqlServer.Dts.Design, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SqlServer.XmlTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebugc5b1aa08-5cb2-46b8-baff-b0ec63c5e657/a305dfe5-2d84-46db-abf9-612b9f3371e7&quot;" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <PropertyGroup>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Text;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using System.Data.SqlClient;
using System.IO;
using System.Data.OleDb;
using RuntimeWrapper = Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Xml;





namespace ST_5990c2c3777b441e91dac6c26abbd044.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/
        string fileName;

        public void Main()
        {
            // TODO: Add your code here

            try
            {

                string varfileName = Dts.Variables["ExcelFile"].Value.ToString();
                string varfilePaths = Convert.ToString(Dts.Variables["ExcelFileLocation"].Value) + varfileName;

                fileName = Path.GetFileNameWithoutExtension(varfileName);
                string fExt = Path.GetExtension(varfileName);

                if (fExt.ToUpper().Equals(".TXT") || fExt.ToUpper().Equals(".CSV"))
                {
                    FlatFileLoad(fileName, varfilePaths);
                }
                else
                {

                    string fileSheet = string.Empty;
                    fileSheet = Dts.Variables["ExcelSheets"].Value.ToString();

                    string[] fileSheets = fileSheet.Split(',');

                    foreach (string varSheet in fileSheets)
                    {

                        if (varSheet.Substring(0, 1) != "$")
                        {
                            fnAddTasks(varSheet, fileName, varfilePaths);
                        }
                    }
                }

                this.GetBatchID();

                Dts.TaskResult = (int)ScriptResults.Success;

            }
            catch (Exception ex)
            {
                Dts.Events.FireError(100, ErrorLog.SubComponent, ErrorLog.Description, string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
                Dts.Log(ErrorLog.Description, 1000, null);
            }
        }

        private void FlatFileLoad(string fileName, string varfilePaths)
        {
            Package package = new Package();
            package.Name = fileName;

            string targetTable = fileName;

            // Add the Flat File connection
            ConnectionManager connectionManagerFlatFile = package.Connections.Add("FLATFILE");
            connectionManagerFlatFile.ConnectionString = varfilePaths;
            connectionManagerFlatFile.Name = "FlatFile";
            connectionManagerFlatFile.Properties["Format"].SetValue(connectionManagerFlatFile, "Delimited");
            connectionManagerFlatFile.Properties["ColumnNamesInFirstDataRow"].SetValue(connectionManagerFlatFile, Convert.ToBoolean(true));

            package.MaximumErrorCount = 0;
            package.Executables.Add("STOCK:PipelineTask");
            TaskHost taskHost = package.Executables[0] as TaskHost;
            MainPipe dataFlowTask = (MainPipe)taskHost.InnerObject;
            taskHost.Name = "Dynamic Data Flow Task";
            taskHost.Properties["DefaultBufferMaxRows"].SetValue(taskHost, "1000000");

            ComponentEventHandler events = new ComponentEventHandler();
            dataFlowTask.Events = DtsConvert.GetExtendedInterface(events as IDTSComponentEvents);

            RuntimeWrapper.IDTSConnectionManagerFlatFile100 connectionFlatFile = connectionManagerFlatFile.InnerObject as RuntimeWrapper.IDTSConnectionManagerFlatFile100;
            string line;
            int k = 0;
            char[] delimiters = new char[] { '|', ',' };

            char ColDelimiter;
            if (varfilePaths.Contains(".csv"))
            {
                ColDelimiter = ',';
            }
            else
            {
                ColDelimiter = '|';
            }

            
            using (StreamReader EditFile = new StreamReader(varfilePaths))
            {
                StringBuilder sb = new StringBuilder();
                try
                {
                    int varFileLineNo = 0;
                    line = EditFile.ReadLine();
                    string ErrorFlatFileRow = string.Empty;
                    int NoColumns = line.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).Length;

                    sb.Append("ErrorRow" + ColDelimiter + line);

                    while (!EditFile.EndOfStream)
                    {
                        if (varFileLineNo > 0)
                        {
                            line = EditFile.ReadLine();
                            int CurrRowLength = line.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).Length;
                            if (NoColumns != CurrRowLength)
                            {

                                sb.AppendLine();
                                sb.Append("Error" + ColDelimiter + line);

                            }
                            else
                            {

                                sb.AppendLine();
                                sb.Append("Correct" + ColDelimiter + line);

                            }

                        }

                        varFileLineNo++;
                    }

                }
                catch (Exception ex)
                { throw ex; }
                finally
                {
                    EditFile.Close();
                    System.IO.StreamWriter newFile = new System.IO.StreamWriter(varfilePaths);
                    newFile.WriteLine(sb);
                    newFile.Close();
                }
            }



            using (StreamReader file = new StreamReader(varfilePaths))
            {

                try
                {

                    line = file.ReadLine();
                    string[] parts = line.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);

                    for (int i = 0; i < parts.Length; i++)
                    {
                        RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100 flatFileCol = connectionFlatFile.Columns.Add() as
                            RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100;
                        sS_AssignColumnProperties(flatFileCol, parts[i], ColDelimiter.ToString());
                    }

                }
                catch (Exception ex)
                { throw ex; }
                finally
                {

                    file.Close();
                }
            }



            connectionFlatFile.Columns[connectionFlatFile.Columns.Count - 1].ColumnDelimiter = Environment.NewLine;


            IDTSComponentMetaData100 componentSource = dataFlowTask.ComponentMetaDataCollection.New();
            componentSource.Name = "FlatFileSource";
            componentSource.ComponentClassID = "DTSAdapter.FlatFileSource";

            //Insert source design-time instance and initialise component
            CManagedComponentWrapper instanceSource = componentSource.Instantiate();
            instanceSource.ProvideComponentProperties();

            //Set source connection
            componentSource.RuntimeConnectionCollection[0].ConnectionManagerID = connectionManagerFlatFile.ID;
            componentSource.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(connectionManagerFlatFile);

            //Reinitialize Flat File source metadata,

            instanceSource.AcquireConnections(null);
            instanceSource.ReinitializeMetaData();
            instanceSource.ReleaseConnections();

            IDTSOutputColumnCollection100 FlatFileSourceColumn = componentSource.OutputCollection[0].OutputColumnCollection;

            string concatErrCol = string.Empty;
            int colDelim = 0;

            foreach (IDTSOutputColumn100 FlatFileOutputCol in FlatFileSourceColumn)
            {
                if (FlatFileOutputCol.Name != "ErrorRow")
                {

                    FlatFileOutputCol.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                    FlatFileOutputCol.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
                    if (colDelim > 0)
                    {
                        concatErrCol = concatErrCol + "+\"" + ColDelimiter + "\"+" + FlatFileOutputCol.Name;
                    }
                    else
                    {
                        concatErrCol = FlatFileOutputCol.Name;
                    }
                    colDelim++;
                }
            }

            //concatErrCol = concatErrCol + "\"" + Dts.Variables["ExcelFile"].Value.ToString() + "\"";

            string ErrorFileName = Dts.Variables["ExcelFile"].Value.ToString();

            int exists = 0;

            string sqlStatement = "SELECT CASE WHEN EXISTS(SELECT 1 FROM information_schema.tables where table_name = '" + targetTable + "') THEN 1 ELSE 0 END TableExists";
            string dataColumns = null;

            SqlCommand Sqlcmd1 = new SqlCommand();
            SqlConnection SqlConn1 = new SqlConnection();
            SqlConn1.ConnectionString = Dts.Variables["Conn_String"].Value.ToString().Replace("Provider=SQLOLEDB.1;", "").Replace("Provider=SQLNCLI10.1;", "").Replace("Provider=SQLNCLI11.1;", "");
            //SqlConn1.ConnectionString = Dts.Variables["Conn_String"].Value.ToString().Replace("Provider=SQLNCLI10.1;", ""); 
            Sqlcmd1.Connection = SqlConn1;
            Sqlcmd1.CommandType = CommandType.Text;
            Sqlcmd1.CommandText = sqlStatement;
            SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
            DataSet dsCols1 = new DataSet();
            if (SqlConn1.State == ConnectionState.Closed)
                SqlConn1.Open();
            sqlAdp1.SelectCommand = Sqlcmd1;
            SqlDataReader rdr1 = null;

            rdr1 = Sqlcmd1.ExecuteReader();
            while (rdr1.Read())
            {
                exists = (int)rdr1["TableExists"];
            }

            SqlConn1.Close();
            if (exists == 0)
            {
                IDTSOutputColumnCollection100 excsourceColumns = componentSource.OutputCollection[0].OutputColumnCollection;
                dataColumns = "CREATE TABLE " + targetTable + " (";
                int colCount = 0;

                foreach (IDTSOutputColumn100 outcol in excsourceColumns)
                {
                    if (outcol.Name != "ErrorRow" && outcol.Name.ToUpper() != "ROW_ID" && outcol.Name.ToUpper() != "BATCH_ID" && outcol.Name.ToUpper() != "ZZ_STATUS_CODE")
                    {
                        if (colCount > 0)
                        {
                            dataColumns = dataColumns + " nvarchar(255)," + "[" + outcol.Name + "]";
                            colCount++;
                        }
                        else
                        {
                            dataColumns = dataColumns + "[" + outcol.Name + "]";
                            colCount++;
                        }
                    }
                }
                dataColumns = dataColumns + " nvarchar(255),Batch_ID int, ZZ_STATUS_CODE nvarchar(1), ROW_ID int identity(1,1))";
                Sqlcmd1.CommandText = dataColumns;
                SqlConn1.Open();
                Sqlcmd1.ExecuteNonQuery();
                SqlConn1.Close();

            }

            IDTSComponentMetaData100 dataConditional_Split = dataFlowTask.ComponentMetaDataCollection.New();
            dataConditional_Split.ComponentClassID = "DTSTransform.ConditionalSplit";
            CManagedComponentWrapper data_Split_Wrapper = dataConditional_Split.Instantiate();
            data_Split_Wrapper.ProvideComponentProperties();
            dataConditional_Split.Name = "Filter_Router";
            dataConditional_Split.Description = "Evaluates and directs rows in a dataset based a column.";


            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentSource.OutputCollection[0], dataConditional_Split.InputCollection[0]);
            data_Split_Wrapper.AcquireConnections(null);
            data_Split_Wrapper.ReinitializeMetaData();
            data_Split_Wrapper.ReleaseConnections();

            IDTSInput100 CondSplitInput = dataConditional_Split.InputCollection[0];
            IDTSVirtualInput100 dataCondSplitVirtualInput = CondSplitInput.GetVirtualInput();
            IDTSVirtualInputColumnCollection100 dataCondSplitVirtualInputColumns = dataCondSplitVirtualInput.VirtualInputColumnCollection;
            IDTSOutput100 dataCondSplitOutput = dataConditional_Split.OutputCollection[0];
            IDTSOutputColumnCollection100 dataCondSplitOutputColumns = dataCondSplitOutput.OutputColumnCollection;

            IDTSInputColumnCollection100 CondSplitInputCols = CondSplitInput.InputColumnCollection;
            //IDTSExternalMetadataColumnCollection100 CondSplitExtCols = componentSource.OutputCollection[0].ExternalMetadataColumnCollection;




            int CondSplitSourceColumnLineageId;


            string get_name = "";

            foreach (IDTSVirtualInputColumn100 virtualInputColumn in dataCondSplitVirtualInputColumns)
            {
                get_name = virtualInputColumn.Name.ToString();
                string getname = "[" + get_name + "]";
                CondSplitSourceColumnLineageId = dataCondSplitVirtualInput.VirtualInputColumnCollection[get_name].LineageID;



                if (get_name.ToUpper() == "ERRORROW")
                {

                    IDTSInputColumn100 inputColumn = data_Split_Wrapper.SetUsageType(CondSplitInput.ID, dataCondSplitVirtualInput, CondSplitSourceColumnLineageId, DTSUsageType.UT_READONLY);
                    IDTSOutput100 splitOutput_1 = data_Split_Wrapper.InsertOutput(DTSInsertPlacement.IP_BEFORE, dataConditional_Split.OutputCollection[0].ID);
                    data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "EvaluationOrder", 0);
                    data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "FriendlyExpression", "[ErrorRow] == \"Correct\"");

                }
            }



            IDTSComponentMetaData100 data_DerivedColumn_Error = null;
            data_DerivedColumn_Error = dataFlowTask.ComponentMetaDataCollection.New();
            data_DerivedColumn_Error.ComponentClassID = "DTSTransform.DerivedColumn";
            CManagedComponentWrapper DesignDerivedTransformColumns_Error = data_DerivedColumn_Error.Instantiate();
            DesignDerivedTransformColumns_Error.ProvideComponentProperties();
            data_DerivedColumn_Error.Name = "DerivedColTransform_ErrorOutput";

            data_DerivedColumn_Error.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
            data_DerivedColumn_Error.InputCollection[0].HasSideEffects = false;
            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[1], data_DerivedColumn_Error.InputCollection[0]);

            IDTSInput100 DerivedColumnInput_Error = data_DerivedColumn_Error.InputCollection[0];
            IDTSVirtualInput100 DerivedColumnVirtualInput_Error = DerivedColumnInput_Error.GetVirtualInput();
            IDTSVirtualInputColumnCollection100 DerivedColumnVirtualInputColumns_Error = DerivedColumnVirtualInput_Error.VirtualInputColumnCollection;

            foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns_Error)
            {
                IDTSInputColumn100 vCol = DesignDerivedTransformColumns_Error.SetUsageType(DerivedColumnInput_Error.ID, DerivedColumnVirtualInput_Error, vColumn.LineageID, DTSUsageType.UT_READONLY);

            }

            IDTSOutputColumn100 Error_ConCatCol_Error = data_DerivedColumn_Error.OutputCollection[0].OutputColumnCollection.New();
            Error_ConCatCol_Error.Name = "ErrorRowValue";
            Error_ConCatCol_Error.ExternalMetadataColumnID = 0;
            Error_ConCatCol_Error.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
            Error_ConCatCol_Error.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;
            IDTSCustomProperty100 ErrorConCatProp_Error = Error_ConCatCol_Error.CustomPropertyCollection.New();
            Error_ConCatCol_Error.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 8000, 0, 0, 1252);
            ErrorConCatProp_Error.Name = "Expression";
            ErrorConCatProp_Error.Value = concatErrCol.Trim();
            ErrorConCatProp_Error = Error_ConCatCol_Error.CustomPropertyCollection.New();
            ErrorConCatProp_Error.Name = "FriendlyExpression";
            ErrorConCatProp_Error.Value = concatErrCol.Trim();
            Error_ConCatCol_Error.MappedColumnID = 0;


            IDTSOutputColumn100 Error_ConCatCol_Error1 = data_DerivedColumn_Error.OutputCollection[0].OutputColumnCollection.New();
            Error_ConCatCol_Error1.Name = "FileName";
            Error_ConCatCol_Error1.ExternalMetadataColumnID = 0;
            Error_ConCatCol_Error1.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
            Error_ConCatCol_Error1.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;
            IDTSCustomProperty100 ErrorConCatProp_Error1 = Error_ConCatCol_Error1.CustomPropertyCollection.New();
            Error_ConCatCol_Error1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 200, 0, 0, 1252);
            ErrorConCatProp_Error1.Name = "Expression";
            ErrorConCatProp_Error1.Value = "\"" + ErrorFileName.Trim() + "\"";
            ErrorConCatProp_Error1 = Error_ConCatCol_Error1.CustomPropertyCollection.New();
            ErrorConCatProp_Error1.Name = "FriendlyExpression";
            ErrorConCatProp_Error1.Value = ErrorFileName.Trim();
            Error_ConCatCol_Error1.MappedColumnID = 0;





            IDTSComponentMetaData100 ErrorCSDestination = dataFlowTask.ComponentMetaDataCollection.New();
            ErrorCSDestination.ComponentClassID = "DTSAdapter.OleDbDestination";
            CManagedComponentWrapper ErrorCSDesignTime = ErrorCSDestination.Instantiate();
            ErrorCSDesignTime.ProvideComponentProperties();
            ErrorCSDestination.Name = "OLEDBDestination_CSError";

            ConnectionManager connectionManagerOleDb = package.Connections.Add("OLEDB");
            connectionManagerOleDb.ConnectionString = Dts.Variables["Conn_String"].Value.ToString();
            connectionManagerOleDb.Name = "OLEDB";


            ConnectionManager connectionManagerError = package.Connections.Add("OLEDB");
            connectionManagerError.ConnectionString = Dts.Variables["MetaDataConnString"].Value.ToString().Trim();

            connectionManagerError.Name = "OLEDB_ErrorHandling";

            ErrorCSDestination.RuntimeConnectionCollection[0].ConnectionManagerID = connectionManagerError.ID;
            ErrorCSDestination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(connectionManagerError);

            ErrorCSDesignTime.SetComponentProperty("OpenRowset", "Error_Output");
            ErrorCSDesignTime.SetComponentProperty("AccessMode", 3);
            ErrorCSDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
            //Connect the source to destination component:
            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn_Error.OutputCollection[0], ErrorCSDestination.InputCollection[0]);





            new Application().SaveToXml(Dts.Variables["Generated_SSIS_PkgLocation"].Value.ToString() + "ErrorPackage" + ".dtsx", package, null);

            ErrorCSDesignTime.AcquireConnections(null);
            ErrorCSDesignTime.ReinitializeMetaData();
            ErrorCSDesignTime.ReleaseConnections();

            ErrorCSDestination.ValidateExternalMetadata = true;

            //Get the destination s default input and virtual input:


            IDTSInput100 ErrorCSDestInput = ErrorCSDestination.InputCollection[0];
            IDTSVirtualInput100 vErrorCSInput = ErrorCSDestInput.GetVirtualInput();
            IDTSInputColumnCollection100 ErrorCSDestInputCols = ErrorCSDestInput.InputColumnCollection;
            IDTSExternalMetadataColumnCollection100 ErrorCSDestExtCols = ErrorCSDestInput.ExternalMetadataColumnCollection;
            IDTSOutputColumnCollection100 ErrorCSSourceColumns = data_DerivedColumn_Error.OutputCollection[0].OutputColumnCollection;



            // The OLEDB destination requires you to hook up the external data conversion columns

            foreach (IDTSOutputColumn100 outputCol in ErrorCSSourceColumns)
            {

                try
                {
                    // Get the external column id
                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)ErrorCSDestExtCols[outputCol.Name];
                    if (extCol != null)
                    {
                        // Create an input column from an output col of previous component.
                        vErrorCSInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                        IDTSInputColumn100 inputCol = ErrorCSDestInputCols.GetInputColumnByLineageID(outputCol.ID);
                        if (inputCol != null)
                        {
                            // map the input column with an external metadata column
                            ErrorCSDesignTime.MapInputColumn(ErrorCSDestInput.ID, inputCol.ID, extCol.ID);
                        }
                    }
                }
                catch (Exception exc)
                {

                }
            }


            IDTSComponentMetaData100 dataConvertComponent = dataFlowTask.ComponentMetaDataCollection.New();
            dataConvertComponent.ComponentClassID = "DTSTransform.DataConvert";
            dataConvertComponent.Name = "DataConvert";
            dataConvertComponent.Description = "Data Conversion Component";
            CManagedComponentWrapper dataConvertWrapper = dataConvertComponent.Instantiate();
            dataConvertWrapper.ProvideComponentProperties();

            // Connect the source and the transform
            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConvertComponent.InputCollection[0]);


            SqlCommand Sqlcmd = new SqlCommand();
            SqlConnection SqlConn = new SqlConnection();
            //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";

            SqlConn.ConnectionString = Dts.Variables["Conn_String"].Value.ToString().Replace("Provider=SQLOLEDB.1;", "").Replace("Provider=SQLNCLI10.1;", "").Replace("Provider=SQLNCLI11.1;", "");
            //SqlConn.ConnectionString = Dts.Variables["Conn_String"].Value.ToString().Replace("Provider=SQLNCLI10.1;", "");
            Sqlcmd.Connection = SqlConn;
            Sqlcmd.CommandType = CommandType.Text;
            Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + targetTable + "'";
            SqlDataAdapter sqlAdp = new SqlDataAdapter();
            DataSet dsCols = new DataSet();
            if (SqlConn.State == ConnectionState.Closed)
                SqlConn.Open();
            sqlAdp.SelectCommand = Sqlcmd;
            SqlDataReader rdr = null;
            rdr = Sqlcmd.ExecuteReader();
            int colNo = 0;
            while (rdr.Read())
            {
                try
                {


                    string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                    string DATA_TYPE = (string)rdr["DATA_TYPE"];
                    int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                    int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                    int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);



                    IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
                    IDTSOutput100 dataConvertOutput = dataConvertComponent.OutputCollection[0];
                    IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;
                    //int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection["CustomerName"].LineageID;
                    int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                    dataConvertWrapper.SetUsageType(
                            dataConvertComponent.InputCollection[0].ID,
                            dataConvertVirtualInput,
                            sourceColumnLineageId,
                            DTSUsageType.UT_READONLY);

                    //IDTSOutputColumn100 ConvCol1 = dataConvertWrapper.InsertOutputColumnAt(dataConvertOutput.ID, 0, "CustomerName", string.Empty);
                    IDTSOutputColumn100 ConvCol1 = dataConvertWrapper.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);
                    if (COLUMN_NAME.ToUpper() != "ROW_ID")
                    {

                        if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                        }
                        if (DATA_TYPE.ToLower() == "nvarchar")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                        }
                        else if (DATA_TYPE.ToLower() == "numeric")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                        }
                        else if (DATA_TYPE.ToLower() == "decimal")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DECIMAL, 0, 0, 0, 0);
                        }
                        else if (DATA_TYPE.ToLower() == "float")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                        }
                        else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                        }
                        else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                        }

                        ConvCol1.MappedColumnID = colNo;
                        dataConvertWrapper.SetOutputColumnProperty(
                                dataConvertOutput.ID,
                                ConvCol1.ID,
                                "SourceInputColumnLineageID",
                                sourceColumnLineageId);
                        colNo = colNo + 1;
                    }
                }
                catch (Exception ex)
                {

                }

            }

            if (SqlConn.State == ConnectionState.Open)
                SqlConn.Close();


            IDTSVirtualInput100 ErrorDataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
            IDTSOutput100 ErrorDataConvertOutput = dataConvertComponent.OutputCollection[1];

            IDTSOutputColumn100 Error_ConvCol = dataConvertComponent.OutputCollection[1].OutputColumnCollection.New();
            Error_ConvCol.Name = "ErrorRowValue";
            Error_ConvCol.ExternalMetadataColumnID = 0;
            Error_ConvCol.ErrorRowDisposition = DTSRowDisposition.RD_NotUsed;
            Error_ConvCol.TruncationRowDisposition = DTSRowDisposition.RD_NotUsed;
            IDTSCustomProperty100 ErrorConvProp = Error_ConvCol.CustomPropertyCollection.New();
            Error_ConvCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 8000, 0, 0, 1252);
            ErrorConvProp.Name = "Expression";
            ErrorConvProp.Value = concatErrCol.Trim();
            ErrorConvProp = Error_ConvCol.CustomPropertyCollection.New();
            ErrorConvProp.Name = "FriendlyExpression";
            ErrorConvProp.Value = concatErrCol.Trim();
            Error_ConvCol.MappedColumnID = 0;

            IDTSOutputColumnCollection100 ErrorDataConvertOutputColumns = ErrorDataConvertOutput.OutputColumnCollection;

            IDTSOutput100 ErrorOuput = dataConvertComponent.OutputCollection[1];

            ErrorOuput.ExclusionGroup = 1;
            IDTSInput100 ErrorInput = dataConvertComponent.InputCollection[0];
            ErrorOuput.SynchronousInputID = ErrorInput.ID;
            ErrorOuput.ExternalMetadataColumnCollection.RemoveAll();

            dataConvertComponent.OutputCollection[1].IsErrorOut = true;
            ErrorOuput.ExternalMetadataColumnCollection.IsUsed = false;


            IDTSOutputColumnCollection100 DataConvsourceColumn = dataConvertComponent.OutputCollection[0].OutputColumnCollection;

            foreach (IDTSOutputColumn100 DataConvOutputCol in DataConvsourceColumn)
            {
                DataConvOutputCol.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                DataConvOutputCol.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;

            }



            IDTSComponentMetaData100 ErrorConvDestination = dataFlowTask.ComponentMetaDataCollection.New();
            ErrorConvDestination.ComponentClassID = "DTSAdapter.OleDbDestination";
            CManagedComponentWrapper ErrorConvDestDesignTime = ErrorConvDestination.Instantiate();
            ErrorConvDestDesignTime.ProvideComponentProperties();
            ErrorConvDestination.Name = "OLEDBDestination_DataConvError";



            ErrorConvDestination.RuntimeConnectionCollection[0].ConnectionManagerID = connectionManagerError.ID;
            ErrorConvDestination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(connectionManagerError);

            ErrorConvDestDesignTime.SetComponentProperty("OpenRowset", "Error_Output"); //Prajakta - To add the value from "DST Table"
            ErrorConvDestDesignTime.SetComponentProperty("AccessMode", 3);
            ErrorConvDestDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
            //Connect the source to destination component:
            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[1], ErrorConvDestination.InputCollection[0]);

            ErrorConvDestDesignTime.AcquireConnections(null);
            ErrorConvDestDesignTime.ReinitializeMetaData();
            ErrorConvDestDesignTime.ReleaseConnections();



            //Get the destination s default input and virtual input:


            IDTSInput100 ErrorConvDestInput = ErrorConvDestination.InputCollection[0];
            IDTSVirtualInput100 vErrorConvInput = ErrorConvDestInput.GetVirtualInput();
            IDTSInputColumnCollection100 ErrorConvDestInputCols = ErrorConvDestInput.InputColumnCollection;
            IDTSExternalMetadataColumnCollection100 ErrorConvDestExtCols = ErrorConvDestInput.ExternalMetadataColumnCollection;
            IDTSOutputColumnCollection100 ErrorConvsourceColumns = dataConvertComponent.OutputCollection[1].OutputColumnCollection;



            // The OLEDB destination requires you to hook up the external data conversion columns

            foreach (IDTSOutputColumn100 outputCol in ErrorConvsourceColumns)
            {

                try
                {
                    // Get the external column id
                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)ErrorConvDestExtCols[outputCol.Name];
                    if (extCol != null)
                    {
                        // Create an input column from an output col of previous component.
                        vErrorConvInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                        IDTSInputColumn100 inputCol = ErrorConvDestInputCols.GetInputColumnByLineageID(outputCol.ID);
                        if (inputCol != null)
                        {
                            // map the input column with an external metadata column
                            ErrorConvDestDesignTime.MapInputColumn(ErrorConvDestInput.ID, inputCol.ID, extCol.ID);
                        }
                    }
                }
                catch (Exception exc)
                {

                }
            }


            IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
            destination.ComponentClassID = "DTSAdapter.OleDbDestination";
            CManagedComponentWrapper destDesignTime = destination.Instantiate();
            destDesignTime.ProvideComponentProperties();
            destination.Name = "OLEDBDestination";



            destination.RuntimeConnectionCollection[0].ConnectionManagerID = connectionManagerOleDb.ID;
            destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(connectionManagerOleDb);

            destDesignTime.SetComponentProperty("OpenRowset", targetTable); //Prajakta - To add the value from "DST Table"
            destDesignTime.SetComponentProperty("AccessMode", 3);
            destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
            //Connect the source to destination component:
            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], destination.InputCollection[0]);
            IDTSInput100 destinationInputerr = destination.InputCollection[0];
            IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
            IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

            //Reinitialize the destination metadata:

            destDesignTime.AcquireConnections(null);
            destDesignTime.ReinitializeMetaData();
            destDesignTime.ReleaseConnections();

            //Get the destination s default input and virtual input:


            IDTSInput100 destInput = destination.InputCollection[0];
            IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
            IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
            IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
            IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent.OutputCollection[0].OutputColumnCollection;

            IDTSOutputColumnCollection100 exSourceColumns = componentSource.OutputCollection[0].OutputColumnCollection;

            foreach (IDTSInputColumn100 DestInputColumn in destInputCols)
            {
                DestInputColumn.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                DestInputColumn.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
            }

            // The OLEDB destination requires you to hook up the external data conversion columns
            foreach (IDTSOutputColumn100 outputCol in sourceColumns)
            {
                outputCol.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                outputCol.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
                try
                {
                    // Get the external column id
                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                    if (extCol != null && outputCol.Name.ToUpper() != "ROW_ID")
                    {
                        // Create an input column from an output col of previous component.
                        vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                        IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                        if (inputCol != null)
                        {
                            // map the input column with an external metadata column
                            destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                        }
                    }
                }
                catch (Exception exc)
                {

                    Dts.TaskResult = (int)ScriptResults.Failure;

                }
            }


            IDTSOutputColumnCollection100 DestsourceColumn = destination.OutputCollection[0].OutputColumnCollection;
            destination.InputCollection[0].ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;

            foreach (IDTSOutputColumn100 DestOutputCol in DestsourceColumn)
            {
                DestOutputCol.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                DestOutputCol.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
            }







            IDTSVirtualInput100 ErrorFianlDBVirtualInput = destination.InputCollection[0].GetVirtualInput();
            IDTSOutput100 ErrorFinalOutput = destination.OutputCollection[0];

            IDTSOutputColumn100 Error_FinalCol = destination.OutputCollection[0].OutputColumnCollection.New();
            Error_FinalCol.Name = "ErrorRowValue";
            Error_FinalCol.ExternalMetadataColumnID = 0;
            Error_FinalCol.ErrorRowDisposition = DTSRowDisposition.RD_NotUsed;
            Error_FinalCol.TruncationRowDisposition = DTSRowDisposition.RD_NotUsed;
            IDTSCustomProperty100 ErrorFinalProp = Error_FinalCol.CustomPropertyCollection.New();
            Error_FinalCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 8000, 0, 0, 1252);
            ErrorFinalProp.Name = "Expression";
            ErrorFinalProp.Value = concatErrCol.Trim();
            ErrorFinalProp = Error_FinalCol.CustomPropertyCollection.New();
            ErrorFinalProp.Name = "FriendlyExpression";
            ErrorFinalProp.Value = concatErrCol.Trim();
            Error_FinalCol.MappedColumnID = 0;

            //IDTSInputColumnCollection100 ErrorFinalOutputColumns = ErrorFinalOutput.InputColumnCollection;

            IDTSOutput100 ErrorFinalOuput = destination.OutputCollection[0];

            ErrorFinalOuput.ExclusionGroup = 1;
            IDTSInput100 ErrorFinalInput = destination.InputCollection[0];
            ErrorFinalOuput.SynchronousInputID = ErrorFinalInput.ID;
            ErrorFinalOuput.ExternalMetadataColumnCollection.RemoveAll();

            destination.OutputCollection[0].IsErrorOut = true;
            ErrorFinalInput.ExternalMetadataColumnCollection.IsUsed = false;




            IDTSOutputColumnCollection100 DataFinalsourceColumn = destination.OutputCollection[0].OutputColumnCollection;

            foreach (IDTSOutputColumn100 DataDestOutputCol in DataFinalsourceColumn)
            {
                DataDestOutputCol.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                DataDestOutputCol.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;

            }






            //IDTSComponentMetaData100 ErrorDestDerivedColumn = null;
            //ErrorDestDerivedColumn = dataFlowTask.ComponentMetaDataCollection.New();
            //ErrorDestDerivedColumn.ComponentClassID = "DTSTransform.DerivedColumn";
            //CManagedComponentWrapper ErrorDesignDerivedTransformColumns = ErrorDestDerivedColumn.Instantiate();
            //ErrorDesignDerivedTransformColumns.ProvideComponentProperties();
            //ErrorDestDerivedColumn.Name = "DerivedColTransform_FinalError";

            //ErrorDestDerivedColumn.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
            //ErrorDestDerivedColumn.InputCollection[0].HasSideEffects = false;
            //dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(destination.OutputCollection[0], ErrorDestDerivedColumn.InputCollection[0]);

            //IDTSInput100 ErrorDerivedColumnInput = ErrorDestDerivedColumn.InputCollection[0];
            //IDTSVirtualInput100 ErrorDerivedColumnFinalVirtualInput = ErrorDerivedColumnInput.GetVirtualInput();
            //IDTSVirtualInputColumnCollection100 ErrorDerivedColumnFinalVirtualInputColumns = ErrorDerivedColumnFinalVirtualInput.VirtualInputColumnCollection;


            //IDTSVirtualInput100 ErrorFinalDCVirtualInput = ErrorDestDerivedColumn.InputCollection[0].GetVirtualInput();
            //IDTSOutput100 ErrorDCFinalOutput = ErrorDestDerivedColumn.OutputCollection[0];

            //IDTSOutputColumn100 Error_DCFinalConvCol = ErrorDestDerivedColumn.OutputCollection[0].OutputColumnCollection.New();
            //Error_DCFinalConvCol.Name = "ErrorRowValue";
            //Error_DCFinalConvCol.ExternalMetadataColumnID = 0;
            //Error_DCFinalConvCol.ErrorRowDisposition = DTSRowDisposition.RD_NotUsed;
            //Error_DCFinalConvCol.TruncationRowDisposition = DTSRowDisposition.RD_NotUsed;
            //IDTSCustomProperty100 ErrorFinalDCProp = Error_DCFinalConvCol.CustomPropertyCollection.New();
            //Error_DCFinalConvCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 8000, 0, 0, 1252);
            //ErrorFinalDCProp.Name = "Expression";
            //ErrorFinalDCProp.Value = concatErrCol.Trim();
            //ErrorFinalDCProp = Error_DCFinalConvCol.CustomPropertyCollection.New();
            //ErrorFinalDCProp.Name = "FriendlyExpression";
            //ErrorFinalDCProp.Value = concatErrCol.Trim();
            //Error_DCFinalConvCol.MappedColumnID = 0;





            IDTSComponentMetaData100 ErrorFinalDestination = dataFlowTask.ComponentMetaDataCollection.New();
            ErrorFinalDestination.ComponentClassID = "DTSAdapter.OleDbDestination";
            CManagedComponentWrapper ErrorFinalonvDestDesignTime = ErrorFinalDestination.Instantiate();
            ErrorFinalonvDestDesignTime.ProvideComponentProperties();
            ErrorFinalDestination.Name = "OLEDBDestination_FinalError";












            ErrorFinalDestination.RuntimeConnectionCollection[0].ConnectionManagerID = connectionManagerError.ID;
            ErrorFinalDestination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(connectionManagerError);

            ErrorFinalonvDestDesignTime.SetComponentProperty("OpenRowset", "Error_Output"); //Prajakta - To add the value from "DST Table"
            ErrorFinalonvDestDesignTime.SetComponentProperty("AccessMode", 3);
            ErrorFinalonvDestDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
            //Connect the source to destination component:
            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(destination.OutputCollection[0], ErrorFinalDestination.InputCollection[0]);

            ErrorFinalonvDestDesignTime.AcquireConnections(null);
            ErrorFinalonvDestDesignTime.ReinitializeMetaData();
            ErrorFinalonvDestDesignTime.ReleaseConnections();



            //Get the destination s default input and virtual input:


            IDTSInput100 ErrorFinalDestInput = ErrorFinalDestination.InputCollection[0];
            IDTSVirtualInput100 vErrorFinalInput = ErrorFinalDestInput.GetVirtualInput();
            IDTSInputColumnCollection100 ErrorFinalInputCols = ErrorFinalDestInput.InputColumnCollection;
            IDTSExternalMetadataColumnCollection100 ErrorFinalExtCols = ErrorFinalDestInput.ExternalMetadataColumnCollection;
            IDTSOutputColumnCollection100 ErrorFinalSourceColumns = destination.OutputCollection[0].OutputColumnCollection;



            // The OLEDB destination requires you to hook up the external data conversion columns

            foreach (IDTSOutputColumn100 outputCol in ErrorFinalSourceColumns)
            {

                try
                {
                    // Get the external column id
                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)ErrorFinalExtCols[outputCol.Name];
                    if (extCol != null)
                    {
                        // Create an input column from an output col of previous component.
                        vErrorFinalInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                        IDTSInputColumn100 inputCol = ErrorFinalInputCols.GetInputColumnByLineageID(outputCol.ID);
                        if (inputCol != null)
                        {
                            string testInputdate = inputCol.Name;
                            // map the input column with an external metadata column
                            ErrorFinalonvDestDesignTime.MapInputColumn(ErrorFinalDestInput.ID, inputCol.ID, extCol.ID);
                        }
                    }
                }
                catch (Exception exc)
                {

                }
            }












            // Save package to disk, DEBUG only
            string FlatFileTgtFolder = Dts.Variables["Generated_SSIS_PkgLocation"].Value.ToString();
            new Application().SaveToXml(FlatFileTgtFolder + targetTable + ".dtsx", package, null);
            package.Execute();



        }

        private static void sS_AssignColumnProperties(RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100 flatFileCol, string getColName, string getDelim)
        {


            flatFileCol.ColumnType = "Delimited";
            flatFileCol.ColumnDelimiter = getDelim;


            flatFileCol.DataType = RuntimeWrapper.DataType.DT_STR;


            flatFileCol.ColumnWidth = 255;


            RuntimeWrapper.IDTSName100 columnName = flatFileCol as RuntimeWrapper.IDTSName100;
            columnName.Name = getColName.ToString();
        }

        private void fnAddTasks(string SheetName, string TargetTbl, string SrcConn)
        {
            Package package = new Package();
            Microsoft.SqlServer.Dts.Runtime.Application App = new Microsoft.SqlServer.Dts.Runtime.Application();
            //try
            // {
            // Add Data Flow Task
            Executable dataFlowTask = package.Executables.Add("STOCK:PipelineTask");

            // Set the name (otherwise it will be a random GUID value)

            TaskHost taskHost = dataFlowTask as TaskHost;
            taskHost.Name = TargetTbl + "_" + SheetName;

            // We need a reference to the InnerObject to add items to the data flow
            MainPipe pipeline = taskHost.InnerObject as MainPipe;

            ComponentEventHandler events = new ComponentEventHandler();
            pipeline.Events = DtsConvert.GetExtendedInterface(events as IDTSComponentEvents);

            //
            // Add SQL connection manager
            //
            ConnectionManager connection = package.Connections.Add("OLEDB");
            connection.Name = TargetTbl + SheetName;
            //connection.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Provider=SQLNCLI10.1;Integrated Security=SSPI;Auto Translate=False;";
            //connection.ConnectionString = "Provider=SQLOLEDB.1;Data Source=172.25.121.105;Initial Catalog=Intact_POC_Data;Trusted_Connection = False; User ID=sa;Password=Password123;";
            string conString = Dts.Variables["Conn_String"].Value.ToString();
            connection.ConnectionString = conString;
            // aDD eXCEL cONNECTION MANAGER

            ConnectionManager excelconnection = package.Connections.Add("Excel");


            //excelconnection.ConnectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + SrcConn + @";Extended Properties=""EXCEL 8.0;HDR=YES""";
            excelconnection.ConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + SrcConn + @";Extended Properties =""Excel 12.0 Xml;HDR=YES""";

            DataTable tablesInFile;
            //string connectionString = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + SrcConn + @";Extended Properties=""EXCEL 8.0;HDR=YES""";
            string connectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + SrcConn + @";Extended Properties =""Excel 12.0 Xml;HDR=YES""";
            OleDbConnection excelConnectionSheet;
            excelConnectionSheet = new OleDbConnection(connectionString);
            excelConnectionSheet.Open();
            tablesInFile = excelConnectionSheet.GetSchema("Tables");
            //string firstSheet = tablesInFile.Rows[0]["TABLE_NAME"].ToString();
            string firstSheet = SheetName;

            excelConnectionSheet.Close();

            excelconnection.Name = "Excel " + TargetTbl + SheetName;
            //
            // Add Excel Source
            //
            IDTSComponentMetaData100 ExcelSource = pipeline.ComponentMetaDataCollection.New();
            ExcelSource.ComponentClassID = "DTSAdapter.EXCELSource";
            ExcelSource.ValidateExternalMetadata = true;
            ExcelSource.Name = TargetTbl;
            ExcelSource.Description = "Source data in the DataFlow";
            IDTSDesigntimeComponent100 instance = ExcelSource.Instantiate();
            instance.ProvideComponentProperties();
            instance.SetComponentProperty("AccessMode", 0);
            //namespace

            instance.SetComponentProperty("OpenRowset", firstSheet);

            ExcelSource.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(excelconnection);
            ExcelSource.RuntimeConnectionCollection[0].ConnectionManagerID = excelconnection.ID;

            // Acquire Connections and reinitialize the component
            instance.AcquireConnections(null);
            instance.ReinitializeMetaData();
            instance.ReleaseConnections();
            int exists = 0;

            string sqlStatement = "SELECT CASE WHEN EXISTS(SELECT 1 FROM information_schema.tables where table_name = '" + TargetTbl + "') THEN 1 ELSE 0 END TableExists";

            string dataColumns = null;


            SqlCommand Sqlcmd1 = new SqlCommand();
            SqlConnection SqlConn1 = new SqlConnection();
            SqlConn1.ConnectionString = conString.Replace("Provider=SQLOLEDB.1;", "").Replace("Provider=SQLNCLI10.1;", "").Replace("Provider=SQLNCLI11.1;", ""); ;
            //SqlConn1.ConnectionString = conString.Replace("Provider=SQLNCLI10.1;", ""); 
            Sqlcmd1.Connection = SqlConn1;
            Sqlcmd1.CommandType = CommandType.Text;
            Sqlcmd1.CommandText = sqlStatement;
            SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
            DataSet dsCols1 = new DataSet();
            if (SqlConn1.State == ConnectionState.Closed)
                SqlConn1.Open();
            sqlAdp1.SelectCommand = Sqlcmd1;
            SqlDataReader rdr1 = null;

            rdr1 = Sqlcmd1.ExecuteReader();
            while (rdr1.Read())
            {
                exists = (int)rdr1["TableExists"];
            }

            SqlConn1.Close();
            if (exists == 0)
            {
                IDTSOutputColumnCollection100 excsourceColumns = ExcelSource.OutputCollection[0].OutputColumnCollection;
                dataColumns = "CREATE TABLE " + TargetTbl + " (";
                int colCount = 0;

                foreach (IDTSOutputColumn100 outcol in excsourceColumns)
                {
                    if (colCount > 0 && outcol.Name.ToUpper() != "ROW_ID" && outcol.Name.ToUpper() != "BATCH_ID" && outcol.Name.ToUpper() != "ZZ_STATUS_CODE")
                    {
                        dataColumns = dataColumns + " nvarchar(255)," + "[" + outcol.Name + "]";
                        colCount++;
                    }
                    else
                    {
                        dataColumns = dataColumns + "[" + outcol.Name + "]";
                        colCount++;
                    }
                }
                dataColumns = dataColumns + " nvarchar(255),Batch_ID int, ZZ_STATUS_CODE nvarchar(1), ROW_ID int identity(1,1))";
                Sqlcmd1.CommandText = dataColumns;
                SqlConn1.Open();
                Sqlcmd1.ExecuteNonQuery();
                SqlConn1.Close();

            }




            IDTSComponentMetaData100 dataConvertComponent = pipeline.ComponentMetaDataCollection.New();
            dataConvertComponent.ComponentClassID = "DTSTransform.DataConvert";
            dataConvertComponent.Name = TargetTbl;
            dataConvertComponent.Description = "Data Conversion Component";
            CManagedComponentWrapper dataConvertWrapper = dataConvertComponent.Instantiate();
            dataConvertWrapper.ProvideComponentProperties();

            // Connect the source and the transform
            pipeline.PathCollection.New().AttachPathAndPropagateNotifications(ExcelSource.OutputCollection[0], dataConvertComponent.InputCollection[0]);

            //
            // Configure the transform
            //

            SqlCommand Sqlcmd = new SqlCommand();
            SqlConnection SqlConn = new SqlConnection();
            //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";

            SqlConn.ConnectionString = conString.Replace("Provider=SQLOLEDB.1;", "").Replace("Provider=SQLNCLI10.1;", "").Replace("Provider=SQLNCLI11.1;", ""); ;
            //SqlConn.ConnectionString = conString.Replace("Provider=SQLNCLI10.1;", "");
            Sqlcmd.Connection = SqlConn;
            Sqlcmd.CommandType = CommandType.Text;
            Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + TargetTbl + "'";
            SqlDataAdapter sqlAdp = new SqlDataAdapter();
            DataSet dsCols = new DataSet();
            if (SqlConn.State == ConnectionState.Closed)
                SqlConn.Open();
            sqlAdp.SelectCommand = Sqlcmd;
            SqlDataReader rdr = null;
            rdr = Sqlcmd.ExecuteReader();
            int i = 0;
            while (rdr.Read())
            {
                try
                {
                    string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                    string DATA_TYPE = (string)rdr["DATA_TYPE"];
                    int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                    int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                    int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                    IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
                    IDTSOutput100 dataConvertOutput = dataConvertComponent.OutputCollection[0];
                    IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;
                    //int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection["CustomerName"].LineageID;
                    int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                    dataConvertWrapper.SetUsageType(
                            dataConvertComponent.InputCollection[0].ID,
                            dataConvertVirtualInput,
                            sourceColumnLineageId,
                            DTSUsageType.UT_READONLY);

                    //IDTSOutputColumn100 ConvCol1 = dataConvertWrapper.InsertOutputColumnAt(dataConvertOutput.ID, 0, "CustomerName", string.Empty);
                    IDTSOutputColumn100 ConvCol1 = dataConvertWrapper.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);
                    if (COLUMN_NAME.ToUpper() != "ROW_ID")
                    {

                        if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                        }
                        if (DATA_TYPE.ToLower() == "nvarchar")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                        }
                        else if (DATA_TYPE.ToLower() == "numeric")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                        }
                        else if (DATA_TYPE.ToLower() == "float")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                        }
                        else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                        }
                        else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                        }

                        else if (DATA_TYPE.ToLower() == "decimal")
                        {
                            ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DECIMAL, 0, 0, 0, 0);
                        }

                        ConvCol1.MappedColumnID = i;
                        dataConvertWrapper.SetOutputColumnProperty(
                                dataConvertOutput.ID,
                                ConvCol1.ID,
                                "SourceInputColumnLineageID",
                                sourceColumnLineageId);
                        i = i + 1;
                    }
                }
                catch (Exception ex)
                {

                }

            }

            if (SqlConn.State == ConnectionState.Open)
                SqlConn.Close();

            //
            // Add OLEDB Destination
            //

            IDTSComponentMetaData100 destComponent = pipeline.ComponentMetaDataCollection.New();
            destComponent.ComponentClassID = "DTSAdapter.OleDbDestination";
            destComponent.ValidateExternalMetadata = true;

            IDTSDesigntimeComponent100 destDesignTimeComponent = destComponent.Instantiate();
            destDesignTimeComponent.ProvideComponentProperties();
            destComponent.Name = TargetTbl + "OleDb Destination";

            destDesignTimeComponent.SetComponentProperty("AccessMode", 3);
            destDesignTimeComponent.SetComponentProperty("OpenRowset", TargetTbl);

            // set connection
            destComponent.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(connection);
            destComponent.RuntimeConnectionCollection[0].ConnectionManagerID = connection.ID;

            // get metadata
            destDesignTimeComponent.AcquireConnections(null);
            destDesignTimeComponent.ReinitializeMetaData();
            destDesignTimeComponent.ReleaseConnections();

            //
            // Connect source (data conversion) and destination
            //

            IDTSPath100 path = pipeline.PathCollection.New();
            path.AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], destComponent.InputCollection[0]);

            //
            // Configure the destination
            //

            IDTSInput100 destInput = destComponent.InputCollection[0];
            IDTSVirtualInput100 destVirInput = destInput.GetVirtualInput();
            IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
            IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
            IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent.OutputCollection[0].OutputColumnCollection;
            foreach (IDTSInputColumn100 DestInputColumn in destInputCols)
            {
                DestInputColumn.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                DestInputColumn.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
            }


            // IDTSOutputColumnCollection100 excsourceColumns = ExcelSource.OutputCollection[0].OutputColumnCollection;



            // The OLEDB destination requires you to hook up the external data conversion columns
            foreach (IDTSOutputColumn100 outputCol in sourceColumns)
            {
                // Get the external column id
                IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                if (extCol != null)
                {
                    // Create an input column from an output col of previous component.
                    destVirInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                    IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                    if (inputCol != null)
                    {
                        // map the input column with an external metadata column
                        destDesignTimeComponent.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                    }
                }
            }

            IDTSOutputColumnCollection100 DestColumn = destComponent.OutputCollection[0].OutputColumnCollection;

            destComponent.InputCollection[0].ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;


            foreach (IDTSOutputColumn100 DestOutputCol in DestColumn)
            {
                DestOutputCol.ErrorRowDisposition = DTSRowDisposition.RD_RedirectRow;
                DestOutputCol.TruncationRowDisposition = DTSRowDisposition.RD_RedirectRow;
            }
            string TgtFolder = Dts.Variables["Generated_SSIS_PkgLocation"].Value.ToString();
            App.SaveToXml(TgtFolder + TargetTbl + "_" + SheetName.Replace("$", "") + ".dtsx", package, null);
            package.Execute();

            /*
            Executable exec = package.Executables.Add("STOCK:SQLTask");
            TaskHost th = exec as TaskHost;

            th.Properties["Name"].SetValue(th, "Update Row ID");
            th.Properties["Description"].SetValue(th, "Update RowID");
            th.Properties["Connection"].SetValue(th, TargetTbl);

            string SQL_Query = "DECLARE @id INT SET @id = 0 UPDATE " + TargetTbl + "SET @id = Row_ID = @id + 1";
            th.Properties["SqlStatementSource"].SetValue(th, SQL_Query);
            PrecedenceConstraint pcFileTasks = package.PrecedenceConstraints.Add((Executable)dataFlowTask, (Executable)exec); */
            // The OLEDB destination requires you to hook up the external Excel source columns
            //foreach (IDTSOutputColumn100 outputCol in excsourceColumns)
            //{
            //    // Get the external column id
            //    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
            //    if (extCol != null)
            //    {
            //        // Create an input column from an output col of previous component.
            //        destVirInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
            //        IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
            //        if (inputCol != null)
            //        {
            //            // map the input column with an external metadata column
            //            destDesignTimeComponent.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
            //        }
            //    }
            //}
            //}
            //catch (Exception ex)
            //{
            //    Dts.TaskResult = (int)ScriptResults.Failure;
            //    string TgtFolder = Dts.Variables["Generated_SSIS_PkgLocation"].Value.ToString();
            //     App.SaveToXml(TgtFolder+ "Excel_OLEDB.dtsx", package, null);
            //    Dts.TaskResult = (int)ScriptResults.Failure;
            //}
        }

        private void GetBatchID()
        {
            SqlCommand Sqlcmd1 = new SqlCommand();
            using (SqlConnection SqlConn1 = new SqlConnection())
            {

                //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";

                SqlConn1.ConnectionString = Dts.Variables["MetaDataConnString"].Value.ToString().Trim().Replace("Provider=SQLOLEDB.1;", "").Replace("Provider=SQLNCLI10.1;", "").Replace("Provider=SQLNCLI11.1;", "");
                Sqlcmd1.Connection = SqlConn1;
                Sqlcmd1.CommandType = CommandType.StoredProcedure;
                Sqlcmd1.CommandText = "[dbo].[COMMON_UPDATE_BATCH_ID_SP]";
                SqlParameter param1;
                string Testdata = Dts.Variables["Client_ID"].Value.ToString().Trim();
                param1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                param1.Direction = ParameterDirection.Input;
                param1.DbType = DbType.String;
                Sqlcmd1.Parameters.Add(param1);

                Testdata = Dts.Variables["Project_ID"].Value.ToString().Trim();
                SqlParameter param2;
                param2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                param2.Direction = ParameterDirection.Input;
                param2.DbType = DbType.String;
                Sqlcmd1.Parameters.Add(param2);

                Testdata = Dts.Variables["Config_ID"].Value.ToString().Trim();
                SqlParameter param3;
                param3 = new SqlParameter("@Config_ID", Dts.Variables["Config_ID"].Value);
                param3.Direction = ParameterDirection.Input;
                param3.DbType = DbType.String;
                Sqlcmd1.Parameters.Add(param3);

                Testdata = fileName.Trim();
                SqlParameter param4;
                param4 = new SqlParameter("@Table_Name", fileName.Trim());
                param4.Direction = ParameterDirection.Input;
                param4.DbType = DbType.String;
                Sqlcmd1.Parameters.Add(param4);


                SqlParameter param5;
                param5 = new SqlParameter("@Status_code", "");
                param5.Direction = ParameterDirection.Output;
                param5.DbType = DbType.String;
                Sqlcmd1.Parameters.Add(param5);

                SqlParameter param6;
                param6 = new SqlParameter("@Message", "");
                param6.Direction = ParameterDirection.Output;
                param6.DbType = DbType.String;
                Sqlcmd1.Parameters.Add(param6);

                SqlParameter param7;
                param7 = new SqlParameter("@Batch_ID", "");
                param7.Direction = ParameterDirection.Output;
                param7.DbType = DbType.Int32;
                Sqlcmd1.Parameters.Add(param7);

                SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
                DataSet dsCols1 = new DataSet();
                if (SqlConn1.State == ConnectionState.Closed)
                    SqlConn1.Open();
                sqlAdp1.SelectCommand = Sqlcmd1;


                SqlDataReader rdr1 = null;
                rdr1 = Sqlcmd1.ExecuteReader();
                Int32 Batch_ID = 0;

                while (rdr1.Read())
                {
                    Batch_ID = Convert.ToInt32(rdr1["Batch_ID"]);
                    //(Int32)rdr1["Batch_ID"];
                }

                SqlConn1.Close();
                Dts.Variables["Batch_ID"].Value = Batch_ID;
            }
        }
    }

    class ComponentEventHandler : IDTSComponentEvents
    {
        private void HandleEvent(string type, string subComponent, string description)
        {
            ErrorLog.SubComponent = subComponent;
            ErrorLog.Description = description;
            Console.WriteLine("[{0}] {1}: {2}", type, subComponent, description);
        }

        #region IDTSComponentEvents Members

        public void FireBreakpointHit(BreakpointTarget breakpointTarget)
        {
        }

        public void FireCustomEvent(string eventName, string eventText, ref object[] arguments, string subComponent, ref bool fireAgain)
        {
        }

        public bool FireError(int errorCode, string subComponent, string description, string helpFile, int helpContext)
        {
            HandleEvent("Error", subComponent, description);
            return true;
        }

        public void FireInformation(int informationCode, string subComponent, string description, string helpFile, int helpContext, ref bool fireAgain)
        {
            HandleEvent("Information", subComponent, description);
        }

        public void FireProgress(string progressDescription, int percentComplete, int progressCountLow, int progressCountHigh, string subComponent, ref bool fireAgain)
        {
        }

        public bool FireQueryCancel()
        {
            return true;
        }

        public void FireWarning(int warningCode, string subComponent, string description, string helpFile, int helpContext)
        {
            HandleEvent("Warning", subComponent, description);
        }

        #endregion

    }

    public static class ErrorLog
    {
        public static string SubComponent { get; set; }
        public static string Description { get; set; }

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:NoContent>Reference;Import;Folder</msb:NoContent>
		<msb:ProjectId>{BCC422BA-10FD-488F-8FE6-8AF6FD310273}</msb:ProjectId>
		<msb:DisplayName>st_0cef29a9393f4e4c8dda023d910526e5</msb:DisplayName>
		<msb:CodeName>st_0cef29a9393f4e4c8dda023d910526e5</msb:CodeName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Project Include="st_0cef29a9393f4e4c8dda023d910526e5.csproj"/>
		<msb:Breakpoint Include="93d50a33e975405e88eda339a09cffc0">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>1457</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="69ad99c112da40999ab52c272f07779b">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>92</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="1c1197ad470c432e986df751e7930129">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:LineNumber>58</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="449d992063ee4b3d9fcecffcbfc97e10">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>1439</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>9</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Settings.get_Default():ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Sett" +
    "ings")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hexaware")]
[assembly: AssemblyProduct("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyCopyright("Copyright @ Hexaware 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_0cef29a9393f4e4c8dda023d910526e5.csproj.dll">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
ERZyKQIAcG81AAAGERZyRwIAcG84AAAGERZvOwAABhMXERdvQQAABhEWbz0AAAYWjDAAAAFvUgAA
BghvWQAACm9VAAAGERZvPQAABhaMMAAAAW9SAAAGCChbAAAKb1cAAAYRFxRvTgAABhEXb0IAAAYR
F29PAAAGERZvOgAABhaMMAAAAW9YAAAGb2EAAAYTGH4hAAAKExkWExoRGG9oAAAGE4k4hgAAABGJ
b2QAAAp0GAAAAhMbERtvbgAABnL7AQBwKCQAAAosZREbGG94AAAGERsYb3oAAAYRGhYxQRuNAQAA
AROKEYoWERmiEYoXcnsCAHCiEYoYEQmMJAAAAaIRihlygQIAcKIRihoRG29uAAAGohGKKGgAAAoT
GSsJERtvbgAABhMZERoXWBMaEYlvaQAACjpu////3hURiXU+AAABE4sRiywHEYtvSQAACtwCKBYA
AApvFwAACnKBAABwbxgAAApvGQAACm8aAAAKExwWEx1yhwIAcAdyMgMAcChqAAAKEx4UEx9zawAA
ChMgc2wAAAoTIREhAigWAAAKbxcAAApydAMAcG8YAAAKbxkAAApvGgAACnKMAwBwcrYDAHBvbQAA
CnK4AwBwcrYDAHBvbQAACnLkAwBwcrYDAHBvbQAACm9uAAAKESARIW9vAAAKESAXb3AAAAoRIBEe
b3EAAApzcgAAChMic3MAAAomESFvdAAACi0HESFvdQAAChEiESBvdgAAChQTIxEgb3cAAAoTIysT
ESNyEAQAcG94AAAKpTAAAAETHREjb3kAAAot5BEhb3oAAAoRHTo/AQAAERZvOgAABhaMMAAAAW9Y
AAAGb2EAAAYTJHIoBABwB3JEBABwKGoAAAoTHxYTJREkb2gAAAYTiTizAAAAEYlvZAAACnQYAAAC
EyYRJm9uAAAGcvsBAHAoJAAACjmPAAAAESZvbgAABm8fAAAKckoEAHAoJAAACix3ESZvbgAABm8f
AAAKclgEAHAoJAAACixfESZvbgAABm8fAAAKcmoEAHAoJAAACixHESUWMSIRH3KIBABwESZvbgAA
BnKqBABwKHsAAAoTHxElF1gTJSsgER9yrgQAcBEmb24AAAZyqgQAcCh7AAAKEx8RJRdYEyURiW9p
AAAKOkH////eFRGJdT4AAAETixGLLAcRi29JAAAK3BEfcrIEAHAoHAAAChMfESARH29xAAAKESFv
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
BhEMbzsAAAYTDRENb0EAAAYRDXJbCABwFowwAAABb0YAAAYmEQ1yKwgAcBELb0YAAAYmEQxvPQAA
BhaMMAAAAW9SAAAGEQgoWwAACm9XAAAGEQxvPQAABhaMMAAAAW9SAAAGEQhvWQAACm9VAAAGEQ0U
b04AAAYRDW9CAAAGEQ1vTwAABhYTDnKHAgBwBHIyAwBwKGoAAAoTDxQTEHNrAAAKExFzbAAAChMS
ERIRB3KMAwBwcrYDAHBvbQAACnK4AwBwcrYDAHBvbQAACnLkAwBwcrYDAHBvbQAACm9uAAAKERER
Em9vAAAKEREXb3AAAAoREREPb3EAAApzcgAAChMTc3MAAAomERJvdAAACi0HERJvdQAAChETERFv
dgAAChQTFBERb3cAAAoTFCsTERRyEAQAcG94AAAKpTAAAAETDhEUb3kAAAot5BESb3oAAAoRDjop
AQAAEQxvOgAABhaMMAAAAW9YAAAGb2EAAAYTFXIoBABwBHJEBABwKGoAAAoTEBYTFhEVb2gAAAYT
NzidAAAAETdvZAAACnQYAAACExcRFhYxahEXb24AAAZvHwAACnJKBABwKCQAAAosUhEXb24AAAZv
HwAACnJYBABwKCQAAAosOhEXb24AAAZvHwAACnJqBABwKCQAAAosIhEQcogEAHARF29uAAAGcqoE
AHAoewAAChMQERYXWBMWKyAREHKuBABwERdvbgAABnKqBABwKHsAAAoTEBEWF1gTFhE3b2kAAAo6
V////94VETd1PgAAARM4ETgsBxE4b0kAAArcERBysgQAcCgcAAAKExAREREQb3EAAAoREm91AAAK
ERFvfAAACiYREm96AAAKEQRvJQAABm8wAAAGExgRGHIfCQBwbzgAAAYRGARvNQAABhEYcmkJAHBv
MwAABhEYbzsAAAYTGREZb0EAAAYRBG8mAAAGb38AAAYRDG86AAAGFowwAAABb1gAAAYRGG85AAAG
FowwAAABb4IAAAZvgQAABnNrAAAKExpzbAAAChMbERsRB3KMAwBwcrYDAHBvbQAACnK4AwBwcrYD
AHBvbQAACnLkAwBwcrYDAHBvbQAACm9uAAAKERoRG29vAAAKERoXb3AAAAoRGnKdCQBwBHJwCwBw
KGoAAApvcQAACnNyAAAKExxzcwAACiYRG290AAAKLQcRG291AAAKERwRGm92AAAKFBMdERpvdwAA
ChMdFhMeOHICAAARHXJ0CwBwb3gAAAp0IgAAARMfER1yjAsAcG94AAAKdCIAAAETIBEdcqALAHBv
eAAACqUwAAABEyERHXLSCwBwb3gAAAooqAAAChMiER1y9gsAcG94AAAKKKgAAAoTIxEYbzkAAAYW
jDAAAAFvggAABm+JAAAGEyQRGG86AAAGFowwAAABb1gAAAYTJRElb2EAAAYmESRvkQAABhEfb5MA
AAZvnQAABhMmERkRGG85AAAGFowwAAABb4IAAAZvgwAABhEkESYWb0UAAAYmERkRJW9ZAAAGFhEf
fiEAAApvQwAABhMnER9vHwAACnJKBABwKCQAAAo5cgEAABEgb6oAAApyEgwAcCiKAAAKLRMRIG+q
AAAKciIMAHAoigAACiwVEScggQAAABEhFhYg5AQAAG92AAAGESBvqgAACnIsDABwKIoAAAosFhEn
IIIAAAARIRYWFm92AAAGON0AAAARIG+qAAAKcj4MAHAoigAACiwYEScggwAAABEhESIRIxZvdgAA
BjiyAAAAESBvqgAACnJeDABwKIoAAAosEhEnGxYWESMWb3YAAAY4jQAAABEgb6oAAApyagwAcCiK
AAAKLRMRIG+qAAAKcnwMAHAoigAACiwSEScghQAAABYWFhZvdgAABitVESBvqgAACnKGDABwKIoA
AAotExEgb6oAAApylgwAcCiKAAAKLA8RJx8UFhYWFm92AAAGKyARIG+qAAAKck4MAHAoigAACiwN
EScfDhYWFhZvdgAABhEnER5vdAAABhEZESVvWQAABhEnb2sAAAZyngwAcBEmjDAAAAFvSgAABiYR
HhdYEx7eAybeABEdb3kAAAo6gv3//xEbb3QAAAoXMwcRG296AAAKEQRvJQAABm8wAAAGEygRKHJn
BwBwbzgAAAYRKBdvQAAABhEobzsAAAYTKREpb0EAAAYRKARyxg4AcCgcAAAKbzUAAAYRKXJbCABw
GYwwAAABb0YAAAYmESlyKwgAcARvRgAABiYRKG89AAAGFowwAAABb1IAAAYRBihbAAAKb1cAAAYR
KG89AAAGFowwAAABb1IAAAYRBm9ZAAAKb1UAAAYRKRRvTgAABhEpb0IAAAYRKW9PAAAGEQRvJgAA
Bm9/AAAGEyoRKhEYbzoAAAYWjDAAAAFvWAAABhEobzkAAAYWjDAAAAFvggAABm+BAAAGEShvOQAA
BhaMMAAAAW+CAAAGEysRK2+JAAAGEywRK2+KAAAGEy0RK2+PAAAGEy4RGG86AAAGFowwAAABb1gA
AAZvYQAABhMvES1vlgAABhM5Kx4ROW9kAAAKdCIAAAITMBEwGG+lAAAGETAYb6cAAAYROW9pAAAK
LdneFRE5dT4AAAETOhE6LAcROm9JAAAK3BEvb2gAAAYTOytjETtvZAAACnQYAAACEzERLhExb24A
AAZvrgAABhMyETIsQREsETFvawAABhZvkgAABiYRLRExb2sAAAZvmAAABhMzETMsHREpEStvgwAA
BhEzb54AAAYRMm+2AAAGb1EAAAYmETtvaQAACi2U3hURO3U+AAABEzwRPCwHETxvSQAACtwRKG86
AAAGFowwAAABb1gAAAZvYQAABhM0EShvOQAABhaMMAAAAW+CAAAGGG+NAAAGETRvaAAABhM3Kx4R
N29kAAAKdBgAAAITNRE1GG94AAAGETUYb3oAAAYRN29pAAAKLdneFRE3dT4AAAETOBE4LAcROG9J
AAAK3AIoFgAACm8XAAAKcsUIAHBvGAAACm8ZAAAKbxoAAAoTNgcbjSIAAAETPRE9FhE2ohE9FwSi
ET0YcngNAHCiET0ZA3LlAABwcrYDAHBvbQAACqIRPRpybA0AcKIRPSi9AAAKBhRvnwAACgZvtgAA
CiYqQXwAAAIAAADcAgAAsAAAAIwDAAAVAAAAAAAAAAAAAADnBAAAbwIAAFYHAAADAAAAJgAAAQIA
AAC3CAAAKwAAAOIIAAAVAAAAAAAAAAIAAAAACQAAcAAAAHAJAAAVAAAAAAAAAAIAAAC/CQAAKwAA
AOoJAAAVAAAAAAAAABswBAAbAwAABgAAEXNrAAAKCnNsAAAKCwcCKBYAAApvFwAACnLdBwBwbxgA
AApvGQAACm8aAAAKb5oAAApyjAMAcHK2AwBwb20AAApyuAMAcHK2AwBwb20AAApy5AMAcHK2AwBw
b20AAApvbgAACgYHb28AAAoGGm9wAAAKBnLqDgBwb3EAAAoCKBYAAApvFwAACnIuDwBwbxgAAApv
GQAACm8aAAAKb5oAAAomckIPAHACKBYAAApvFwAACnIuDwBwbxgAAApvGQAACm8aAAAKb5oAAApz
vgAACgwIF2+/AAAKCB8Qb8AAAAoGb8EAAAoIb8IAAAomAigWAAAKbxcAAApyWA8AcG8YAAAKbxkA
AApvGgAACm+aAAAKJnJuDwBwAigWAAAKbxcAAApyWA8AcG8YAAAKbxkAAApvGgAACm+aAAAKc74A
AAoNCRdvvwAACgkfEG/AAAAKBm/BAAAKCW/CAAAKJgIoFgAACm8XAAAKcoYPAHBvGAAACm8ZAAAK
bxoAAApvmgAACiZymg8AcAIoFgAACm8XAAAKcoYPAHBvGAAACm8ZAAAKc74AAAoTBBEEF2+/AAAK
EQQfEG/AAAAKBm/BAAAKEQRvwgAACiYCewQAAARvmgAACiZysA8AcAJ7BAAABG+aAAAKc74AAAoT
BREFF2+/AAAKEQUfEG/AAAAKBm/BAAAKEQVvwgAACiZyyA8AcHK2AwBwc74AAAoTBhEGGG+/AAAK
EQYfEG/AAAAKBm/BAAAKEQZvwgAACiZy4g8AcHK2AwBwc74AAAoTBxEHGG+/AAAKEQcfEG/AAAAK
Bm/BAAAKEQdvwgAACiZy9A8AcHK2AwBwc74AAAoTCBEIGG+/AAAKEQgfC2/AAAAKBm/BAAAKEQhv
wgAACiZzcgAAChMJc3MAAAomB290AAAKLQYHb3UAAAoRCQZvdgAAChQTCgZvdwAAChMKFhMLKxMR
CnIIEABwb3gAAAooqAAAChMLEQpveQAACi3kB296AAAKAigWAAAKbxcAAApyCBAAcG8YAAAKEQuM
MAAAAW/DAAAK3goHLAYHb0kAAArcKgBBHAAAAgAAAAwAAAAEAwAAEAMAAAoAAAAAAAAAHgIoxAAA
CipqBCgYAAAGBSgaAAAGchoQAHADBAUoxQAACioGKgYqPgJyDQIAcAQFKA4AAAYXKjoCcjgQAHAE
BSgOAAAGKgYqChcqOgJyUBAAcAQFKA4AAAYqHgIoDgAACioafggAAAQqHgKACAAABCoafgkAAAQq
HgKACQAABCoAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVh
ZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tl
eVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VT
ZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUA
bAAAAHwoAAAjfgAA6CgAAIggAAAjU3RyaW5ncwAAAABwSQAAYBAAACNVUwDQWQAAEAAAACNHVUlE
AAAA4FkAACQRAAAjQmxvYgAAAAAAAAACAAABVz+iAQkDAAAA+iUzABYAAAEAAAB+AAAALgAAAEwA
AAC6AAAApAAAABwAAADMAAAAQQAAAAYBAABRAAAABgAAABcAAAA7AAAAXwAAAAEAAAAGAAAAAQAA
AAEAAAAAAAoAAQAAAAAABgD1AO4ACgARAfwADgBxAUgBBgCNAe4AEgDRAbEBBgD2AeUBBgAnAhIC
BAC8AuMCEgBfA7EBBgCtBZMFBgDYBcYFBgDvBcYFBgAMBsYFBgArBsYFBgBEBsYFBgBdBsYFBgB4
BsYFBgCTBsYFBgCsBsYFBgDlBsUGBgAFB8UGBgBhB04HBgB+B+4ABgCDB+4ABgCnB8YFCgDTB70H
CgDsB70HBgABCMUGDgAjCEgBDgBFCEgBEgBfCLEBEgB3CLEBBgCcCO4ABgCkCO4ABgC8CLIIBgD/
CO4ADgAxCUgBBgBUCe4AEgBeCbEBEgBmCbEBEgB8CbEBEgCYCbEBEgDDCbEBEgDgCbEBBgD/Ce4A
EgAdCrEBEgA5CrEBBgBECu4AEgBKCrEBBABjCmwKEgCVCrEBFgDDCuMCBADvCmwKBADDCuMCBAAK
C+MCBgA0C7IIBgBNC0ELBgBbC7IIBgBvC+4ABgCqC7IIBgC3C7IIBgDMC+4ABADgC+MCBgAeDO4A
BABKDGwKBACNDGwKBAC/DGwKBADkDGwKBAAaDWwKBABdDWwKFgCVDeMCBACVDeMCBAD/DWwKBAAs
DmwKBAA6DmwKBgCGDnMOBACsDmwKBADJDmwKGgA7DyUPGgBGDyUPGgBvD1wPGgCLD1wPGgCVDxkP
GgDBDyUPGgDQDxkPGgDYDxkPGgAJECUPGgAlEFwPBABHEGwKBABwEGwKBAB8EGwKBACnEGwKBADY
EGwKBAD8EGwKBABBEWwKBAB4EWwKBACsEWwKBAC/EWwKBADZEWwKBAD5EWwKBAAhEmwKBACpEmwK
BADmEuMCEgA8E7EBEgBIE7EBBAB6E2wKEgBBFLEBBACDFOMCGgChFI8UGgCxFBkPGgDFFCUPGgDS
FFwPGgDeFBkPGgD/FBkPGgARFSUPBgA3Fe4ABgBeFT8VBgAZFj8VBgAnFj8VBgA/Fj8VBABSFmwK
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
AAABAAEAjRgBAAIAmBgAIAAAAAABIAEAShkAIAAAAAAAIAAAAAAAIAAAAAABAAEAjRgAIAAAAAAB
IAEASRcBAAEA1hkAIAAAAAABIAEASRcBAAEAVBsBAAEAVBsAIAAAAAABIAEASRcAIAAAAAABIAEA
gh0AIAAAAAABIAEAShkBAAEApx0AIAAAAAABAAEA1hkAIAAAAAABIAEASRcGABUACQAoAAkArAAK
AKwACwCwAA0A9QEOAPUBDwC0ABAARAASAPUBEwC0ABUA9QEWALQAFwD1ARgAtAAaAPUBGwC0ABwA
9QEdALQAHgC0AB8A9QEgAPUBIQC0ACIAtAAlALQAJgD1AScA9QEpALQAUQBDArsAWQBDArsAYQBD
ArsAaQBDArsAcQBDArsAeQBDArsAgQBDArsAiQBDArsAkQBDArsAmQBDArsAoQBDAsAAqQBDAhsA
sQBDAhsACQBDAhsAuQCVB8UAuQCwB8wAMQBDAtEA0QBDAt0A4QBDAhsAEQBDAhsA6QBDAhsAGQBX
CPAA8QBpCPUA+QCACPoAAQGJCAEBCQCTCAUBCQGTCAkBEQGrCA4BGQHBCBQBGQHdCBQBEQHqCAUB
EQHyCBkBEQH5CEcAEQEECR4BEQEKCSUBEQEUCSsB8QAiCcAA8QBFCTEBKQGSA4IA8QBQCTcBOQFD
AhsAQQFzCbsAOQGICU4BSQGqCVQBUQGuCbsAUQFzCbsAUQHRCVsBWQGACGEBYQHsCWgBCQH1CW4B
QQEHCsAAOQEpCnMBcQGqCXkBcQGACIABiQFTCgEBiQHRCVsBmQHaCocBQwH/Co8BUQFTCgEBEQEr
CxkBwQFDArsAyQFDAhsA0QFmCwUBEQEECZUBEQGrCJ8ByQGCC6YByQGJC60BwQGUC6EA0QGkCxsA
4QFDArsA6QHCC7MB6QGkCxsA8QHYCxsAUwEIDLgBcwGqCb0BIQGTCAUBYwEUDMIBWwGACMYBAQIq
DK4A6wA2DLsAKwFtDMwBgwGmDNEBqwFzCbsAwwGqDLsA2wHYDNYBCwL/DBsA6wE9DdsBkwKACOAB
UQF2DQUBqwJ9DbsAmQHaCuYBuwKuDe8BcwLEDbMBEwLXDRsAewLsDRsA0wEXDvUBwwKACPoBCwNY
DgACQwOSDgUCYQKgDgEBcwPADgUBwwPbDgsC0wPzDgsCEQGrCBECYQIQD6EAEQGrCBcCeQJDAhsA
gQJDAhsAEQFUDx4CiQKuCbsAeQJ8DyQCkQKhDysCkQKxD7sAoQJDAhsAqQJDAhsAiQLoDzICiQLy
DxsAoQL3DzgCeQIXED8CwQKACEUCwQIyEKEAiQKkCxsAEQGrCEoCkQI3EMIBmwEHBLsAMwFdEFIC
+wOmDFcCywGTEFwCEwSACGECCwS0EGcCSwTsEG8CiwQgEXQCUwReEXkCowSSDgUC0wTADgUBmwSA
CH8C6wSSEcIBEQGgESsBGwR2DcIBKwLMEYYCywJ2DcIBYwLsEZMCQwIPEpwCewRJEqUCmwVuEqsC
OwR5EqsCUwOmDLACewNzCbsA6wOMEsAAiwPJErUCqwWmDLsCswPvEsECUwVzCbsAEQEFEwUBawUK
E7MBowMUE8AAMwInE8wCQQNDAhsAQQNTE9QCAwJdE6sCcwWACN8CWwN2DcIBkwTMEeYCwwSYE+4C
8wR2DcIBswV2DcIBiwKyE/UCCQHBE/4CGwLJEwMDEQHeEwUBUwLmEwwD6wL+E8AA+wIRFMAAMwNJ
EqUCgwUoFBsAIwMyFKsCswSSDgUCKwXbDgsCOwXzDgsCawTbDgsCCwXADgUBOQFPFBYD2wBXFLsA
EwFmFE0E+wBzFMAA0wVzCbsAaQNDArsAiQK7FFoEEQGrCGEEeQNDAvIEgQPxFPgEgQMGFf8EeQIo
FQYFmQOqCQwFAQEKE7MBGQBDAhsAoQPCCzoFqQNDAsAAsQNDArsAuQNDAhsAwQNDAhsA0QNDAscF
4QNDArsAuQNDAkoACAAYAGYACAAcAGsACAAsAGYACAAwAGsACAA0AGkKCAA4AG4KCABAAGYACABE
AGsACABIAGkKCABQAGYACABUAGsACABcAGYACABgAGsACABkAGkKCABoAPUNCABsAG4KCABwAPoN
CAB0AP8NCAB4AAQOCAB8AAkOCACAAA4OCACEABMOCACIABgOCACMAB0OCACQACIOCACUACcOCACY
ACwOCACcADEOCACgADYOCACkADsOCACoAEAOCACsAEUOCACwAEoOCAC0AE8OCAC4AFQOCAC8AFkO
CADAAF4OCADEAGMOCADIAGgOCADMAG0OCADQAHIOCADUAHcOCADYAHwOCADcAIEOCADgAIYOCADk
AIsOCADoAJAOCADsAJUOCADwAJoOCAD0AJ8OCAD4AKQOCAD8AKkOCAAAAa4OCAAEAbMOCAAIAbgO
CAAMAb0OCAAQAcIOCAAUAccOCAAYAcwOCAAcAdEOCAAgAdYOCAAkAdsOCAAoAeAOCAAsAeUOCAAw
AeoOKQCTAOMALgAjAMcQLgA7ANsQLgBDAMcQLgAbAMcQLgArAM0QLgAzAJcQLgBjAAMRLgATAJcQ
LgBbAPoQLgALAE8QQwBrAGsASQCTAOMAYQCbAGsAgwCrAGsAAQGbAGsAAwFDBmsAAwE7BnMFAwGb
AGsAIQGbAGsAIwGbAGsAIwFDBmsAIwFTBs0FIwE7Bp0FQwFDBmsAQwGbAGsAQwE7Bp0FYwFDBmsA
YwGbAGsAYwE7BlkGYwFbBoMGgwE7BqIGgwFDBmsAgwGbAGsAowFDBmsAowGbAGsAowE7BuYGowFb
BhAHwwE7BiMHwwFDBmsAwwGbAGsAwwFbBhAH4wFDBmsA4wE7BpYH4wGbAGsAAwJTBs0FAwKbAGsA
AwI7BsAHAwJDBmsAIwKbAGsAIwJDBmsAIwI7BsAHQwJDBmsAQwJbBhAHQwI7BjoIQwKbAGsAYwJD
BmsAYwKbAGsAYwI7Bm4IgwJDBmsAgwI7BpgIgwKbAGsAowJDBmsAowJbBhAHowI7BsgIowKbAGsA
wwJDBmsAwwI7Bg8JwwKbAGsA4AKbAGsA4wKbAGsA4wJDBmsA4wI7Bu8J4wJbBhAHAAObAGsAAwM7
BjsKAwNDBmsAAwObAGsAIAObAGsAIwObAGsAIwNjBnMKQAObAGsAQwNDBmsAQwNbBhAHQwM7BtgK
QwObAGsAYAMzBuMAYwNDBmsAYwObAGsAYwM7BgILgAMzBuMAgwM7BjILgwObAGsAgwNbBhAHgwND
BmsAoAMzBkQFowNDBmsAowObAGsAowM7BnQLwAMzBkQFwwNDBmsAwwM7BqMLwwObAGsA4AMzBk0F
4wM7BtQL4wNbBhAH4wNDBmsA4wObAGsAAAQzBk0FAwQ7Bv4LAwRDBmsAAwRbBhAHAwSbAGsAIwSb
AGsAIwRDBmsAIwQ7BigMQAQzBlYFQwRDBmsAQwQ7BmQMQwSbAGsAYAQzBlYFYwRjBpMMYwSbAGsA
gwSbAGsAgwRjBvgMoAQzBi0GowQ7BmINowSbAGsAowRDBmsAwAQzBjgGwwQ7BpwNwwRDBmsAwwSb
AGsAwwRbBhAH4wSbAGsA4wRDBmsA4wRbBhAH4wQ7BsYNAAUzBkEGAwWbAGsAAwVjBu8OIwVDBmsA
IwU7BkoPIwWbAGsAQAUzBpQGQwWbAGsAQwVDBmsAQwU7Bn0PYAUzBswGYwU7BqcPYwWbAGsAYwVD
BmsAgAUzBtcGgwVDBmsAgwVbBoMGgwU7BtEPgwWbAGsAowU7BvsPowVDBmsAowWbAGsAwAUzBuMA
wwU7BiUQwwWbAGsAwwVDBmsAAAYzBhoHQAYzBi0GYAYzBi0GgAYzBjgGoAYzBjgG4AYzBk0HAAcz
Bk0HIAczBlYHQAczBl8HYAczBmgHoAczBnEH4AczBnoHAAgzBnoHIAgzBpQGQAgzBi0GYAgzBjgG
oAgzBuoHwAgzBvMHAAkzBvwHQAkzBgUIgAkzBg4IwAkzBhcI4AkzBiIIIAozBisIQAozBswGgAoz
Bk0HoAozBk0HwAozBlYH4AozBlYHAAszBswGIAszBpQGQAszBpQGgAszBk0HoAszBk0HwAszBlYH
4AszBlYHIAwzBvIIYAwzBvsIgAwzBvsIwAwzBkEGAA0zBjkJQA0zBhoHYA0zBpQGgA0zBpQGwA0z
BjgG4A0zBjgGIA4zBvIIYA4zBvsIgA4zBvsIwA4zBnEH4A4zBh4KAA8zBh4KIA8zBicKQA8zBicK
gA8zBkEGoA8zBkEG4A8zBhoHIBAzBmgHQBAzBswGYBAzBpQGgBAzBpQGwBAzBk0H4BAzBk0HIBEz
BlwLQBEzBvIIgBEzBmULoBEzBmUL4BEzBicKIBIzBk0HQBIzBmgHYBIzBswGgBIzBjkJwBIzBjkJ
ABMzBk0HQBMzBjgGYBMzBjgGoBMzBvsIwBMzBpQG4BMzBpQGIBQzBjgGQBQzBjgGgBQzBlIMoBQz
BlIMwBQzBlsM4BQzBlsMIBUzBjgGQBUzBjgGgBUzBk0HoBUzBk0HwBUzBswGABYzBowNQBYzBk0H
YBYzBk0HoBYzBhoHwBYzBpQG4BYzBpQGIBczBnQPQBczBnQPVwBCBVkAQgVbAEIFXQBCBWMANgZl
ADYGZwA2BmkANgZrADYGbQDVBm8ANgZxADYGcwBCBXUAQgV3AEIFeQBCBXsAQgV9AEIFfwA2BoEA
NgaDADYGhQA2BokANgaPAEIFkQBCBZMANgaXADYGnQA2Bp8AQgWhANUGowA2BqcAQgWpANUGqwA2
BrEAQgWzANUGtQA2BrsAIAi9ADYGxQA2BscA1QbJAEIFywBCBc0ANgbPADYG0QA2BtMA1QbbADYG
3wA2BuEAQgnjADYG5wBCBekAQgXrADYG/wA2BgEBNgYDATYGBQE2BgcB1QYNATYGDwE2BhMBNgYV
ATYGGwE2Bh0B1QYfAUIJIQFCCSMBNgYnAUIFKQFCBS0BQgUvAUIFNQFCBTcBQgU5AdUGOwHVBj0B
NgY/AdUGQwE2BkcBQgVJAUIF2AA/ARwDVARnBBUFAgABAAMAAwAHAAQACAAGAAoACgAMAA0ADQAO
AA8AEAASABcAEwAYABUAGgAWABsAGAAhABwAKAAdACkAHgAuAB8ALwAhADAAIgAyACUANgAmADgA
KQA6ACoAOwAAAPYBLwAAAHUCNAAAAJkCQgAAAFIEtwAAAF8EtwAAAPIVZQUAAP0VZQUAAA0WaQUA
AOYSbQUAAJMWSgYAAK8WTwYAAL4WVAYAAPsWnQYAABMX4AYAABgXaQUAAF8EZQUAAMoXZQUAAM8X
ZQUAAOAXgwcAAPAXiAcAAAEYjQcAAB0YkgcAABMXNAgAALsZZQUAAJgJaQgAABMXwggAAGoaaQUA
AG0aaQUAAHwaaQUAAI8aBAkAAKYakgcAALEaCQkAAGoaaQUAAMoXZQUAAMMbMAoAANwbaQUAAOsb
NgoAAP8bNgoAABgcaQUAABMXLAsAAGoaaQUAAM0ckgcAANwcbgsAAOsbNgoAALEaCQkAAPIcngsA
ABMXzQsAAMoXZQUAADQdaQUAAGoaaQUAAMoXZQUAAOsbNgoAAP8bNgoAAMoXZQUAAIodXg0AABMX
lQ0AALAdkgcAAGoaaQUAAMoXZQUCAAIAAwACAAMABQABAAQABQACAAUABwACABcACQABABgACQAB
ABoACwACABkACwACABwADQABABsADQACAB4ADwABAB0ADwABAB8AEQACACAAEQACACMAEwABACIA
EwACACUAFQACACYAFwABACgAGQACACoAGwACACsAHQACACwAHwACADIAIQABADMAIQABADUAIwAC
ADQAIwACADcAJQABADgAJQACADkAJwACADoAKQACAD0AKwACAD8ALQABAEAALQACAFIALwACAFQA
MQABAFUAMQACAFYAMwABAFcAMwACAFgANQABAFoANwACAFkANwABAF0AOQACAFwAOQACAF4AOwAB
AF8AOwACAGEAPQABAGQAPwACAGMAPwACAGYAQQACAGsAQwABAGwAQwABAG8ARQACAG4ARQACAHEA
RwACAHMASQABAHQASQACAHcASwABAHgASwACAHkATQABAHoATQACAHwATwABAH0ATwACAIIAUQAB
AIQAUwACAIMAUwABAIcAVQACAIYAVQACAIoAVwACAIwAWQABAI0AWQACAI8AWwACAJEAXQACAJMA
XwACAJoAYQABAJsAYQACAJ0AYwACAJ4AZQABAJ8AZQABAKIAZwACAKEAZwACAKQAaQABAKUAaQAC
AKYAawABAKcAawABAKoAbQACAKkAbQACAKwAbwABAK0AbwACAK4AcQACALIAcwABALMAcwACALYA
dQABALcAdQACALkAdwABALoAdwAEgAAAAQAAAP0XJ00AAAAAAAAjBwAABAAAAAAAAAAAAAAAAQDl
AAAAAAAEAAAAAAAAAAAAAAABAO4AAAAAAAsAAAAAAAAAAAAAAAoAKQEAAAAACwAAAAAAAAAAAAAA
CgCSAQAAAAALAAAAAAAAAAAAAAAKAKAKAAAAAAQAAAAAAAAAAAAAAAEAGQ8AAAAAAAAAAAEAAAA8
IAAABQAEAAAAADxNb2R1bGU+AFNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNz
cHJvai5kbGwAUmVzb3VyY2VzAFNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNz
cHJvai5Qcm9wZXJ0aWVzAFNldHRpbmdzAFNjcmlwdE1haW4AU1RfNTk5MGMyYzM3NzdiNDQxZTkx
ZGFjNmMyNmFiYmQwNDQuY3Nwcm9qAFNjcmlwdFJlc3VsdHMAQ29tcG9uZW50RXZlbnRIYW5kbGVy
AEVycm9yTG9nAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9k
ZWxCYXNlAEVudW0ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlJ1bnRpbWUASURUU0NvbXBvbmVudEV2ZW50cwBTeXN0ZW0uUmVzb3VyY2VzAFJl
c291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5m
bwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBz
ZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AGZp
bGVOYW1lAE1haW4ARmxhdEZpbGVMb2FkAElEVFNDb25uZWN0aW9uTWFuYWdlckZsYXRGaWxlQ29s
dW1uMTAwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUuV3JhcHBlcgBzU19Bc3NpZ25D
b2x1bW5Qcm9wZXJ0aWVzAGZuQWRkVGFza3MAR2V0QmF0Y2hJRAB2YWx1ZV9fAFN1Y2Nlc3MARmFp
bHVyZQBIYW5kbGVFdmVudABCcmVha3BvaW50VGFyZ2V0AEZpcmVCcmVha3BvaW50SGl0AEZpcmVD
dXN0b21FdmVudABGaXJlRXJyb3IARmlyZUluZm9ybWF0aW9uAEZpcmVQcm9ncmVzcwBGaXJlUXVl
cnlDYW5jZWwARmlyZVdhcm5pbmcAZ2V0X1N1YkNvbXBvbmVudABzZXRfU3ViQ29tcG9uZW50AGdl
dF9EZXNjcmlwdGlvbgBzZXRfRGVzY3JpcHRpb24APFN1YkNvbXBvbmVudD5rX19CYWNraW5nRmll
bGQAPERlc2NyaXB0aW9uPmtfX0JhY2tpbmdGaWVsZABTdWJDb21wb25lbnQARGVzY3JpcHRpb24A
dmFsdWUAdmFyZmlsZVBhdGhzAGZsYXRGaWxlQ29sAGdldENvbE5hbWUAZ2V0RGVsaW0AU2hlZXRO
YW1lAFRhcmdldFRibABTcmNDb25uAHR5cGUAc3ViQ29tcG9uZW50AGRlc2NyaXB0aW9uAGJyZWFr
cG9pbnRUYXJnZXQAZXZlbnROYW1lAGV2ZW50VGV4dABhcmd1bWVudHMAZmlyZUFnYWluAGVycm9y
Q29kZQBoZWxwRmlsZQBoZWxwQ29udGV4dABpbmZvcm1hdGlvbkNvZGUAcHJvZ3Jlc3NEZXNjcmlw
dGlvbgBwZXJjZW50Q29tcGxldGUAcHJvZ3Jlc3NDb3VudExvdwBwcm9ncmVzc0NvdW50SGlnaAB3
YXJuaW5nQ29kZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJp
YnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVz
Y3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5
Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmln
aHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0
cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNl
cnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxp
dHlBdHRyaWJ1dGUAU1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9qAFN5
c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGlt
ZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3Rl
bS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxl
U3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50
cnlQb2ludEF0dHJpYnV0ZQBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAFZhcmlhYmxlcwBnZXRf
VmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBDb252ZXJ0AFN0
cmluZwBDb25jYXQAU3lzdGVtLklPAFBhdGgAR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uAEdl
dEV4dGVuc2lvbgBUb1VwcGVyAEVxdWFscwBFbXB0eQBDaGFyAFNwbGl0AFN1YnN0cmluZwBvcF9J
bmVxdWFsaXR5AHNldF9UYXNrUmVzdWx0AEV2ZW50c09iamVjdFdyYXBwZXIAZ2V0X0V2ZW50cwBM
b2cARXhjZXB0aW9uAFBhY2thZ2UARHRzQ29udGFpbmVyAHNldF9OYW1lAENvbm5lY3Rpb25zAGdl
dF9Db25uZWN0aW9ucwBDb25uZWN0aW9uTWFuYWdlcgBBZGQAc2V0X0Nvbm5lY3Rpb25TdHJpbmcA
RHRzUHJvcGVydGllcwBnZXRfUHJvcGVydGllcwBEdHNQcm9wZXJ0eQBTZXRWYWx1ZQBUb0Jvb2xl
YW4AQm9vbGVhbgBzZXRfTWF4aW11bUVycm9yQ291bnQARXhlY3V0YWJsZXMAZ2V0X0V4ZWN1dGFi
bGVzAEV4ZWN1dGFibGUASW50MzIAVGFza0hvc3QAZ2V0X0lubmVyT2JqZWN0AE1haW5QaXBlAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIARHRzQ29udmVydABNaWNyb3Nv
ZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAElEVFNDb21wb25lbnRFdmVudHMxMDAAR2V0RXh0
ZW5kZWRJbnRlcmZhY2UASURUU1BpcGVsaW5lMTAwAHNldF9FdmVudHMASURUU0Nvbm5lY3Rpb25N
YW5hZ2VyRmxhdEZpbGUxMDAAQ29udGFpbnMAU3RyZWFtUmVhZGVyAFN5c3RlbS5UZXh0AFN0cmlu
Z0J1aWxkZXIAVGV4dFJlYWRlcgBSZWFkTGluZQBTdHJpbmdTcGxpdE9wdGlvbnMAQXBwZW5kAEFw
cGVuZExpbmUAZ2V0X0VuZE9mU3RyZWFtAENsb3NlAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAFdy
aXRlTGluZQBJRGlzcG9zYWJsZQBEaXNwb3NlAElEVFNDb25uZWN0aW9uTWFuYWdlckZsYXRGaWxl
Q29sdW1uczEwMABnZXRfQ29sdW1ucwBnZXRfQ291bnQARW52aXJvbm1lbnQAZ2V0X05ld0xpbmUA
c2V0X0NvbHVtbkRlbGltaXRlcgBJRFRTQ29tcG9uZW50TWV0YURhdGFDb2xsZWN0aW9uMTAwAGdl
dF9Db21wb25lbnRNZXRhRGF0YUNvbGxlY3Rpb24ASURUU0NvbXBvbmVudE1ldGFEYXRhMTAwAE5l
dwBzZXRfQ29tcG9uZW50Q2xhc3NJRABDTWFuYWdlZENvbXBvbmVudFdyYXBwZXIASW5zdGFudGlh
dGUASURUU0Rlc2lnbnRpbWVDb21wb25lbnQxMDAAUHJvdmlkZUNvbXBvbmVudFByb3BlcnRpZXMA
SURUU1J1bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbjEwMABnZXRfUnVudGltZUNvbm5lY3Rpb25D
b2xsZWN0aW9uAElEVFNSdW50aW1lQ29ubmVjdGlvbjEwMABnZXRfSUQAc2V0X0Nvbm5lY3Rpb25N
YW5hZ2VySUQASURUU0Nvbm5lY3Rpb25NYW5hZ2VyMTAwAHNldF9Db25uZWN0aW9uTWFuYWdlcgBB
Y3F1aXJlQ29ubmVjdGlvbnMAUmVpbml0aWFsaXplTWV0YURhdGEAUmVsZWFzZUNvbm5lY3Rpb25z
AElEVFNPdXRwdXRDb2xsZWN0aW9uMTAwAGdldF9PdXRwdXRDb2xsZWN0aW9uAElEVFNPdXRwdXQx
MDAASURUU091dHB1dENvbHVtbkNvbGxlY3Rpb24xMDAAZ2V0X091dHB1dENvbHVtbkNvbGxlY3Rp
b24AU3lzdGVtLkNvbGxlY3Rpb25zAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IAZ2V0X0N1cnJl
bnQASURUU091dHB1dENvbHVtbjEwMABnZXRfTmFtZQBEVFNSb3dEaXNwb3NpdGlvbgBzZXRfRXJy
b3JSb3dEaXNwb3NpdGlvbgBzZXRfVHJ1bmNhdGlvblJvd0Rpc3Bvc2l0aW9uAE1vdmVOZXh0AFN5
c3RlbS5EYXRhAFN5c3RlbS5EYXRhLlNxbENsaWVudABTcWxDb21tYW5kAFNxbENvbm5lY3Rpb24A
UmVwbGFjZQBTeXN0ZW0uRGF0YS5Db21tb24ARGJDb25uZWN0aW9uAHNldF9Db25uZWN0aW9uAERi
Q29tbWFuZABDb21tYW5kVHlwZQBzZXRfQ29tbWFuZFR5cGUAc2V0X0NvbW1hbmRUZXh0AFNxbERh
dGFBZGFwdGVyAERhdGFTZXQAQ29ubmVjdGlvblN0YXRlAGdldF9TdGF0ZQBPcGVuAHNldF9TZWxl
Y3RDb21tYW5kAFNxbERhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgBEYkRhdGFSZWFkZXIAUmVhZABF
eGVjdXRlTm9uUXVlcnkASURUU1BhdGhDb2xsZWN0aW9uMTAwAGdldF9QYXRoQ29sbGVjdGlvbgBJ
RFRTUGF0aDEwMABJRFRTSW5wdXRDb2xsZWN0aW9uMTAwAGdldF9JbnB1dENvbGxlY3Rpb24ASURU
U0lucHV0MTAwAEF0dGFjaFBhdGhBbmRQcm9wYWdhdGVOb3RpZmljYXRpb25zAElEVFNWaXJ0dWFs
SW5wdXQxMDAAR2V0VmlydHVhbElucHV0AElEVFNWaXJ0dWFsSW5wdXRDb2x1bW5Db2xsZWN0aW9u
MTAwAGdldF9WaXJ0dWFsSW5wdXRDb2x1bW5Db2xsZWN0aW9uAElEVFNJbnB1dENvbHVtbkNvbGxl
Y3Rpb24xMDAAZ2V0X0lucHV0Q29sdW1uQ29sbGVjdGlvbgBJRFRTVmlydHVhbElucHV0Q29sdW1u
MTAwAGdldF9MaW5lYWdlSUQAb3BfRXF1YWxpdHkASURUU0lucHV0Q29sdW1uMTAwAERUU1VzYWdl
VHlwZQBTZXRVc2FnZVR5cGUARFRTSW5zZXJ0UGxhY2VtZW50AEluc2VydE91dHB1dABJRFRTQ3Vz
dG9tUHJvcGVydHkxMDAAU2V0T3V0cHV0UHJvcGVydHkASURUU0V4dGVybmFsTWV0YWRhdGFDb2x1
bW5Db2xsZWN0aW9uMTAwAGdldF9FeHRlcm5hbE1ldGFkYXRhQ29sdW1uQ29sbGVjdGlvbgBzZXRf
SXNVc2VkAHNldF9IYXNTaWRlRWZmZWN0cwBzZXRfRXh0ZXJuYWxNZXRhZGF0YUNvbHVtbklEAElE
VFNDdXN0b21Qcm9wZXJ0eUNvbGxlY3Rpb24xMDAAZ2V0X0N1c3RvbVByb3BlcnR5Q29sbGVjdGlv
bgBEYXRhVHlwZQBTZXREYXRhVHlwZVByb3BlcnRpZXMAVHJpbQBzZXRfVmFsdWUAc2V0X01hcHBl
ZENvbHVtbklEAFNldENvbXBvbmVudFByb3BlcnR5AEFwcGxpY2F0aW9uAElEVFNFdmVudHMAU2F2
ZVRvWG1sAHNldF9WYWxpZGF0ZUV4dGVybmFsTWV0YWRhdGEASURUU0V4dGVybmFsTWV0YWRhdGFD
b2x1bW4xMDAAR2V0SW5wdXRDb2x1bW5CeUxpbmVhZ2VJRABNYXBJbnB1dENvbHVtbgBUb0ludDMy
AEluc2VydE91dHB1dENvbHVtbkF0AFRvTG93ZXIAU2V0T3V0cHV0Q29sdW1uUHJvcGVydHkAc2V0
X0V4Y2x1c2lvbkdyb3VwAHNldF9TeW5jaHJvbm91c0lucHV0SUQAUmVtb3ZlQWxsAHNldF9Jc0Vy
cm9yT3V0AERUU0V4ZWNSZXN1bHQARXhlY3V0ZQBzZXRfQ29sdW1uVHlwZQBzZXRfRGF0YVR5cGUA
c2V0X0NvbHVtbldpZHRoAElEVFNOYW1lMTAwAFN5c3RlbS5EYXRhLk9sZURiAE9sZURiQ29ubmVj
dGlvbgBEYXRhVGFibGUAR2V0U2NoZW1hAFNxbFBhcmFtZXRlcgBEYlBhcmFtZXRlcgBQYXJhbWV0
ZXJEaXJlY3Rpb24Ac2V0X0RpcmVjdGlvbgBEYlR5cGUAc2V0X0RiVHlwZQBTcWxQYXJhbWV0ZXJD
b2xsZWN0aW9uAGdldF9QYXJhbWV0ZXJzAENvbnNvbGUAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNl
cnZpY2VzAERpc3BJZEF0dHJpYnV0ZQBwYnN0ckNvbHVtblR5cGUAZ2V0X0NvbHVtblR5cGUAcGJz
dHJDb2x1bW5EZWxpbWl0ZXIAZ2V0X0NvbHVtbkRlbGltaXRlcgBwbFdpZHRoAGdldF9Db2x1bW5X
aWR0aABfVnRibEdhcDFfMgBwZURhdGFUeXBlAGdldF9EYXRhVHlwZQBDb2x1bW5UeXBlAENvbHVt
bkRlbGltaXRlcgBDb2x1bW5XaWR0aABHdWlkQXR0cmlidXRlAFR5cGVJZGVudGlmaWVyQXR0cmli
dXRlAENvbUltcG9ydEF0dHJpYnV0ZQBJRFRTT2JqZWN0TW9kZWwxMDAAQ29DbGFzc0F0dHJpYnV0
ZQBfVnRibEdhcDFfMQBfVnRibEdhcDJfMTQAQV8xAENvbXBvbmVudE1ldGFEYXRhQ29sbGVjdGlv
bgBQYXRoQ29sbGVjdGlvbgBFdmVudHMASURUU0luZm9FdmVudHMxMDAARGVmYXVsdE1lbWJlckF0
dHJpYnV0ZQBfVnRibEdhcDFfMjAAQ29sdW1ucwBJRW51bWVyYWJsZQBLZXkASXRlbQBDb3VudABf
VnRibEdhcDFfMwBJRFRTT2JqZWN0MTAwAHBic3RyRGVzY3JpcHRpb24AcGJzdHJOYW1lAF9WdGJs
R2FwMl8yAGdldF9Db21wb25lbnRDbGFzc0lEAGJzdHJDb21wb25lbnRDbGFzc0lEAF9WdGJsR2Fw
M18yAF9WdGJsR2FwNF8xMQBnZXRfVmFsaWRhdGVFeHRlcm5hbE1ldGFkYXRhAHBiVmFsaWRhdGUA
TmFtZQBDb21wb25lbnRDbGFzc0lEAElucHV0Q29sbGVjdGlvbgBPdXRwdXRDb2xsZWN0aW9uAFJ1
bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbgBWYWxpZGF0ZUV4dGVybmFsTWV0YWRhdGEAbE91dHB1
dElEAGxPdXRwdXRDb2x1bW5JbmRleABic3RyTmFtZQBic3RyRGVzY3JpcHRpb24AbElucHV0SUQA
cElEVFNWaXJ0dWFsSW5wdXRPYmplY3QAbExpbmVhZ2VJRABlVXNhZ2VUeXBlAFByb3BlcnR5TmFt
ZQB2VmFsdWUAX1Z0YmxHYXAyXzEAX1Z0YmxHYXAzXzEAbE91dHB1dENvbHVtbklEAF9WdGJsR2Fw
NF8xAGVJbnNlcnRQbGFjZW1lbnQAX1Z0YmxHYXA1XzYAcFRyYW5zYWN0aW9uAF9WdGJsR2FwNl8x
AGxJbnB1dENvbHVtbklEAGxFeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQASW5kZXgAX1Z0YmxHYXAx
XzgAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2VySUQAcGJzdHJDb25uZWN0aW9uTWFuYWdlcklEAGdldF9D
b25uZWN0aW9uTWFuYWdlcgBwcElEVFNDb25uZWN0aW9uTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdl
cklEAHNldF9JRABwSUQAX1Z0YmxHYXAxXzYAZ2V0X0V4Y2x1c2lvbkdyb3VwAHBsRXhjbHVzaW9u
R3JvdXAAZ2V0X1N5bmNocm9ub3VzSW5wdXRJRABwbFN5bmNocm9ub3VzSW5wdXRJRABfVnRibEdh
cDJfNABnZXRfSXNFcnJvck91dABwYklzRXJyb3JPdXQAX1Z0YmxHYXA0XzkASUQARXhjbHVzaW9u
R3JvdXAAU3luY2hyb25vdXNJbnB1dElEAE91dHB1dENvbHVtbkNvbGxlY3Rpb24ASXNFcnJvck91
dABFeHRlcm5hbE1ldGFkYXRhQ29sdW1uQ29sbGVjdGlvbgBfVnRibEdhcDJfNgBnZXRfTWFwcGVk
Q29sdW1uSUQAcGxNYXBwZWRDb2x1bW5JRABfVnRibEdhcDRfNwBlRGF0YVR5cGUAbExlbmd0aABs
UHJlY2lzaW9uAGxTY2FsZQBsQ29kZVBhZ2UAZ2V0X0Vycm9yUm93RGlzcG9zaXRpb24AcGVEaXNw
b3NpdGlvbgBnZXRfVHJ1bmNhdGlvblJvd0Rpc3Bvc2l0aW9uAF9WdGJsR2FwNV8yAGdldF9FeHRl
cm5hbE1ldGFkYXRhQ29sdW1uSUQAcGxFeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQAQ3VzdG9tUHJv
cGVydHlDb2xsZWN0aW9uAE1hcHBlZENvbHVtbklEAEVycm9yUm93RGlzcG9zaXRpb24AVHJ1bmNh
dGlvblJvd0Rpc3Bvc2l0aW9uAEV4dGVybmFsTWV0YWRhdGFDb2x1bW5JRABSRF9Ob3RVc2VkAFJE
X0lnbm9yZUZhaWx1cmUAUkRfUmVkaXJlY3RSb3cAUkRfRmFpbENvbXBvbmVudABfVnRibEdhcDFf
MTIAcElEVFNPdXRwdXQAcElEVFNJbnB1dABnZXRfSGFzU2lkZUVmZmVjdHMAcGJIYXNTaWRlRWZm
ZWN0cwBfVnRibEdhcDNfNQBfVnRibEdhcDRfNABIYXNTaWRlRWZmZWN0cwBJbnB1dENvbHVtbkNv
bGxlY3Rpb24AVmlydHVhbElucHV0Q29sdW1uQ29sbGVjdGlvbgBfVnRibEdhcDJfMTEAX1Z0YmxH
YXAxXzQAX1Z0YmxHYXAyXzcATGluZWFnZUlEAF9WdGJsR2FwMl8xOABVVF9SRUFET05MWQBVVF9S
RUFEV1JJVEUAVVRfSUdOT1JFRABJUF9CRUZPUkUASVBfQUZURVIAcHZWYWx1ZQBWYWx1ZQBfVnRi
bEdhcDJfNQBnZXRfSXNVc2VkAHBiSXNVc2VkAElzVXNlZABEVF9FTVBUWQBEVF9OVUxMAERUX0ky
AERUX0k0AERUX1I0AERUX1I4AERUX0NZAERUX0RBVEUARFRfQk9PTABEVF9ERUNJTUFMAERUX0kx
AERUX1VJMQBEVF9VSTIARFRfVUk0AERUX0k4AERUX1VJOABEVF9GSUxFVElNRQBEVF9HVUlEAERU
X0JZVEVTAERUX1NUUgBEVF9XU1RSAERUX05VTUVSSUMARFRfREJEQVRFAERUX0RCVElNRQBEVF9E
QlRJTUVTVEFNUABEVF9EQlRJTUUyAERUX0RCVElNRVNUQU1QT0ZGU0VUAERUX0lNQUdFAERUX1RF
WFQARFRfTlRFWFQARFRfREJUSU1FU1RBTVAyAERUX0JZUkVGX0kyAERUX0JZUkVGX0k0AERUX0JZ
UkVGX1I0AERUX0JZUkVGX1I4AERUX0JZUkVGX0NZAERUX0JZUkVGX0RBVEUARFRfQllSRUZfQk9P
TABEVF9CWVJFRl9ERUNJTUFMAERUX0JZUkVGX0kxAERUX0JZUkVGX1VJMQBEVF9CWVJFRl9VSTIA
RFRfQllSRUZfVUk0AERUX0JZUkVGX0k4AERUX0JZUkVGX1VJOABEVF9CWVJFRl9GSUxFVElNRQBE
VF9CWVJFRl9HVUlEAERUX0JZUkVGX05VTUVSSUMARFRfQllSRUZfREJEQVRFAERUX0JZUkVGX0RC
VElNRQBEVF9CWVJFRl9EQlRJTUVTVEFNUABEVF9CWVJFRl9EQlRJTUUyAERUX0JZUkVGX0RCVElN
RVNUQU1QT0ZGU0VUAERUX0JZUkVGX0RCVElNRVNUQU1QMgBJRFRTRXhlY3V0YWJsZTEwMABTVF8w
Y2VmMjlhOTM5M2Y0ZTRjOGRkYTAyM2Q5MTA1MjZlNS5jc3Byb2ouUHJvcGVydGllcy5SZXNvdXJj
ZXMucmVzb3VyY2VzAAAAAH9TAFQAXwAwAGMAZQBmADIAOQBhADkAMwA5ADMAZgA0AGUANABjADgA
ZABkAGEAMAAyADMAZAA5ADEAMAA1ADIANgBlADUALgBjAHMAcAByAG8AagAuAFAAcgBvAHAAZQBy
AHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAE0UAeABjAGUAbABGAGkAbABlAAAjRQB4AGMA
ZQBsAEYAaQBsAGUATABvAGMAYQB0AGkAbwBuAAAJLgBUAFgAVAAACS4AQwBTAFYAABdFAHgAYwBl
AGwAUwBoAGUAZQB0AHMAAAMkAAARRgBMAEEAVABGAEkATABFAAARRgBsAGEAdABGAGkAbABlAAAN
RgBvAHIAbQBhAHQAABNEAGUAbABpAG0AaQB0AGUAZAAAM0MAbwBsAHUAbQBuAE4AYQBtAGUAcwBJ
AG4ARgBpAHIAcwB0AEQAYQB0AGEAUgBvAHcAACVTAFQATwBDAEsAOgBQAGkAcABlAGwAaQBuAGUA
VABhAHMAawAALUQAeQBuAGEAbQBpAGMAIABEAGEAdABhACAARgBsAG8AdwAgAFQAYQBzAGsAAClE
AGUAZgBhAHUAbAB0AEIAdQBmAGYAZQByAE0AYQB4AFIAbwB3AHMAAA8xADAAMAAwADAAMAAwAAAJ
LgBjAHMAdgAAEUUAcgByAG8AcgBSAG8AdwAAC0UAcgByAG8AcgAAD0MAbwByAHIAZQBjAHQAAB1G
AGwAYQB0AEYAaQBsAGUAUwBvAHUAcgBjAGUAADNEAFQAUwBBAGQAYQBwAHQAZQByAC4ARgBsAGEA
dABGAGkAbABlAFMAbwB1AHIAYwBlAAAFKwAiAAAFIgArAACAqVMARQBMAEUAQwBUACAAQwBBAFMA
RQAgAFcASABFAE4AIABFAFgASQBTAFQAUwAoAFMARQBMAEUAQwBUACAAMQAgAEYAUgBPAE0AIABp
AG4AZgBvAHIAbQBhAHQAaQBvAG4AXwBzAGMAaABlAG0AYQAuAHQAYQBiAGwAZQBzACAAdwBoAGUA
cgBlACAAdABhAGIAbABlAF8AbgBhAG0AZQAgAD0AIAAnAAFBJwApACAAVABIAEUATgAgADEAIABF
AEwAUwBFACAAMAAgAEUATgBEACAAVABhAGIAbABlAEUAeABpAHMAdABzAAEXQwBvAG4AbgBfAFMA
dAByAGkAbgBnAAApUAByAG8AdgBpAGQAZQByAD0AUwBRAEwATwBMAEUARABCAC4AMQA7AAABACtQ
AHIAbwB2AGkAZABlAHIAPQBTAFEATABOAEMATABJADEAMAAuADEAOwAAK1AAcgBvAHYAaQBkAGUA
cgA9AFMAUQBMAE4AQwBMAEkAMQAxAC4AMQA7AAAXVABhAGIAbABlAEUAeABpAHMAdABzAAAbQwBS
AEUAQQBUAEUAIABUAEEAQgBMAEUAIAAABSAAKAAADVIATwBXAF8ASQBEAAARQgBBAFQAQwBIAF8A
SQBEAAAdWgBaAF8AUwBUAEEAVABVAFMAXwBDAE8ARABFAAAhIABuAHYAYQByAGMAaABhAHIAKAAy
ADUANQApACwAWwAAA10AAANbAACApSAAbgB2AGEAcgBjAGgAYQByACgAMgA1ADUAKQAsAEIAYQB0
AGMAaABfAEkARAAgAGkAbgB0ACwAIABaAFoAXwBTAFQAQQBUAFUAUwBfAEMATwBEAEUAIABuAHYA
YQByAGMAaABhAHIAKAAxACkALAAgAFIATwBXAF8ASQBEACAAaQBuAHQAIABpAGQAZQBuAHQAaQB0
AHkAKAAxACwAMQApACkAADtEAFQAUwBUAHIAYQBuAHMAZgBvAHIAbQAuAEMAbwBuAGQAaQB0AGkA
bwBuAGEAbABTAHAAbABpAHQAABtGAGkAbAB0AGUAcgBfAFIAbwB1AHQAZQByAABvRQB2AGEAbAB1
AGEAdABlAHMAIABhAG4AZAAgAGQAaQByAGUAYwB0AHMAIAByAG8AdwBzACAAaQBuACAAYQAgAGQA
YQB0AGEAcwBlAHQAIABiAGEAcwBlAGQAIABhACAAYwBvAGwAdQBtAG4ALgAAEUUAUgBSAE8AUgBS
AE8AVwAAH0UAdgBhAGwAdQBhAHQAaQBvAG4ATwByAGQAZQByAAAlRgByAGkAZQBuAGQAbAB5AEUA
eABwAHIAZQBzAHMAaQBvAG4AAC9bAEUAcgByAG8AcgBSAG8AdwBdACAAPQA9ACAAIgBDAG8AcgBy
AGUAYwB0ACIAADVEAFQAUwBUAHIAYQBuAHMAZgBvAHIAbQAuAEQAZQByAGkAdgBlAGQAQwBvAGwA
dQBtAG4AAD9EAGUAcgBpAHYAZQBkAEMAbwBsAFQAcgBhAG4AcwBmAG8AcgBtAF8ARQByAHIAbwBy
AE8AdQB0AHAAdQB0AAAbRQByAHIAbwByAFIAbwB3AFYAYQBsAHUAZQAAFUUAeABwAHIAZQBzAHMA
aQBvAG4AABFGAGkAbABlAE4AYQBtAGUAAAMiAAA3RABUAFMAQQBkAGEAcAB0AGUAcgAuAE8AbABl
AEQAYgBEAGUAcwB0AGkAbgBhAHQAaQBvAG4AADFPAEwARQBEAEIARABlAHMAdABpAG4AYQB0AGkA
bwBuAF8AQwBTAEUAcgByAG8AcgAAC08ATABFAEQAQgAAJU0AZQB0AGEARABhAHQAYQBDAG8AbgBu
AFMAdAByAGkAbgBnAAAnTwBMAEUARABCAF8ARQByAHIAbwByAEgAYQBuAGQAbABpAG4AZwAAFU8A
cABlAG4AUgBvAHcAcwBlAHQAABlFAHIAcgBvAHIAXwBPAHUAdABwAHUAdAAAFUEAYwBjAGUAcwBz
AE0AbwBkAGUAAB9GAGEAcwB0AEwAbwBhAGQATwBwAHQAaQBvAG4AcwAAM1QAQQBCAEwATwBDAEsA
LABDAEgARQBDAEsAXwBDAE8ATgBTAFQAUgBBAEkATgBUAFMAADVHAGUAbgBlAHIAYQB0AGUAZABf
AFMAUwBJAFMAXwBQAGsAZwBMAG8AYwBhAHQAaQBvAG4AACNFAHIAcgBvAHIAUABhAGMAawBhAGcA
ZQAuAGQAdABzAHgAADFEAFQAUwBUAHIAYQBuAHMAZgBvAHIAbQAuAEQAYQB0AGEAQwBvAG4AdgBl
AHIAdAAAF0QAYQB0AGEAQwBvAG4AdgBlAHIAdAAAM0QAYQB0AGEAIABDAG8AbgB2AGUAcgBzAGkA
bwBuACAAQwBvAG0AcABvAG4AZQBuAHQAAIHRUwBlAGwAZQBjAHQAIABDAE8ATABVAE0ATgBfAE4A
QQBNAEUALABEAEEAVABBAF8AVABZAFAARQAsAEkAcwBuAHUAbABsACgAQwBIAEEAUgBBAEMAVABF
AFIAXwBNAEEAWABJAE0AVQBNAF8ATABFAE4ARwBUAEgALAAwACkAIABBAHMAIABDAEgAQQBSAEEA
QwBUAEUAUgBfAE0AQQBYAEkATQBVAE0AXwBMAEUATgBHAFQASAAsAEkAcwBuAHUAbABsACgATgBV
AE0ARQBSAEkAQwBfAFAAUgBFAEMASQBTAEkATwBOACwAMAApACAAQQBzACAATgBVAE0ARQBSAEkA
QwBfAFAAUgBFAEMASQBTAEkATwBOACwASQBzAG4AdQBsAGwAKABOAFUATQBFAFIASQBDAF8AUwBD
AEEATABFACwAMAApACAAQQBzACAATgBVAE0ARQBSAEkAQwBfAFMAQwBBAEwARQAgAGYAcgBvAG0A
IABJAG4AZgBvAHIAbQBhAHQAaQBvAG4AXwBTAGMAaABlAG0AYQAuAEMATwBMAFUATQBOAFMAIAB3
AGgAZQByAGUAIABUAEEAQgBMAEUAXwBOAEEATQBFAD0AJwABAycAARdDAE8ATABVAE0ATgBfAE4A
QQBNAEUAABNEAEEAVABBAF8AVABZAFAARQAAMUMASABBAFIAQQBDAFQARQBSAF8ATQBBAFgASQBN
AFUATQBfAEwARQBOAEcAVABIAAAjTgBVAE0ARQBSAEkAQwBfAFAAUgBFAEMASQBTAEkATwBOAAAb
TgBVAE0ARQBSAEkAQwBfAFMAQwBBAEwARQAAD3YAYQByAGMAaABhAHIAAAljAGgAYQByAAARbgB2
AGEAcgBjAGgAYQByAAAPbgB1AG0AZQByAGkAYwAAD2QAZQBjAGkAbQBhAGwAAAtmAGwAbwBhAHQA
ABFkAGEAdABlAHQAaQBtAGUAAAlkAGEAdABlAAAPaQBuAHQAZQBnAGUAcgAAB2kAbgB0AAA1UwBv
AHUAcgBjAGUASQBuAHAAdQB0AEMAbwBsAHUAbQBuAEwAaQBuAGUAYQBnAGUASQBEAAA9TwBMAEUA
RABCAEQAZQBzAHQAaQBuAGEAdABpAG8AbgBfAEQAYQB0AGEAQwBvAG4AdgBFAHIAcgBvAHIAACFP
AEwARQBEAEIARABlAHMAdABpAG4AYQB0AGkAbwBuAAA3TwBMAEUARABCAEQAZQBzAHQAaQBuAGEA
dABpAG8AbgBfAEYAaQBuAGEAbABFAHIAcgBvAHIAAAsuAGQAdABzAHgAAANfAAALRQB4AGMAZQBs
AABdUAByAG8AdgBpAGQAZQByAD0ATQBpAGMAcgBvAHMAbwBmAHQALgBBAEMARQAuAE8ATABFAEQA
QgAuADEAMgAuADAAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAAXTsARQB4AHQAZQBuAGQAZQBk
ACAAUAByAG8AcABlAHIAdABpAGUAcwAgAD0AIgBFAHgAYwBlAGwAIAAxADIALgAwACAAWABtAGwA
OwBIAEQAUgA9AFkARQBTACIAAA1UAGEAYgBsAGUAcwAADUUAeABjAGUAbAAgAAAtRABUAFMAQQBk
AGEAcAB0AGUAcgAuAEUAWABDAEUATABTAG8AdQByAGMAZQAAN1MAbwB1AHIAYwBlACAAZABhAHQA
YQAgAGkAbgAgAHQAaABlACAARABhAHQAYQBGAGwAbwB3AAAjTwBsAGUARABiACAARABlAHMAdABp
AG4AYQB0AGkAbwBuAABDWwBkAGIAbwBdAC4AWwBDAE8ATQBNAE8ATgBfAFUAUABEAEEAVABFAF8A
QgBBAFQAQwBIAF8ASQBEAF8AUwBQAF0AABNDAGwAaQBlAG4AdABfAEkARAAAFUAAQwBsAGkAZQBu
AHQAXwBJAEQAABVQAHIAbwBqAGUAYwB0AF8ASQBEAAAXQABQAHIAbwBqAGUAYwB0AF8ASQBEAAAT
QwBvAG4AZgBpAGcAXwBJAEQAABVAAEMAbwBuAGYAaQBnAF8ASQBEAAAXQABUAGEAYgBsAGUAXwBO
AGEAbQBlAAAZQABTAHQAYQB0AHUAcwBfAGMAbwBkAGUAABFAAE0AZQBzAHMAYQBnAGUAABNAAEIA
YQB0AGMAaABfAEkARAAAEUIAYQB0AGMAaABfAEkARAAAHVsAewAwAH0AXQAgAHsAMQB9ADoAIAB7
ADIAfQAAF0kAbgBmAG8AcgBtAGEAdABpAG8AbgAAD1cAYQByAG4AaQBuAGcAADdQs0ULW8tAsUBz
Z7zH7vEACLd6XFYZNOCJCImEXc2AgMyRAwYSGQMGEh0DIAABBAAAEhkEAAASHQUAAQESHQQIABIZ
BAgAEh0DBhIMBAAAEgwECAASDAIGDgUgAgEODgcAAwESIA4OBiADAQ4ODgIGCAMGERQEAAAAAAQB
AAAABSABARIlCyAFAQ4OEB0cDhACCCAFAggODg4ICiAGAQgODg4IEAIKIAYBDggICA4QAgMgAAII
IAUBCA4ODggDAAAOBAABAQ4DCAAOBCABAQ4EIAEBCAYAARJdEWEEIAASZQYgAgEOEmUEBwESGQUg
AQERbQgBAAIAAAAAAAMAAAEEIAASeQQgABJ9BiABEoCBHAMgABwDIAAOBAABDhwFAAIODg4EAAEO
DgQgAQIOBiABHQ4dAwUgAg4ICAUAAgIODgUgABKAlQcgAwEOCB0FDgcJDg4ODh0ODh0DHQ4IBSAA
EoClBiABEoCpDgUgABKArQYgARKAsRwFIAIBHBwEAAECAgUgABKAuQYgARKAvQ4GIAESgL0cBwAB
EoDREhUFIAEBEiwJIAIdDh0DEYDtBgADDhwcHAYgARKA5Q4FIAASgOUEIAEBHAQgABI0BCAAEiAD
IAAIBSABEiAcBCAAEjgEIAASPAQgABJABCAAEkgFIAESTBwIAAESgR0SgKkFIAEBElAEIAASVAUg
ARJYHAQgABJcBSAAEoExBSABARFkBQABDh0cBgADDg4ODgUgAg4ODgYgAQESgUEGIAEBEYFNBSAA
EYFZBiABARKBPQUgABKBXQQgARwOBwAEDg4ODg4EIAASaAQgABJsBCAAEnAFIAESdBwHIAIBElgS
dAQgABJ4BCAAEnwFIAASgIAGIAESgIQcDCAEEoCICBJ4CBGAjAggAhJYEYCQCAggAxKAlAgOHAUg
ABKAmAQgAQECBCAAEmAFIAASgJwFIAASgJQKIAUBEYCgCAgICAcgAhKAlA4cCiADAQ4SgJ0SgaUG
IAESgKQcByACCAgRgIwGIAESgIgICCADEoCkCAgIBAABCBwIIAQSYAgIDg4JIAQSgJQICA4cBSAA
EYGtgS8HgIwSgJ0OEoCpEoDFEiQSGBIwDh0DAxKA4RKA5QgICBKAmRKA8RKA4R0OCBIgEoCZEjwS
QBJcDggSYA4IDg4SgT0SgUESgVESgV0SXAgSYBI8EkASdBJ4EnwSWAgOEoCEElgSPBJAEnQSeBJ8
EoCEEmASgJQSYBKAlBI8EkASgKkSgKkSdBJ4EoCAEoCYElwSYBKApBKAiBI8EkASgT0SgUESgVES
gV0IDg4ICAgSeBJYCBJgElgSYBKAlBJYEnQSXBJgEjwSQBJ0EngSgIASgJgSXBJgEoCkEoCIEjwS
QBJ0EngSdBJ4EoCAEoCYElwSgIgSYBKApBKAiBJcEmASYBKAlBJYEnQSXBJgEjwSQBJ0EngSgIAS
gJgSXBJgEoCkEoCIDh0DEoExHRwSgPkGIAEBEYCgBQcBEoCoBiABEoG5DgUAAQ4dDoCJBz4SgJ0S
gaESgL0SgMUSJBIYEoCpDhKAqQ4SgbUOEjwSRAgODhKBPRKBQRKBURKBXRJcCBJgEjwSQBKBPRKB
QRKBURKBXQgODggICBJ4ElgIEmASPBJEEmwSdBJ4EoCAEoCYElwSgIgSYBKApBKAiBJcEmAOEoEx
EoD5EoExEoD5EoExEoD5HQ4FIAIBDhwGIAEBEYHFBiABARGByQUgABKBzQggARKBvRKBvSQHDBKB
PRKBQRKBvRKBvRKBvRKBvRKBvRKBvRKBvRKBURKBXQgHAAQBDhwcHAETCAEAAwAAAAAACAEABAAA
AAAACAEABgAAAAAABSAAEYCgAygADgMoAAgFKAARgKApAQAkOEEyQTM3QkEtOTFEQS00QUFDLTlG
MTktNzNGQUE2Qzk3OThBAAApAQAkNDEwRTkxRTktMkM0NS00ODdBLTg1MUEtNUIzREZFNzQ3MzI5
AAAFIAEBEl1fAQBaU3lzdGVtLk9iamVjdCwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3Vs
dHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5AAAIAQAMAAAAAAAB
HAgBAA0AAAAAAAgBAHYAAAAAAAQoABI4BCgAEmgEKAASLCkBACRFMjUyNEZFOC1BMTM2LTQ0NTct
QTJCRC0xNEEzOUNFQTZFRkEAABABAAtGaXJlV2FybmluZwAACAEACwAAAAAABCgAEjQpAQAkMjAw
RUM5MzMtMTdCQS00NzlBLUE4NUItNzExQTU2RTJDMDU0AAAIAQAAAAAAAAABGwgBAAEAAAAAAAUo
ARIgHCkBACQ4Q0EyMUEwRC03QkRELTREQUQtQTQzMS0wMTlBMDMxQTk0NTUAAAkBAARJdGVtAAAI
AQAOAAAAAAApAQAkMDcwNzUwRjItNjMxRC00RTNFLThGRTUtQkU2QjFDREYyNjMyAAAIAQBlAAAA
AAAIAQBmAAAAAAAIAQBnAAAAAAAIAQBoAAAAAAAIAQByAAAAAAAIAQB+AAAAAAAEKAAScAQoABJU
BCgAEkgDKAACKQEAJDg4N0JEMDYxLTgyRDQtNEYwNi1BMjIyLTMzN0Q0MkU3Rjg5NgAAKQEAJEZG
NUREM0YxLTk5QzEtNEZGQi1CMDk3LTFCMUIyQjlFOUIyRAAACAEAEAAAAAAACAEAEQAAAAAACAEA
EwAAAAAACAEAFQAAAAAACAEAFwAAAAAACAEAHgAAAAAAARkIAQAfAAAAAAAIAQAhAAAAAAAFKAES
TBwpAQAkRDk0Mjg4OTMtOEE5NS00REZELTgyNkMtNDAzNUU1NzI4QzYwAAAEIAASUAQoABJQKQEA
JEQ3RkQxREZDLTM2NEUtNDdCMy05NTlBLUM2NkMxRERCM0RBNQAAKQEAJEU0Njk4QTdGLTlFNDAt
NDdBRC1BNkM2LTc4NEJGQUNBMENBOQAABSgBElgcKQEAJEU3MDA3MDZDLUYyM0MtNDAwQS1CRDYy
LUFDNzYwQjExQjk4NQAACAEAagAAAAAACAEAbAAAAAAABCgAElwFKAASgJgpAQAkODlCOEUzMDYt
N0MyQS00NzJGLTg4NTAtNzIwMkI0REFGMTdCAAAIAQD8////AACAqywAAIClU3lzdGVtLlJ1bnRp
bWUuSW50ZXJvcFNlcnZpY2VzLkN1c3RvbU1hcnNoYWxlcnMuRW51bWVyYXRvclRvRW51bVZhcmlh
bnRNYXJzaGFsZXIsIEN1c3RvbU1hcnNoYWxlcnMsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1u
ZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iMDNmNWY3ZjExZDUwYTNhACkBACRCQzk0MkZFQy0yQ0VB
LTQ2NjUtQTI5MS0zODIwMEEwQzk1OUYAAAQgABFkCAEAcwAAAAAACAEAdAAAAAAABSgAEoCcBCgA
EWQpAQAkM0M3RkNCRTAtODI4Ny00Qjk3LUI2MzItN0M2MEM2M0RBQUY0AAADBhFkBAIAAAAEBAAA
AGQBACQwQjRBRjE4Qi0zNjk5LTQyODQtOUJGNy1DMjlEQkUzRDc4QkY6TWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlci5EVFNSb3dEaXNwb3NpdGlvbgAAKQEAJDZBMzMxRUJE
LUE5NTAtNDNCNS04M0EyLTAzMzU4NUY0MTdGNwAAKQEAJEUyNUUyMzRDLTBGOUEtNEEyRC05M0E4
LTFBQTA5N0U2MzU1QwAABSgBEnQcKQEAJDZBRjQxNTg0LTcxRjItNDAxRS1CMTNFLUM2NzhCOTJE
M0E1QQAACAEAaQAAAAAACAEAcQAAAAAABSgAEoCAKQEAJDczMEQ3MjJDLTJFMDAtNEM3QS04NjQx
LTBEMzc4MzUzQTk0NAAABCgAEnwpAQAkOTk0NEY2ODQtNDlDNC00MzU0LUFCN0YtRUU0MjJBNjUw
RTBFAAAGKAESgIQcKQEAJDc3Rjg0MDAyLUM4NzgtNEIzOC04NDJELUIxRTI1QTlGQkNDOAAAKQEA
JDI0MjQ0RDQ4LTI3NjQtNEY3OS04RTMzLTRDOUE3QjhENEUyRAAAKQEAJEQ1RERCNjJDLUJCQ0Yt
NDc5Ri1CQUMyLTQzODJBOTUwQjM1NgAACAEAgQAAAAAACAEAggAAAAAAKQEAJDFDMTlENEY4LTEw
NzUtNDI5QS05QUQ5LTU3QjJDM0Y3MTg4NAAABAYRgIxfAQAkMEI0QUYxOEItMzY5OS00Mjg0LTlC
RjctQzI5REJFM0Q3OEJGNU1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIu
RFRTVXNhZ2VUeXBlAAAEBhGAkGUBACQwQjRBRjE4Qi0zNjk5LTQyODQtOUJGNy1DMjlEQkUzRDc4
QkY7TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlci5EVFNJbnNlcnRQbGFj
ZW1lbnQAAAMoABwpAQAkQTA4MzZFNUUtNTBDRi00QjI4LTk1NzctRTI1MTczNzI1RjBCAAAIAQAS
AAAAAAAGKAESgKQcKQEAJDI5MEM4OEU5LTFBOTYtNEEyQS04RjQxLTQ1NEI0OEFDOTBBRQAAKQEA
JDJEOTFENkY1LTM0OUUtNDUyRi04MEU0LUU3NzkzRjA4Qzg0MwAABAYRgKAEAwAAAAQFAAAABAYA
AAAEBwAAAAQLAAAABA4AAAAEEAAAAAQRAAAABBIAAAAEEwAAAAQUAAAABBUAAAAEQAAAAARIAAAA
BIAAAAAEgQAAAASCAAAABIMAAAAEhQAAAASGAAAABIcAAAAEkQAAAASSAAAABC0BAAAELgEAAAQv
AQAABDABAAAEAkAAAAQDQAAABARAAAAEBUAAAAQGQAAABAdAAAAEC0AAAAQOQAAABBBAAAAEEUAA
AAQSQAAABBNAAAAEFEAAAAQVQAAABEBAAAAESEAAAASDQAAABIVAAAAEhkAAAASHQAAABIhAAAAE
iUAAAASKQAAAWgEAJEI0NTJEQTVBLTU0RTItNEY2My04RDYxLTFCMTkzNzQ0OTA0RDBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIuRGF0YVR5cGUAACkBACQ1Q0NEMTQ0RS01
MUFELTQxMUYtQTlENC1FOUFFNTAxNjUwRjQAAAgBAFYAAAAAACkBACQ4MUFDOEE5NC1EODk3LTRD
M0UtQTI5MC02NkU1NzVFNEQ0MjgAACkBACQ0RTg1MzU3NC1DMkUzLTRDQUUtQjc5MS0yRDRBNUQx
RDBDOTgAACkBACQyQzY0RjgzQi04RTdGLTRBQzYtOTEzOC03NUJGMzYzMDAyRUUAACkBACQyMDNF
MjRCRC01MjAzLTRDNzYtQUZDNy03Qzg1NDVFQkExQTAAACkBACQ0OTA1MDcyNy0xRjM0LTQ0QkIt
ODA2My0xNTJGRUZFRTREMDAAAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJh
bWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNC8BACpTVF8wY2VmMjlhOTM5M2Y0ZTRj
OGRkYTAyM2Q5MTA1MjZlNS5jc3Byb2oAAAUBAAAAAA0BAAhIZXhhd2FyZQAAHgEAGUNvcHlyaWdo
dCBAIEhleGF3YXJlIDIwMTUAAAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93
cwEAAOy6AAAAAAAAAAAAAA67AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuwAAAAAAAAAAAAAA
AAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYwAAANAQA
AAAAAAAAAAAANAQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABACdN/RcAAAEAJ039Fz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBJQD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAHADAAABADAAMAAwADAAMAA0AGIAMAAA
ADQACQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAASABlAHgAYQB3AGEAcgBlAAAAAACAACsA
AQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMABjAGUAZgAyADkAYQA5
ADMAOQAzAGYANABlADQAYwA4AGQAZABhADAAMgAzAGQAOQAxADAANQAyADYAZQA1AC4AYwBzAHAA
cgBvAGoAAAAAAEAADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA2ADEANAAx
AC4AMQA5ADcANQAxAAAAAACAAC8AAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADAA
YwBlAGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAwADUAMgA2
AGUANQAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAFgAGgABAEwAZQBnAGEAbABDAG8AcAB5AHIA
aQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgAEgAZQB4AGEAdwBhAHIAZQAgADIAMAAx
ADUAAACIAC8AAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AMABjAGUA
ZgAyADkAYQA5ADMAOQAzAGYANABlADQAYwA4AGQAZABhADAAMgAzAGQAOQAxADAANQAyADYAZQA1
AC4AYwBzAHAAcgBvAGoALgBkAGwAbAAAAAAAeAArAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwAwAGMAZQBmADIAOQBhADkAMwA5ADMAZgA0AGUANABjADgAZABkAGEAMAAyADMAZAA5
ADEAMAA1ADIANgBlADUALgBjAHMAcAByAG8AagAAAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgA2ADEANAAxAC4AMQA5ADcANQAxAAAAAABIAA8AAQBBAHMAcwBl
AG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADEANAAxAC4AMQA5ADcANQAxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAADAAAACA7AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="1457"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="58"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="92"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="1439"
            Column="9" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="132,42"
          Id="Package\Script Task"
          TopLeft="44.5,42.084905660377" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>